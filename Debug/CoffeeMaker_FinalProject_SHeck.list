
CoffeeMaker_FinalProject_SHeck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  0800c358  0800c358  0001c358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c730  0800c730  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c730  0800c730  0001c730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c738  0800c738  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c738  0800c738  0001c738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c73c  0800c73c  0001c73c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800c740  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007c4  200001f4  0800c934  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009b8  0800c934  000209b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eba2  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000365e  00000000  00000000  0003edc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b58  00000000  00000000  00042428  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019a0  00000000  00000000  00043f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b756  00000000  00000000  00045920  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014d4e  00000000  00000000  00071076  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00109113  00000000  00000000  00085dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018eed7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008808  00000000  00000000  0018ef54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c340 	.word	0x0800c340

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800c340 	.word	0x0800c340

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b099      	sub	sp, #100	; 0x64
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8e:	f001 fcef 	bl	8002970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f92:	f000 fa71 	bl	8001478 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f96:	f000 fcf3 	bl	8001980 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000f9a:	f000 fb89 	bl	80016b0 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000f9e:	f000 fbbf 	bl	8001720 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000fa2:	f000 fbfb 	bl	800179c <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000fa6:	f000 fc1f 	bl	80017e8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000faa:	f000 fc5b 	bl	8001864 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000fae:	f000 fc89 	bl	80018c4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000fb2:	f000 fcb7 	bl	8001924 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000fb6:	f000 fb05 	bl	80015c4 <MX_ADC1_Init>
  int M_BTN;
  int S_BTN;
  int halResult;
  int adcResult;
  float waterTemp;
  char *brew = "BREWING BEGAN\n";
 8000fba:	4bb6      	ldr	r3, [pc, #728]	; (8001294 <main+0x30c>)
 8000fbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  char *done = "BREWING COMPLETE\n";
 8000fbe:	4bb6      	ldr	r3, [pc, #728]	; (8001298 <main+0x310>)
 8000fc0:	64bb      	str	r3, [r7, #72]	; 0x48
  char *xstrength = "EXTRA STRENGTH SELECTED\n";
 8000fc2:	4bb6      	ldr	r3, [pc, #728]	; (800129c <main+0x314>)
 8000fc4:	647b      	str	r3, [r7, #68]	; 0x44
  char *normal = "NORMAL STRENGTH SELECTED\n";
 8000fc6:	4bb6      	ldr	r3, [pc, #728]	; (80012a0 <main+0x318>)
 8000fc8:	643b      	str	r3, [r7, #64]	; 0x40
  int index = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	653b      	str	r3, [r7, #80]	; 0x50
  int xStronglen = strlen (xstrength);
 8000fce:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000fd0:	f7ff f8fe 	bl	80001d0 <strlen>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  int brewlen = strlen (brew);
 8000fd8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000fda:	f7ff f8f9 	bl	80001d0 <strlen>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	63bb      	str	r3, [r7, #56]	; 0x38
  int donelen = strlen (done);
 8000fe2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000fe4:	f7ff f8f4 	bl	80001d0 <strlen>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	637b      	str	r3, [r7, #52]	; 0x34
  int normallen = strlen (normal);
 8000fec:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000fee:	f7ff f8ef 	bl	80001d0 <strlen>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	633b      	str	r3, [r7, #48]	; 0x30

  powerButton = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  LED2State = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	65fb      	str	r3, [r7, #92]	; 0x5c
  autoOffBTN = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	62bb      	str	r3, [r7, #40]	; 0x28
  autoOffLED = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	657b      	str	r3, [r7, #84]	; 0x54
  powerDownTimer = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
  powerDown_BTN = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
  extraStrengthButton = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
  extraStrengthLED = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	65bb      	str	r3, [r7, #88]	; 0x58
  XL_BTN = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
  L_BTN = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
  M_BTN = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
  S_BTN = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
  halResult = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	60bb      	str	r3, [r7, #8]
  adcResult = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
  waterTemp = 0.0;
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	603b      	str	r3, [r7, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  BSP_TSENSOR_Init();
 8001034:	f001 fbbe 	bl	80027b4 <BSP_TSENSOR_Init>
* 				i. Set variable
* 			B. LED2 goes off
	   */

	  //Power the coffee maker up
	  powerButton = BSP_PB_GetState(BUTTON_EXTI13_Pin);
 8001038:	2000      	movs	r0, #0
 800103a:	f001 fa55 	bl	80024e8 <BSP_PB_GetState>
 800103e:	4603      	mov	r3, r0
 8001040:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if (powerButton == 0)
 8001042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001044:	2b00      	cmp	r3, #0
 8001046:	d107      	bne.n	8001058 <main+0xd0>
	  {
		  BSP_LED_On(LED2_Pin);
 8001048:	2000      	movs	r0, #0
 800104a:	f001 fa21 	bl	8002490 <BSP_LED_On>
		  LED2State = 1;
 800104e:	2301      	movs	r3, #1
 8001050:	65fb      	str	r3, [r7, #92]	; 0x5c
		  HAL_Delay(250);
 8001052:	20fa      	movs	r0, #250	; 0xfa
 8001054:	f001 fd00 	bl	8002a58 <HAL_Delay>
	  }

	  //Power the coffee maker down
	  powerButton = BSP_PB_GetState(BUTTON_EXTI13_Pin);
 8001058:	2000      	movs	r0, #0
 800105a:	f001 fa45 	bl	80024e8 <BSP_PB_GetState>
 800105e:	4603      	mov	r3, r0
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if (powerButton == 0 && LED2State == 1)
 8001062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001064:	2b00      	cmp	r3, #0
 8001066:	d105      	bne.n	8001074 <main+0xec>
 8001068:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800106a:	2b01      	cmp	r3, #1
 800106c:	d102      	bne.n	8001074 <main+0xec>
	  {
		  power_off(LED2State);
 800106e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001070:	f000 fe00 	bl	8001c74 <power_off>
	  }

	  //Make a Strong Brew cup
	  extraStrengthButton = HAL_GPIO_ReadPin(Extra_Strength_BTN_GPIO_Port, Extra_Strength_BTN_Pin);
 8001074:	2104      	movs	r1, #4
 8001076:	488b      	ldr	r0, [pc, #556]	; (80012a4 <main+0x31c>)
 8001078:	f003 fc2c 	bl	80048d4 <HAL_GPIO_ReadPin>
 800107c:	4603      	mov	r3, r0
 800107e:	61fb      	str	r3, [r7, #28]
	  if (extraStrengthButton == 1)
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d11d      	bne.n	80010c2 <main+0x13a>
	  {
		  HAL_GPIO_WritePin(Extra_Strength_LED_GPIO_Port, Extra_Strength_LED_Pin, 1);
 8001086:	2201      	movs	r2, #1
 8001088:	2110      	movs	r1, #16
 800108a:	4887      	ldr	r0, [pc, #540]	; (80012a8 <main+0x320>)
 800108c:	f003 fc3a 	bl	8004904 <HAL_GPIO_WritePin>
		  extraStrengthLED = 1;
 8001090:	2301      	movs	r3, #1
 8001092:	65bb      	str	r3, [r7, #88]	; 0x58
		  HAL_Delay(250);
 8001094:	20fa      	movs	r0, #250	; 0xfa
 8001096:	f001 fcdf 	bl	8002a58 <HAL_Delay>
		  HAL_UART_Transmit(&huart1, (uint8_t*) &xstrength[index], 1, 0);
 800109a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800109c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800109e:	18d1      	adds	r1, r2, r3
 80010a0:	2300      	movs	r3, #0
 80010a2:	2201      	movs	r2, #1
 80010a4:	4881      	ldr	r0, [pc, #516]	; (80012ac <main+0x324>)
 80010a6:	f006 f82c 	bl	8007102 <HAL_UART_Transmit>
		  index++;
 80010aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010ac:	3301      	adds	r3, #1
 80010ae:	653b      	str	r3, [r7, #80]	; 0x50
		  if (index == xStronglen)
 80010b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80010b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d101      	bne.n	80010bc <main+0x134>
		  {
			  index = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	653b      	str	r3, [r7, #80]	; 0x50
		  }
		  HAL_Delay(10);
 80010bc:	200a      	movs	r0, #10
 80010be:	f001 fccb 	bl	8002a58 <HAL_Delay>
	  }

	  //Make a Normal Brew cup
	  extraStrengthButton = HAL_GPIO_ReadPin(Extra_Strength_BTN_GPIO_Port, Extra_Strength_BTN_Pin);
 80010c2:	2104      	movs	r1, #4
 80010c4:	4877      	ldr	r0, [pc, #476]	; (80012a4 <main+0x31c>)
 80010c6:	f003 fc05 	bl	80048d4 <HAL_GPIO_ReadPin>
 80010ca:	4603      	mov	r3, r0
 80010cc:	61fb      	str	r3, [r7, #28]
	  if (extraStrengthButton == 1 && extraStrengthLED == 1)
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d120      	bne.n	8001116 <main+0x18e>
 80010d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d11d      	bne.n	8001116 <main+0x18e>
	  {
		  HAL_GPIO_WritePin(Extra_Strength_LED_GPIO_Port, Extra_Strength_LED_Pin, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2110      	movs	r1, #16
 80010de:	4872      	ldr	r0, [pc, #456]	; (80012a8 <main+0x320>)
 80010e0:	f003 fc10 	bl	8004904 <HAL_GPIO_WritePin>
		  extraStrengthLED = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	65bb      	str	r3, [r7, #88]	; 0x58
		  HAL_Delay(250);
 80010e8:	20fa      	movs	r0, #250	; 0xfa
 80010ea:	f001 fcb5 	bl	8002a58 <HAL_Delay>
		  HAL_UART_Transmit(&huart1, (uint8_t *) &normal[index],1,0);
 80010ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80010f2:	18d1      	adds	r1, r2, r3
 80010f4:	2300      	movs	r3, #0
 80010f6:	2201      	movs	r2, #1
 80010f8:	486c      	ldr	r0, [pc, #432]	; (80012ac <main+0x324>)
 80010fa:	f006 f802 	bl	8007102 <HAL_UART_Transmit>
		  index++;
 80010fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001100:	3301      	adds	r3, #1
 8001102:	653b      	str	r3, [r7, #80]	; 0x50
		  if (index == normallen)
 8001104:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001108:	429a      	cmp	r2, r3
 800110a:	d101      	bne.n	8001110 <main+0x188>
		  {
			  index = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	653b      	str	r3, [r7, #80]	; 0x50
		  }
		  HAL_Delay(10);
 8001110:	200a      	movs	r0, #10
 8001112:	f001 fca1 	bl	8002a58 <HAL_Delay>
	  }

	  //Make a 12 Ounce cup
	  XL_BTN = HAL_GPIO_ReadPin(xlButton_GPIO_Port, xlButton_Pin);
 8001116:	2101      	movs	r1, #1
 8001118:	4865      	ldr	r0, [pc, #404]	; (80012b0 <main+0x328>)
 800111a:	f003 fbdb 	bl	80048d4 <HAL_GPIO_ReadPin>
 800111e:	4603      	mov	r3, r0
 8001120:	61bb      	str	r3, [r7, #24]
	  if (XL_BTN == 1)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d13b      	bne.n	80011a0 <main+0x218>
	  {
		  HAL_GPIO_WritePin(xlLED_GPIO_Port, xlLED_Pin, 1);
 8001128:	2201      	movs	r2, #1
 800112a:	2104      	movs	r1, #4
 800112c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001130:	f003 fbe8 	bl	8004904 <HAL_GPIO_WritePin>
		  HAL_UART_Transmit(&huart1, (uint8_t *) &brew[index], 1, 0);
 8001134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001136:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001138:	18d1      	adds	r1, r2, r3
 800113a:	2300      	movs	r3, #0
 800113c:	2201      	movs	r2, #1
 800113e:	485b      	ldr	r0, [pc, #364]	; (80012ac <main+0x324>)
 8001140:	f005 ffdf 	bl	8007102 <HAL_UART_Transmit>
		  index++;
 8001144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001146:	3301      	adds	r3, #1
 8001148:	653b      	str	r3, [r7, #80]	; 0x50
		  if (index == normallen)
 800114a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800114c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800114e:	429a      	cmp	r2, r3
 8001150:	d101      	bne.n	8001156 <main+0x1ce>
			  {
				  index = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	653b      	str	r3, [r7, #80]	; 0x50
			  }
		  	  HAL_Delay(10);
 8001156:	200a      	movs	r0, #10
 8001158:	f001 fc7e 	bl	8002a58 <HAL_Delay>
		  HAL_Delay(12000);
 800115c:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 8001160:	f001 fc7a 	bl	8002a58 <HAL_Delay>
		  HAL_GPIO_WritePin(xlLED_GPIO_Port, xlLED_Pin, 0);
 8001164:	2200      	movs	r2, #0
 8001166:	2104      	movs	r1, #4
 8001168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116c:	f003 fbca 	bl	8004904 <HAL_GPIO_WritePin>
		  XL_BTN = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	61bb      	str	r3, [r7, #24]
		  powerDownTimer = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
		  HAL_UART_Transmit(&huart1, (uint8_t *) &brew[index], 1, 0);
 8001178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800117a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800117c:	18d1      	adds	r1, r2, r3
 800117e:	2300      	movs	r3, #0
 8001180:	2201      	movs	r2, #1
 8001182:	484a      	ldr	r0, [pc, #296]	; (80012ac <main+0x324>)
 8001184:	f005 ffbd 	bl	8007102 <HAL_UART_Transmit>
		  index++;
 8001188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800118a:	3301      	adds	r3, #1
 800118c:	653b      	str	r3, [r7, #80]	; 0x50
		  if (index == donelen)
 800118e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001192:	429a      	cmp	r2, r3
 8001194:	d101      	bne.n	800119a <main+0x212>
		  {
			  index = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	653b      	str	r3, [r7, #80]	; 0x50
		  }
		  HAL_Delay(10);
 800119a:	200a      	movs	r0, #10
 800119c:	f001 fc5c 	bl	8002a58 <HAL_Delay>
	  }

	  // make a 10 Ounce cup
	  L_BTN = HAL_GPIO_ReadPin(largeButton_GPIO_Port, largeButton_Pin);
 80011a0:	2110      	movs	r1, #16
 80011a2:	4840      	ldr	r0, [pc, #256]	; (80012a4 <main+0x31c>)
 80011a4:	f003 fb96 	bl	80048d4 <HAL_GPIO_ReadPin>
 80011a8:	4603      	mov	r3, r0
 80011aa:	617b      	str	r3, [r7, #20]
	  if (L_BTN == 1)
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d13b      	bne.n	800122a <main+0x2a2>
	  {
		  HAL_GPIO_WritePin(largeLED_GPIO_Port, largeLED_Pin, 1);
 80011b2:	2201      	movs	r2, #1
 80011b4:	2140      	movs	r1, #64	; 0x40
 80011b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ba:	f003 fba3 	bl	8004904 <HAL_GPIO_WritePin>
		  HAL_UART_Transmit(&huart1, (uint8_t *) &brew[index], 1, 0);
 80011be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80011c2:	18d1      	adds	r1, r2, r3
 80011c4:	2300      	movs	r3, #0
 80011c6:	2201      	movs	r2, #1
 80011c8:	4838      	ldr	r0, [pc, #224]	; (80012ac <main+0x324>)
 80011ca:	f005 ff9a 	bl	8007102 <HAL_UART_Transmit>
		  index++;
 80011ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011d0:	3301      	adds	r3, #1
 80011d2:	653b      	str	r3, [r7, #80]	; 0x50
		  if (index == normallen)
 80011d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80011d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011d8:	429a      	cmp	r2, r3
 80011da:	d101      	bne.n	80011e0 <main+0x258>
			  {
				  index = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	653b      	str	r3, [r7, #80]	; 0x50
			  }
		  	  HAL_Delay(10);
 80011e0:	200a      	movs	r0, #10
 80011e2:	f001 fc39 	bl	8002a58 <HAL_Delay>
		  HAL_Delay(10000);
 80011e6:	f242 7010 	movw	r0, #10000	; 0x2710
 80011ea:	f001 fc35 	bl	8002a58 <HAL_Delay>
		  HAL_GPIO_WritePin(largeLED_GPIO_Port, largeLED_Pin, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2140      	movs	r1, #64	; 0x40
 80011f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f6:	f003 fb85 	bl	8004904 <HAL_GPIO_WritePin>
		  L_BTN = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
		  powerDownTimer = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
		  HAL_UART_Transmit(&huart1, (uint8_t *) &brew[index], 1, 0);
 8001202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001204:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001206:	18d1      	adds	r1, r2, r3
 8001208:	2300      	movs	r3, #0
 800120a:	2201      	movs	r2, #1
 800120c:	4827      	ldr	r0, [pc, #156]	; (80012ac <main+0x324>)
 800120e:	f005 ff78 	bl	8007102 <HAL_UART_Transmit>
		  index++;
 8001212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001214:	3301      	adds	r3, #1
 8001216:	653b      	str	r3, [r7, #80]	; 0x50
		  if (index == donelen)
 8001218:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800121a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800121c:	429a      	cmp	r2, r3
 800121e:	d101      	bne.n	8001224 <main+0x29c>
		  {
			  index = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	653b      	str	r3, [r7, #80]	; 0x50
		  }
		  HAL_Delay(10);
 8001224:	200a      	movs	r0, #10
 8001226:	f001 fc17 	bl	8002a58 <HAL_Delay>
	  }

	  //Make an 8 Ounce cup
	  M_BTN = HAL_GPIO_ReadPin(medButton_GPIO_Port, medButton_Pin);
 800122a:	2104      	movs	r1, #4
 800122c:	481e      	ldr	r0, [pc, #120]	; (80012a8 <main+0x320>)
 800122e:	f003 fb51 	bl	80048d4 <HAL_GPIO_ReadPin>
 8001232:	4603      	mov	r3, r0
 8001234:	613b      	str	r3, [r7, #16]
	  if (M_BTN == 1)
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d14a      	bne.n	80012d2 <main+0x34a>
	  {
		  HAL_GPIO_WritePin(medLED_GPIO_Port, medLED_Pin, 1);
 800123c:	2201      	movs	r2, #1
 800123e:	2102      	movs	r1, #2
 8001240:	4819      	ldr	r0, [pc, #100]	; (80012a8 <main+0x320>)
 8001242:	f003 fb5f 	bl	8004904 <HAL_GPIO_WritePin>
		  HAL_UART_Transmit(&huart1, (uint8_t *) &brew[index], 1, 0);
 8001246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001248:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800124a:	18d1      	adds	r1, r2, r3
 800124c:	2300      	movs	r3, #0
 800124e:	2201      	movs	r2, #1
 8001250:	4816      	ldr	r0, [pc, #88]	; (80012ac <main+0x324>)
 8001252:	f005 ff56 	bl	8007102 <HAL_UART_Transmit>
		  index++;
 8001256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001258:	3301      	adds	r3, #1
 800125a:	653b      	str	r3, [r7, #80]	; 0x50
		  if (index == normallen)
 800125c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800125e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001260:	429a      	cmp	r2, r3
 8001262:	d101      	bne.n	8001268 <main+0x2e0>
			  {
				  index = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	653b      	str	r3, [r7, #80]	; 0x50
			  }
		  	  HAL_Delay(10);
 8001268:	200a      	movs	r0, #10
 800126a:	f001 fbf5 	bl	8002a58 <HAL_Delay>
		  HAL_Delay(8000);
 800126e:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8001272:	f001 fbf1 	bl	8002a58 <HAL_Delay>
		  HAL_GPIO_WritePin(medLED_GPIO_Port, medLED_Pin, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2102      	movs	r1, #2
 800127a:	480b      	ldr	r0, [pc, #44]	; (80012a8 <main+0x320>)
 800127c:	f003 fb42 	bl	8004904 <HAL_GPIO_WritePin>
		  M_BTN = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	613b      	str	r3, [r7, #16]
		  powerDownTimer = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
		  HAL_UART_Transmit(&huart1, (uint8_t *) &brew[index], 1, 0);
 8001288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800128a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800128c:	18d1      	adds	r1, r2, r3
 800128e:	2300      	movs	r3, #0
 8001290:	2201      	movs	r2, #1
 8001292:	e00f      	b.n	80012b4 <main+0x32c>
 8001294:	0800c358 	.word	0x0800c358
 8001298:	0800c368 	.word	0x0800c368
 800129c:	0800c37c 	.word	0x0800c37c
 80012a0:	0800c398 	.word	0x0800c398
 80012a4:	48000c00 	.word	0x48000c00
 80012a8:	48000800 	.word	0x48000800
 80012ac:	20000820 	.word	0x20000820
 80012b0:	48000400 	.word	0x48000400
 80012b4:	486b      	ldr	r0, [pc, #428]	; (8001464 <main+0x4dc>)
 80012b6:	f005 ff24 	bl	8007102 <HAL_UART_Transmit>
		  index++;
 80012ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012bc:	3301      	adds	r3, #1
 80012be:	653b      	str	r3, [r7, #80]	; 0x50
		  if (index == donelen)
 80012c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80012c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d101      	bne.n	80012cc <main+0x344>
		  {
			  index = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	653b      	str	r3, [r7, #80]	; 0x50
		  }
		  HAL_Delay(10);
 80012cc:	200a      	movs	r0, #10
 80012ce:	f001 fbc3 	bl	8002a58 <HAL_Delay>
	  }

	  //Make a 6 Ounce cup
	  S_BTN = HAL_GPIO_ReadPin(smallButton_GPIO_Port, smallButton_Pin);
 80012d2:	2104      	movs	r1, #4
 80012d4:	4864      	ldr	r0, [pc, #400]	; (8001468 <main+0x4e0>)
 80012d6:	f003 fafd 	bl	80048d4 <HAL_GPIO_ReadPin>
 80012da:	4603      	mov	r3, r0
 80012dc:	60fb      	str	r3, [r7, #12]
	  if (S_BTN == 1)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d13b      	bne.n	800135c <main+0x3d4>
	  {
		  HAL_GPIO_WritePin(smallLED_GPIO_Port, smallLED_Pin, 1);
 80012e4:	2201      	movs	r2, #1
 80012e6:	2110      	movs	r1, #16
 80012e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ec:	f003 fb0a 	bl	8004904 <HAL_GPIO_WritePin>
		  HAL_UART_Transmit(&huart1, (uint8_t *) &brew[index], 1, 0);
 80012f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80012f4:	18d1      	adds	r1, r2, r3
 80012f6:	2300      	movs	r3, #0
 80012f8:	2201      	movs	r2, #1
 80012fa:	485a      	ldr	r0, [pc, #360]	; (8001464 <main+0x4dc>)
 80012fc:	f005 ff01 	bl	8007102 <HAL_UART_Transmit>
		  index++;
 8001300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001302:	3301      	adds	r3, #1
 8001304:	653b      	str	r3, [r7, #80]	; 0x50
		  if (index == normallen)
 8001306:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800130a:	429a      	cmp	r2, r3
 800130c:	d101      	bne.n	8001312 <main+0x38a>
			  {
				  index = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	653b      	str	r3, [r7, #80]	; 0x50
			  }
		  	  HAL_Delay(10);
 8001312:	200a      	movs	r0, #10
 8001314:	f001 fba0 	bl	8002a58 <HAL_Delay>
		  HAL_Delay(6000);
 8001318:	f241 7070 	movw	r0, #6000	; 0x1770
 800131c:	f001 fb9c 	bl	8002a58 <HAL_Delay>
		  HAL_GPIO_WritePin(smallLED_GPIO_Port, smallLED_Pin, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	2110      	movs	r1, #16
 8001324:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001328:	f003 faec 	bl	8004904 <HAL_GPIO_WritePin>
		  S_BTN = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
		  powerDownTimer = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
		  HAL_UART_Transmit(&huart1, (uint8_t *) &brew[index], 1, 0);
 8001334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001336:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001338:	18d1      	adds	r1, r2, r3
 800133a:	2300      	movs	r3, #0
 800133c:	2201      	movs	r2, #1
 800133e:	4849      	ldr	r0, [pc, #292]	; (8001464 <main+0x4dc>)
 8001340:	f005 fedf 	bl	8007102 <HAL_UART_Transmit>
		  index++;
 8001344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001346:	3301      	adds	r3, #1
 8001348:	653b      	str	r3, [r7, #80]	; 0x50
		  if (index == donelen)
 800134a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800134c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800134e:	429a      	cmp	r2, r3
 8001350:	d101      	bne.n	8001356 <main+0x3ce>
		  {
			  index = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	653b      	str	r3, [r7, #80]	; 0x50
		  }
		  HAL_Delay(10);
 8001356:	200a      	movs	r0, #10
 8001358:	f001 fb7e 	bl	8002a58 <HAL_Delay>
	  }

	  //Check water level
HAL_ADC_Start_IT (&hadc1);
 800135c:	4843      	ldr	r0, [pc, #268]	; (800146c <main+0x4e4>)
 800135e:	f001 ffa5 	bl	80032ac <HAL_ADC_Start_IT>
halResult = HAL_ADC_PollForConversion(&hadc1, 100);
 8001362:	2164      	movs	r1, #100	; 0x64
 8001364:	4841      	ldr	r0, [pc, #260]	; (800146c <main+0x4e4>)
 8001366:	f001 fed1 	bl	800310c <HAL_ADC_PollForConversion>
 800136a:	4603      	mov	r3, r0
 800136c:	60bb      	str	r3, [r7, #8]
adcResult = HAL_ADC_GetValue(&hadc1);
 800136e:	483f      	ldr	r0, [pc, #252]	; (800146c <main+0x4e4>)
 8001370:	f002 f8ce 	bl	8003510 <HAL_ADC_GetValue>
 8001374:	4603      	mov	r3, r0
 8001376:	607b      	str	r3, [r7, #4]
if (adcResult >= 1934)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f240 728d 	movw	r2, #1933	; 0x78d
 800137e:	4293      	cmp	r3, r2
 8001380:	dd1c      	ble.n	80013bc <main+0x434>
{
	HAL_GPIO_WritePin(Low_Water_LED_GPIO_Port, Low_Water_LED_Pin, 1);
 8001382:	2201      	movs	r2, #1
 8001384:	2102      	movs	r1, #2
 8001386:	4838      	ldr	r0, [pc, #224]	; (8001468 <main+0x4e0>)
 8001388:	f003 fabc 	bl	8004904 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(xlLED_GPIO_Port, xlLED_Pin, 0);
 800138c:	2200      	movs	r2, #0
 800138e:	2104      	movs	r1, #4
 8001390:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001394:	f003 fab6 	bl	8004904 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(largeLED_GPIO_Port, largeLED_Pin, 0);
 8001398:	2200      	movs	r2, #0
 800139a:	2140      	movs	r1, #64	; 0x40
 800139c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a0:	f003 fab0 	bl	8004904 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(medLED_GPIO_Port, medLED_Pin, 0);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2102      	movs	r1, #2
 80013a8:	4831      	ldr	r0, [pc, #196]	; (8001470 <main+0x4e8>)
 80013aa:	f003 faab 	bl	8004904 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(smallLED_GPIO_Port, smallLED_Pin, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2110      	movs	r1, #16
 80013b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b6:	f003 faa5 	bl	8004904 <HAL_GPIO_WritePin>
 80013ba:	e009      	b.n	80013d0 <main+0x448>
}
else if (adcResult < 1934)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f240 728d 	movw	r2, #1933	; 0x78d
 80013c2:	4293      	cmp	r3, r2
 80013c4:	dc04      	bgt.n	80013d0 <main+0x448>
{
	HAL_GPIO_WritePin(Low_Water_LED_GPIO_Port, Low_Water_LED_Pin, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2102      	movs	r1, #2
 80013ca:	4827      	ldr	r0, [pc, #156]	; (8001468 <main+0x4e0>)
 80013cc:	f003 fa9a 	bl	8004904 <HAL_GPIO_WritePin>
}

//auto-off
powerDown_BTN = HAL_GPIO_ReadPin(autoOffBTN_GPIO_Port, Auto_Off_LED_Pin);
 80013d0:	2108      	movs	r1, #8
 80013d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d6:	f003 fa7d 	bl	80048d4 <HAL_GPIO_ReadPin>
 80013da:	4603      	mov	r3, r0
 80013dc:	623b      	str	r3, [r7, #32]
if (powerDown_BTN == 1)
 80013de:	6a3b      	ldr	r3, [r7, #32]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d118      	bne.n	8001416 <main+0x48e>
{
	HAL_GPIO_WritePin(Auto_Off_LED_GPIO_Port, Auto_Off_LED_Pin, 1);
 80013e4:	2201      	movs	r2, #1
 80013e6:	2108      	movs	r1, #8
 80013e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ec:	f003 fa8a 	bl	8004904 <HAL_GPIO_WritePin>
	autoOffLED = 1;
 80013f0:	2301      	movs	r3, #1
 80013f2:	657b      	str	r3, [r7, #84]	; 0x54
	powerDownTimer = HAL_GetTick();
 80013f4:	f001 fb24 	bl	8002a40 <HAL_GetTick>
 80013f8:	4603      	mov	r3, r0
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
	powerDown_BTN = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
	HAL_Delay(250);
 8001400:	20fa      	movs	r0, #250	; 0xfa
 8001402:	f001 fb29 	bl	8002a58 <HAL_Delay>
	if (powerDownTimer == 50000)
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	f24c 3250 	movw	r2, #50000	; 0xc350
 800140c:	4293      	cmp	r3, r2
 800140e:	d102      	bne.n	8001416 <main+0x48e>
	{
		power_off(LED2State);
 8001410:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001412:	f000 fc2f 	bl	8001c74 <power_off>
	}
}
powerDown_BTN = HAL_GPIO_ReadPin(autoOffBTN_GPIO_Port, autoOffBTN_Pin);
 8001416:	2180      	movs	r1, #128	; 0x80
 8001418:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141c:	f003 fa5a 	bl	80048d4 <HAL_GPIO_ReadPin>
 8001420:	4603      	mov	r3, r0
 8001422:	623b      	str	r3, [r7, #32]
if (powerDown_BTN == 1 && autoOffLED == 1)
 8001424:	6a3b      	ldr	r3, [r7, #32]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d10d      	bne.n	8001446 <main+0x4be>
 800142a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800142c:	2b01      	cmp	r3, #1
 800142e:	d10a      	bne.n	8001446 <main+0x4be>
{
	HAL_GPIO_WritePin(Auto_Off_LED_GPIO_Port, Auto_Off_LED_Pin, 0);
 8001430:	2200      	movs	r2, #0
 8001432:	2108      	movs	r1, #8
 8001434:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001438:	f003 fa64 	bl	8004904 <HAL_GPIO_WritePin>
	autoOffLED = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	657b      	str	r3, [r7, #84]	; 0x54
	HAL_Delay(250);
 8001440:	20fa      	movs	r0, #250	; 0xfa
 8001442:	f001 fb09 	bl	8002a58 <HAL_Delay>
}

//water temperature
waterTemp = BSP_TSENSOR_ReadTemp();
 8001446:	f001 f9d1 	bl	80027ec <BSP_TSENSOR_ReadTemp>
 800144a:	ed87 0a00 	vstr	s0, [r7]
printf ("waterTemp %f\n", waterTemp);
 800144e:	6838      	ldr	r0, [r7, #0]
 8001450:	f7ff f87a 	bl	8000548 <__aeabi_f2d>
 8001454:	4603      	mov	r3, r0
 8001456:	460c      	mov	r4, r1
 8001458:	461a      	mov	r2, r3
 800145a:	4623      	mov	r3, r4
 800145c:	4805      	ldr	r0, [pc, #20]	; (8001474 <main+0x4ec>)
 800145e:	f007 fbdb 	bl	8008c18 <iprintf>
	  powerButton = BSP_PB_GetState(BUTTON_EXTI13_Pin);
 8001462:	e5e9      	b.n	8001038 <main+0xb0>
 8001464:	20000820 	.word	0x20000820
 8001468:	48000400 	.word	0x48000400
 800146c:	200007b8 	.word	0x200007b8
 8001470:	48000800 	.word	0x48000800
 8001474:	0800c3b4 	.word	0x0800c3b4

08001478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b0b8      	sub	sp, #224	; 0xe0
 800147c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001482:	2244      	movs	r2, #68	; 0x44
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f006 fd7f 	bl	8007f8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800148c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800149c:	463b      	mov	r3, r7
 800149e:	2288      	movs	r2, #136	; 0x88
 80014a0:	2100      	movs	r1, #0
 80014a2:	4618      	mov	r0, r3
 80014a4:	f006 fd71 	bl	8007f8a <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014a8:	f004 f950 	bl	800574c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80014ac:	4b43      	ldr	r3, [pc, #268]	; (80015bc <SystemClock_Config+0x144>)
 80014ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014b2:	4a42      	ldr	r2, [pc, #264]	; (80015bc <SystemClock_Config+0x144>)
 80014b4:	f023 0318 	bic.w	r3, r3, #24
 80014b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80014bc:	2314      	movs	r3, #20
 80014be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014c2:	2301      	movs	r3, #1
 80014c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014c8:	2301      	movs	r3, #1
 80014ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80014d4:	2360      	movs	r3, #96	; 0x60
 80014d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014da:	2302      	movs	r3, #2
 80014dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80014e0:	2301      	movs	r3, #1
 80014e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014e6:	2301      	movs	r3, #1
 80014e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80014ec:	2328      	movs	r3, #40	; 0x28
 80014ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014f2:	2307      	movs	r3, #7
 80014f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014f8:	2302      	movs	r3, #2
 80014fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014fe:	2302      	movs	r3, #2
 8001500:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001504:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001508:	4618      	mov	r0, r3
 800150a:	f004 fa5f 	bl	80059cc <HAL_RCC_OscConfig>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001514:	f000 fbe4 	bl	8001ce0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001518:	230f      	movs	r3, #15
 800151a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800151e:	2303      	movs	r3, #3
 8001520:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001524:	2300      	movs	r3, #0
 8001526:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800152a:	2300      	movs	r3, #0
 800152c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001530:	2300      	movs	r3, #0
 8001532:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001536:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800153a:	2104      	movs	r1, #4
 800153c:	4618      	mov	r0, r3
 800153e:	f004 fe2b 	bl	8006198 <HAL_RCC_ClockConfig>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001548:	f000 fbca 	bl	8001ce0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 800154c:	4b1c      	ldr	r3, [pc, #112]	; (80015c0 <SystemClock_Config+0x148>)
 800154e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001550:	2300      	movs	r3, #0
 8001552:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001554:	2300      	movs	r3, #0
 8001556:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001558:	2300      	movs	r3, #0
 800155a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800155c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001560:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001562:	2300      	movs	r3, #0
 8001564:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001568:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800156c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800156e:	2301      	movs	r3, #1
 8001570:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001572:	2301      	movs	r3, #1
 8001574:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001576:	2318      	movs	r3, #24
 8001578:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800157a:	2307      	movs	r3, #7
 800157c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800157e:	2302      	movs	r3, #2
 8001580:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001582:	2302      	movs	r3, #2
 8001584:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001586:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 800158a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800158c:	463b      	mov	r3, r7
 800158e:	4618      	mov	r0, r3
 8001590:	f005 f806 	bl	80065a0 <HAL_RCCEx_PeriphCLKConfig>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <SystemClock_Config+0x126>
  {
    Error_Handler();
 800159a:	f000 fba1 	bl	8001ce0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800159e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015a2:	f004 f8f1 	bl	8005788 <HAL_PWREx_ControlVoltageScaling>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <SystemClock_Config+0x138>
  {
    Error_Handler();
 80015ac:	f000 fb98 	bl	8001ce0 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80015b0:	f005 fadc 	bl	8006b6c <HAL_RCCEx_EnableMSIPLLMode>
}
 80015b4:	bf00      	nop
 80015b6:	37e0      	adds	r7, #224	; 0xe0
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40021000 	.word	0x40021000
 80015c0:	00016085 	.word	0x00016085

080015c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	; 0x28
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80015ca:	f107 031c 	add.w	r3, r7, #28
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
 80015e4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80015e6:	4b2f      	ldr	r3, [pc, #188]	; (80016a4 <MX_ADC1_Init+0xe0>)
 80015e8:	4a2f      	ldr	r2, [pc, #188]	; (80016a8 <MX_ADC1_Init+0xe4>)
 80015ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80015ec:	4b2d      	ldr	r3, [pc, #180]	; (80016a4 <MX_ADC1_Init+0xe0>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015f2:	4b2c      	ldr	r3, [pc, #176]	; (80016a4 <MX_ADC1_Init+0xe0>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015f8:	4b2a      	ldr	r3, [pc, #168]	; (80016a4 <MX_ADC1_Init+0xe0>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015fe:	4b29      	ldr	r3, [pc, #164]	; (80016a4 <MX_ADC1_Init+0xe0>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001604:	4b27      	ldr	r3, [pc, #156]	; (80016a4 <MX_ADC1_Init+0xe0>)
 8001606:	2204      	movs	r2, #4
 8001608:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800160a:	4b26      	ldr	r3, [pc, #152]	; (80016a4 <MX_ADC1_Init+0xe0>)
 800160c:	2200      	movs	r2, #0
 800160e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001610:	4b24      	ldr	r3, [pc, #144]	; (80016a4 <MX_ADC1_Init+0xe0>)
 8001612:	2200      	movs	r2, #0
 8001614:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001616:	4b23      	ldr	r3, [pc, #140]	; (80016a4 <MX_ADC1_Init+0xe0>)
 8001618:	2201      	movs	r2, #1
 800161a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800161c:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <MX_ADC1_Init+0xe0>)
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001624:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <MX_ADC1_Init+0xe0>)
 8001626:	2200      	movs	r2, #0
 8001628:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800162a:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <MX_ADC1_Init+0xe0>)
 800162c:	2200      	movs	r2, #0
 800162e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001630:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <MX_ADC1_Init+0xe0>)
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001638:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <MX_ADC1_Init+0xe0>)
 800163a:	2200      	movs	r2, #0
 800163c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800163e:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <MX_ADC1_Init+0xe0>)
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001646:	4817      	ldr	r0, [pc, #92]	; (80016a4 <MX_ADC1_Init+0xe0>)
 8001648:	f001 fc0c 	bl	8002e64 <HAL_ADC_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001652:	f000 fb45 	bl	8001ce0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800165a:	f107 031c 	add.w	r3, r7, #28
 800165e:	4619      	mov	r1, r3
 8001660:	4810      	ldr	r0, [pc, #64]	; (80016a4 <MX_ADC1_Init+0xe0>)
 8001662:	f002 fbd1 	bl	8003e08 <HAL_ADCEx_MultiModeConfigChannel>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800166c:	f000 fb38 	bl	8001ce0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <MX_ADC1_Init+0xe8>)
 8001672:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001674:	2306      	movs	r3, #6
 8001676:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800167c:	237f      	movs	r3, #127	; 0x7f
 800167e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001680:	2304      	movs	r3, #4
 8001682:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001688:	1d3b      	adds	r3, r7, #4
 800168a:	4619      	mov	r1, r3
 800168c:	4805      	ldr	r0, [pc, #20]	; (80016a4 <MX_ADC1_Init+0xe0>)
 800168e:	f001 ff4d 	bl	800352c <HAL_ADC_ConfigChannel>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001698:	f000 fb22 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800169c:	bf00      	nop
 800169e:	3728      	adds	r7, #40	; 0x28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	200007b8 	.word	0x200007b8
 80016a8:	50040000 	.word	0x50040000
 80016ac:	3ac04000 	.word	0x3ac04000

080016b0 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80016b4:	4b18      	ldr	r3, [pc, #96]	; (8001718 <MX_DFSDM1_Init+0x68>)
 80016b6:	4a19      	ldr	r2, [pc, #100]	; (800171c <MX_DFSDM1_Init+0x6c>)
 80016b8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80016ba:	4b17      	ldr	r3, [pc, #92]	; (8001718 <MX_DFSDM1_Init+0x68>)
 80016bc:	2201      	movs	r2, #1
 80016be:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80016c0:	4b15      	ldr	r3, [pc, #84]	; (8001718 <MX_DFSDM1_Init+0x68>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80016c6:	4b14      	ldr	r3, [pc, #80]	; (8001718 <MX_DFSDM1_Init+0x68>)
 80016c8:	2202      	movs	r2, #2
 80016ca:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <MX_DFSDM1_Init+0x68>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80016d2:	4b11      	ldr	r3, [pc, #68]	; (8001718 <MX_DFSDM1_Init+0x68>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80016d8:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <MX_DFSDM1_Init+0x68>)
 80016da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016de:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80016e0:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <MX_DFSDM1_Init+0x68>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80016e6:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <MX_DFSDM1_Init+0x68>)
 80016e8:	2204      	movs	r2, #4
 80016ea:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80016ec:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <MX_DFSDM1_Init+0x68>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80016f2:	4b09      	ldr	r3, [pc, #36]	; (8001718 <MX_DFSDM1_Init+0x68>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80016f8:	4b07      	ldr	r3, [pc, #28]	; (8001718 <MX_DFSDM1_Init+0x68>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <MX_DFSDM1_Init+0x68>)
 8001700:	2200      	movs	r2, #0
 8001702:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001704:	4804      	ldr	r0, [pc, #16]	; (8001718 <MX_DFSDM1_Init+0x68>)
 8001706:	f002 fd3d 	bl	8004184 <HAL_DFSDM_ChannelInit>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001710:	f000 fae6 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000248 	.word	0x20000248
 800171c:	40016020 	.word	0x40016020

08001720 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001724:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <MX_I2C2_Init+0x74>)
 8001726:	4a1c      	ldr	r2, [pc, #112]	; (8001798 <MX_I2C2_Init+0x78>)
 8001728:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800172a:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <MX_I2C2_Init+0x74>)
 800172c:	f640 6214 	movw	r2, #3604	; 0xe14
 8001730:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001732:	4b18      	ldr	r3, [pc, #96]	; (8001794 <MX_I2C2_Init+0x74>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001738:	4b16      	ldr	r3, [pc, #88]	; (8001794 <MX_I2C2_Init+0x74>)
 800173a:	2201      	movs	r2, #1
 800173c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <MX_I2C2_Init+0x74>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <MX_I2C2_Init+0x74>)
 8001746:	2200      	movs	r2, #0
 8001748:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800174a:	4b12      	ldr	r3, [pc, #72]	; (8001794 <MX_I2C2_Init+0x74>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001750:	4b10      	ldr	r3, [pc, #64]	; (8001794 <MX_I2C2_Init+0x74>)
 8001752:	2200      	movs	r2, #0
 8001754:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001756:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <MX_I2C2_Init+0x74>)
 8001758:	2200      	movs	r2, #0
 800175a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800175c:	480d      	ldr	r0, [pc, #52]	; (8001794 <MX_I2C2_Init+0x74>)
 800175e:	f003 f90c 	bl	800497a <HAL_I2C_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001768:	f000 faba 	bl	8001ce0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800176c:	2100      	movs	r1, #0
 800176e:	4809      	ldr	r0, [pc, #36]	; (8001794 <MX_I2C2_Init+0x74>)
 8001770:	f003 fe0c 	bl	800538c <HAL_I2CEx_ConfigAnalogFilter>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800177a:	f000 fab1 	bl	8001ce0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800177e:	2100      	movs	r1, #0
 8001780:	4804      	ldr	r0, [pc, #16]	; (8001794 <MX_I2C2_Init+0x74>)
 8001782:	f003 fe4e 	bl	8005422 <HAL_I2CEx_ConfigDigitalFilter>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800178c:	f000 faa8 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000708 	.word	0x20000708
 8001798:	40005800 	.word	0x40005800

0800179c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80017a0:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <MX_QUADSPI_Init+0x44>)
 80017a2:	4a10      	ldr	r2, [pc, #64]	; (80017e4 <MX_QUADSPI_Init+0x48>)
 80017a4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <MX_QUADSPI_Init+0x44>)
 80017a8:	22ff      	movs	r2, #255	; 0xff
 80017aa:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <MX_QUADSPI_Init+0x44>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80017b2:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <MX_QUADSPI_Init+0x44>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <MX_QUADSPI_Init+0x44>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <MX_QUADSPI_Init+0x44>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <MX_QUADSPI_Init+0x44>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80017ca:	4805      	ldr	r0, [pc, #20]	; (80017e0 <MX_QUADSPI_Init+0x44>)
 80017cc:	f004 f842 	bl	8005854 <HAL_QSPI_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80017d6:	f000 fa83 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200008a0 	.word	0x200008a0
 80017e4:	a0001000 	.word	0xa0001000

080017e8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80017ec:	4b1b      	ldr	r3, [pc, #108]	; (800185c <MX_SPI3_Init+0x74>)
 80017ee:	4a1c      	ldr	r2, [pc, #112]	; (8001860 <MX_SPI3_Init+0x78>)
 80017f0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80017f2:	4b1a      	ldr	r3, [pc, #104]	; (800185c <MX_SPI3_Init+0x74>)
 80017f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017f8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80017fa:	4b18      	ldr	r3, [pc, #96]	; (800185c <MX_SPI3_Init+0x74>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001800:	4b16      	ldr	r3, [pc, #88]	; (800185c <MX_SPI3_Init+0x74>)
 8001802:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001806:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001808:	4b14      	ldr	r3, [pc, #80]	; (800185c <MX_SPI3_Init+0x74>)
 800180a:	2200      	movs	r2, #0
 800180c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800180e:	4b13      	ldr	r3, [pc, #76]	; (800185c <MX_SPI3_Init+0x74>)
 8001810:	2200      	movs	r2, #0
 8001812:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <MX_SPI3_Init+0x74>)
 8001816:	f44f 7200 	mov.w	r2, #512	; 0x200
 800181a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800181c:	4b0f      	ldr	r3, [pc, #60]	; (800185c <MX_SPI3_Init+0x74>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001822:	4b0e      	ldr	r3, [pc, #56]	; (800185c <MX_SPI3_Init+0x74>)
 8001824:	2200      	movs	r2, #0
 8001826:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <MX_SPI3_Init+0x74>)
 800182a:	2200      	movs	r2, #0
 800182c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800182e:	4b0b      	ldr	r3, [pc, #44]	; (800185c <MX_SPI3_Init+0x74>)
 8001830:	2200      	movs	r2, #0
 8001832:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <MX_SPI3_Init+0x74>)
 8001836:	2207      	movs	r2, #7
 8001838:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800183a:	4b08      	ldr	r3, [pc, #32]	; (800185c <MX_SPI3_Init+0x74>)
 800183c:	2200      	movs	r2, #0
 800183e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <MX_SPI3_Init+0x74>)
 8001842:	2208      	movs	r2, #8
 8001844:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001846:	4805      	ldr	r0, [pc, #20]	; (800185c <MX_SPI3_Init+0x74>)
 8001848:	f005 fb6a 	bl	8006f20 <HAL_SPI_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001852:	f000 fa45 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000754 	.word	0x20000754
 8001860:	40003c00 	.word	0x40003c00

08001864 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <MX_USART1_UART_Init+0x58>)
 800186a:	4a15      	ldr	r2, [pc, #84]	; (80018c0 <MX_USART1_UART_Init+0x5c>)
 800186c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800186e:	4b13      	ldr	r3, [pc, #76]	; (80018bc <MX_USART1_UART_Init+0x58>)
 8001870:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001874:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <MX_USART1_UART_Init+0x58>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800187c:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <MX_USART1_UART_Init+0x58>)
 800187e:	2200      	movs	r2, #0
 8001880:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <MX_USART1_UART_Init+0x58>)
 8001884:	2200      	movs	r2, #0
 8001886:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <MX_USART1_UART_Init+0x58>)
 800188a:	220c      	movs	r2, #12
 800188c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800188e:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <MX_USART1_UART_Init+0x58>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <MX_USART1_UART_Init+0x58>)
 8001896:	2200      	movs	r2, #0
 8001898:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800189a:	4b08      	ldr	r3, [pc, #32]	; (80018bc <MX_USART1_UART_Init+0x58>)
 800189c:	2200      	movs	r2, #0
 800189e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <MX_USART1_UART_Init+0x58>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018a6:	4805      	ldr	r0, [pc, #20]	; (80018bc <MX_USART1_UART_Init+0x58>)
 80018a8:	f005 fbdd 	bl	8007066 <HAL_UART_Init>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80018b2:	f000 fa15 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000820 	.word	0x20000820
 80018c0:	40013800 	.word	0x40013800

080018c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018c8:	4b14      	ldr	r3, [pc, #80]	; (800191c <MX_USART3_UART_Init+0x58>)
 80018ca:	4a15      	ldr	r2, [pc, #84]	; (8001920 <MX_USART3_UART_Init+0x5c>)
 80018cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018ce:	4b13      	ldr	r3, [pc, #76]	; (800191c <MX_USART3_UART_Init+0x58>)
 80018d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018d6:	4b11      	ldr	r3, [pc, #68]	; (800191c <MX_USART3_UART_Init+0x58>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018dc:	4b0f      	ldr	r3, [pc, #60]	; (800191c <MX_USART3_UART_Init+0x58>)
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018e2:	4b0e      	ldr	r3, [pc, #56]	; (800191c <MX_USART3_UART_Init+0x58>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <MX_USART3_UART_Init+0x58>)
 80018ea:	220c      	movs	r2, #12
 80018ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <MX_USART3_UART_Init+0x58>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f4:	4b09      	ldr	r3, [pc, #36]	; (800191c <MX_USART3_UART_Init+0x58>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018fa:	4b08      	ldr	r3, [pc, #32]	; (800191c <MX_USART3_UART_Init+0x58>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <MX_USART3_UART_Init+0x58>)
 8001902:	2200      	movs	r2, #0
 8001904:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001906:	4805      	ldr	r0, [pc, #20]	; (800191c <MX_USART3_UART_Init+0x58>)
 8001908:	f005 fbad 	bl	8007066 <HAL_UART_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001912:	f000 f9e5 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000280 	.word	0x20000280
 8001920:	40004800 	.word	0x40004800

08001924 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001928:	4b14      	ldr	r3, [pc, #80]	; (800197c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800192a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800192e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001932:	2206      	movs	r2, #6
 8001934:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001938:	2202      	movs	r2, #2
 800193a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800193c:	4b0f      	ldr	r3, [pc, #60]	; (800197c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800193e:	2202      	movs	r2, #2
 8001940:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001942:	4b0e      	ldr	r3, [pc, #56]	; (800197c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001944:	2200      	movs	r2, #0
 8001946:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001948:	4b0c      	ldr	r3, [pc, #48]	; (800197c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800194a:	2200      	movs	r2, #0
 800194c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001950:	2200      	movs	r2, #0
 8001952:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001954:	4b09      	ldr	r3, [pc, #36]	; (800197c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001956:	2200      	movs	r2, #0
 8001958:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800195a:	4b08      	ldr	r3, [pc, #32]	; (800197c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800195c:	2200      	movs	r2, #0
 800195e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001962:	2200      	movs	r2, #0
 8001964:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001966:	4805      	ldr	r0, [pc, #20]	; (800197c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001968:	f003 fda7 	bl	80054ba <HAL_PCD_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001972:	f000 f9b5 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000300 	.word	0x20000300

08001980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	; 0x28
 8001984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001986:	f107 0314 	add.w	r3, r7, #20
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	60da      	str	r2, [r3, #12]
 8001994:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001996:	4bb0      	ldr	r3, [pc, #704]	; (8001c58 <MX_GPIO_Init+0x2d8>)
 8001998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199a:	4aaf      	ldr	r2, [pc, #700]	; (8001c58 <MX_GPIO_Init+0x2d8>)
 800199c:	f043 0310 	orr.w	r3, r3, #16
 80019a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019a2:	4bad      	ldr	r3, [pc, #692]	; (8001c58 <MX_GPIO_Init+0x2d8>)
 80019a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a6:	f003 0310 	and.w	r3, r3, #16
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ae:	4baa      	ldr	r3, [pc, #680]	; (8001c58 <MX_GPIO_Init+0x2d8>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b2:	4aa9      	ldr	r2, [pc, #676]	; (8001c58 <MX_GPIO_Init+0x2d8>)
 80019b4:	f043 0304 	orr.w	r3, r3, #4
 80019b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ba:	4ba7      	ldr	r3, [pc, #668]	; (8001c58 <MX_GPIO_Init+0x2d8>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c6:	4ba4      	ldr	r3, [pc, #656]	; (8001c58 <MX_GPIO_Init+0x2d8>)
 80019c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ca:	4aa3      	ldr	r2, [pc, #652]	; (8001c58 <MX_GPIO_Init+0x2d8>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019d2:	4ba1      	ldr	r3, [pc, #644]	; (8001c58 <MX_GPIO_Init+0x2d8>)
 80019d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019de:	4b9e      	ldr	r3, [pc, #632]	; (8001c58 <MX_GPIO_Init+0x2d8>)
 80019e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e2:	4a9d      	ldr	r2, [pc, #628]	; (8001c58 <MX_GPIO_Init+0x2d8>)
 80019e4:	f043 0302 	orr.w	r3, r3, #2
 80019e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ea:	4b9b      	ldr	r3, [pc, #620]	; (8001c58 <MX_GPIO_Init+0x2d8>)
 80019ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019f6:	4b98      	ldr	r3, [pc, #608]	; (8001c58 <MX_GPIO_Init+0x2d8>)
 80019f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fa:	4a97      	ldr	r2, [pc, #604]	; (8001c58 <MX_GPIO_Init+0x2d8>)
 80019fc:	f043 0308 	orr.w	r3, r3, #8
 8001a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a02:	4b95      	ldr	r3, [pc, #596]	; (8001c58 <MX_GPIO_Init+0x2d8>)
 8001a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a06:	f003 0308 	and.w	r3, r3, #8
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001a14:	4891      	ldr	r0, [pc, #580]	; (8001c5c <MX_GPIO_Init+0x2dc>)
 8001a16:	f002 ff75 	bl	8004904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, medLED_Pin|Extra_Strength_LED_Pin|VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f240 2152 	movw	r1, #594	; 0x252
 8001a20:	488f      	ldr	r0, [pc, #572]	; (8001c60 <MX_GPIO_Init+0x2e0>)
 8001a22:	f002 ff6f 	bl	8004904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, xlLED_Pin|Auto_Off_LED_Pin|smallLED_Pin|medLEDOLD_Pin
 8001a26:	2200      	movs	r2, #0
 8001a28:	f248 117c 	movw	r1, #33148	; 0x817c
 8001a2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a30:	f002 ff68 	bl	8004904 <HAL_GPIO_WritePin>
                          |largeLED_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Low_Water_LED_Pin|smallButton_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 8001a34:	2200      	movs	r2, #0
 8001a36:	f24f 2106 	movw	r1, #61958	; 0xf206
 8001a3a:	488a      	ldr	r0, [pc, #552]	; (8001c64 <MX_GPIO_Init+0x2e4>)
 8001a3c:	f002 ff62 	bl	8004904 <HAL_GPIO_WritePin>
                          |LED2_Pin|SPSGRF_915_SDN_Pin|medLEDOLD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001a40:	2200      	movs	r2, #0
 8001a42:	f241 0181 	movw	r1, #4225	; 0x1081
 8001a46:	4888      	ldr	r0, [pc, #544]	; (8001c68 <MX_GPIO_Init+0x2e8>)
 8001a48:	f002 ff5c 	bl	8004904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a52:	4885      	ldr	r0, [pc, #532]	; (8001c68 <MX_GPIO_Init+0x2e8>)
 8001a54:	f002 ff56 	bl	8004904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001a58:	2201      	movs	r2, #1
 8001a5a:	2120      	movs	r1, #32
 8001a5c:	4881      	ldr	r0, [pc, #516]	; (8001c64 <MX_GPIO_Init+0x2e4>)
 8001a5e:	f002 ff51 	bl	8004904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001a62:	2201      	movs	r2, #1
 8001a64:	2101      	movs	r1, #1
 8001a66:	487d      	ldr	r0, [pc, #500]	; (8001c5c <MX_GPIO_Init+0x2dc>)
 8001a68:	f002 ff4c 	bl	8004904 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001a6c:	f240 1315 	movw	r3, #277	; 0x115
 8001a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a72:	2301      	movs	r3, #1
 8001a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	4619      	mov	r1, r3
 8001a84:	4875      	ldr	r0, [pc, #468]	; (8001c5c <MX_GPIO_Init+0x2dc>)
 8001a86:	f002 fc89 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001a8a:	236a      	movs	r3, #106	; 0x6a
 8001a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a8e:	4b77      	ldr	r3, [pc, #476]	; (8001c6c <MX_GPIO_Init+0x2ec>)
 8001a90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a96:	f107 0314 	add.w	r3, r7, #20
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	486f      	ldr	r0, [pc, #444]	; (8001c5c <MX_GPIO_Init+0x2dc>)
 8001a9e:	f002 fc7d 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001aa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001aa8:	4b71      	ldr	r3, [pc, #452]	; (8001c70 <MX_GPIO_Init+0x2f0>)
 8001aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	486a      	ldr	r0, [pc, #424]	; (8001c60 <MX_GPIO_Init+0x2e0>)
 8001ab8:	f002 fc70 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pins : medLED_Pin Extra_Strength_LED_Pin VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = medLED_Pin|Extra_Strength_LED_Pin|VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001abc:	f240 2352 	movw	r3, #594	; 0x252
 8001ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aca:	2300      	movs	r3, #0
 8001acc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4862      	ldr	r0, [pc, #392]	; (8001c60 <MX_GPIO_Init+0x2e0>)
 8001ad6:	f002 fc61 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pin : medButton_Pin */
  GPIO_InitStruct.Pin = medButton_Pin;
 8001ada:	2304      	movs	r3, #4
 8001adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(medButton_GPIO_Port, &GPIO_InitStruct);
 8001ae6:	f107 0314 	add.w	r3, r7, #20
 8001aea:	4619      	mov	r1, r3
 8001aec:	485c      	ldr	r0, [pc, #368]	; (8001c60 <MX_GPIO_Init+0x2e0>)
 8001aee:	f002 fc55 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001af2:	2303      	movs	r3, #3
 8001af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afe:	2303      	movs	r3, #3
 8001b00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001b02:	2308      	movs	r3, #8
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b10:	f002 fc44 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pin : xlLED_Pin */
  GPIO_InitStruct.Pin = xlLED_Pin;
 8001b14:	2304      	movs	r3, #4
 8001b16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b20:	2300      	movs	r3, #0
 8001b22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(xlLED_GPIO_Port, &GPIO_InitStruct);
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b2e:	f002 fc35 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pins : Auto_Off_LED_Pin smallLED_Pin medLEDOLD_Pin largeLED_Pin
                           SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = Auto_Off_LED_Pin|smallLED_Pin|medLEDOLD_Pin|largeLED_Pin
 8001b32:	f248 1378 	movw	r3, #33144	; 0x8178
 8001b36:	617b      	str	r3, [r7, #20]
                          |SPBTLE_RF_RST_Pin|ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	2300      	movs	r3, #0
 8001b42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b4e:	f002 fc25 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pin : autoOffBTN_Pin */
  GPIO_InitStruct.Pin = autoOffBTN_Pin;
 8001b52:	2380      	movs	r3, #128	; 0x80
 8001b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(autoOffBTN_GPIO_Port, &GPIO_InitStruct);
 8001b5e:	f107 0314 	add.w	r3, r7, #20
 8001b62:	4619      	mov	r1, r3
 8001b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b68:	f002 fc18 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pins : xlButton_Pin xlButtonOLD2_Pin */
  GPIO_InitStruct.Pin = xlButton_Pin|xlButtonOLD2_Pin;
 8001b6c:	2311      	movs	r3, #17
 8001b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4839      	ldr	r0, [pc, #228]	; (8001c64 <MX_GPIO_Init+0x2e4>)
 8001b80:	f002 fc0c 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pins : Low_Water_LED_Pin smallButton_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin
                           LED2_Pin SPSGRF_915_SDN_Pin SPSGRF_915_SPI3_CSN_Pin medLEDOLD2_Pin */
  GPIO_InitStruct.Pin = Low_Water_LED_Pin|smallButton_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 8001b84:	f24f 2326 	movw	r3, #61990	; 0xf226
 8001b88:	617b      	str	r3, [r7, #20]
                          |LED2_Pin|SPSGRF_915_SDN_Pin|SPSGRF_915_SPI3_CSN_Pin|medLEDOLD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b92:	2300      	movs	r3, #0
 8001b94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4831      	ldr	r0, [pc, #196]	; (8001c64 <MX_GPIO_Init+0x2e4>)
 8001b9e:	f002 fbfd 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin PD14 HTS221_DRDY_EXTI15_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|GPIO_PIN_14|HTS221_DRDY_EXTI15_Pin;
 8001ba2:	f44f 434c 	mov.w	r3, #52224	; 0xcc00
 8001ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ba8:	4b30      	ldr	r3, [pc, #192]	; (8001c6c <MX_GPIO_Init+0x2ec>)
 8001baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	482c      	ldr	r0, [pc, #176]	; (8001c68 <MX_GPIO_Init+0x2e8>)
 8001bb8:	f002 fbf0 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001bbc:	f243 0381 	movw	r3, #12417	; 0x3081
 8001bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4824      	ldr	r0, [pc, #144]	; (8001c68 <MX_GPIO_Init+0x2e8>)
 8001bd6:	f002 fbe1 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001bda:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001be0:	4b22      	ldr	r3, [pc, #136]	; (8001c6c <MX_GPIO_Init+0x2ec>)
 8001be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	4619      	mov	r1, r3
 8001bee:	481c      	ldr	r0, [pc, #112]	; (8001c60 <MX_GPIO_Init+0x2e0>)
 8001bf0:	f002 fbd4 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pins : xlButtonOLD_Pin Extra_Strength_BTN_Pin NA_Pin largeButton_Pin
                           medButtonOLD_Pin smallButtonOLD_Pin */
  GPIO_InitStruct.Pin = xlButtonOLD_Pin|Extra_Strength_BTN_Pin|NA_Pin|largeButton_Pin
 8001bf4:	237e      	movs	r3, #126	; 0x7e
 8001bf6:	617b      	str	r3, [r7, #20]
                          |medButtonOLD_Pin|smallButtonOLD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	4619      	mov	r1, r3
 8001c06:	4818      	ldr	r0, [pc, #96]	; (8001c68 <MX_GPIO_Init+0x2e8>)
 8001c08:	f002 fbc8 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D15_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin;
 8001c0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c12:	2312      	movs	r3, #18
 8001c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c16:	2301      	movs	r3, #1
 8001c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c1e:	2304      	movs	r3, #4
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D15_GPIO_Port, &GPIO_InitStruct);
 8001c22:	f107 0314 	add.w	r3, r7, #20
 8001c26:	4619      	mov	r1, r3
 8001c28:	480e      	ldr	r0, [pc, #56]	; (8001c64 <MX_GPIO_Init+0x2e4>)
 8001c2a:	f002 fbb7 	bl	800439c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2100      	movs	r1, #0
 8001c32:	2017      	movs	r0, #23
 8001c34:	f002 fa6f 	bl	8004116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c38:	2017      	movs	r0, #23
 8001c3a:	f002 fa88 	bl	800414e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2100      	movs	r1, #0
 8001c42:	2028      	movs	r0, #40	; 0x28
 8001c44:	f002 fa67 	bl	8004116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c48:	2028      	movs	r0, #40	; 0x28
 8001c4a:	f002 fa80 	bl	800414e <HAL_NVIC_EnableIRQ>

}
 8001c4e:	bf00      	nop
 8001c50:	3728      	adds	r7, #40	; 0x28
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	48001000 	.word	0x48001000
 8001c60:	48000800 	.word	0x48000800
 8001c64:	48000400 	.word	0x48000400
 8001c68:	48000c00 	.word	0x48000c00
 8001c6c:	10110000 	.word	0x10110000
 8001c70:	10210000 	.word	0x10210000

08001c74 <power_off>:

/* USER CODE BEGIN 4 */

//function to power down the coffee maker
void power_off (int LED2State)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	BSP_LED_Off(LED2);
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	f000 fc1d 	bl	80024bc <BSP_LED_Off>
	LED2State = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	607b      	str	r3, [r7, #4]
	HAL_Delay(1000);
 8001c86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c8a:	f000 fee5 	bl	8002a58 <HAL_Delay>
	HAL_GPIO_WritePin(Extra_Strength_LED_GPIO_Port, Extra_Strength_LED_Pin, 0);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2110      	movs	r1, #16
 8001c92:	4812      	ldr	r0, [pc, #72]	; (8001cdc <power_off+0x68>)
 8001c94:	f002 fe36 	bl	8004904 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(xlLED_GPIO_Port, xlLED_Pin, 0);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2104      	movs	r1, #4
 8001c9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ca0:	f002 fe30 	bl	8004904 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(largeLED_GPIO_Port, largeLED_Pin, 0);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2140      	movs	r1, #64	; 0x40
 8001ca8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cac:	f002 fe2a 	bl	8004904 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(medLED_GPIO_Port, medLED_Pin, 0);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2102      	movs	r1, #2
 8001cb4:	4809      	ldr	r0, [pc, #36]	; (8001cdc <power_off+0x68>)
 8001cb6:	f002 fe25 	bl	8004904 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(smallLED_GPIO_Port, smallLED_Pin, 0);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2110      	movs	r1, #16
 8001cbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc2:	f002 fe1f 	bl	8004904 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Auto_Off_LED_GPIO_Port, Auto_Off_LED_Pin, 0);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2108      	movs	r1, #8
 8001cca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cce:	f002 fe19 	bl	8004904 <HAL_GPIO_WritePin>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	48000800 	.word	0x48000800

08001ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce6:	e7fe      	b.n	8001ce6 <Error_Handler+0x6>

08001ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cee:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <HAL_MspInit+0x44>)
 8001cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf2:	4a0e      	ldr	r2, [pc, #56]	; (8001d2c <HAL_MspInit+0x44>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6613      	str	r3, [r2, #96]	; 0x60
 8001cfa:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <HAL_MspInit+0x44>)
 8001cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <HAL_MspInit+0x44>)
 8001d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0a:	4a08      	ldr	r2, [pc, #32]	; (8001d2c <HAL_MspInit+0x44>)
 8001d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d10:	6593      	str	r3, [r2, #88]	; 0x58
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_MspInit+0x44>)
 8001d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	603b      	str	r3, [r7, #0]
 8001d1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	40021000 	.word	0x40021000

08001d30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	; 0x28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a15      	ldr	r2, [pc, #84]	; (8001da4 <HAL_ADC_MspInit+0x74>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d123      	bne.n	8001d9a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001d52:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <HAL_ADC_MspInit+0x78>)
 8001d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d56:	4a14      	ldr	r2, [pc, #80]	; (8001da8 <HAL_ADC_MspInit+0x78>)
 8001d58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d5e:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <HAL_ADC_MspInit+0x78>)
 8001d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d6a:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <HAL_ADC_MspInit+0x78>)
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6e:	4a0e      	ldr	r2, [pc, #56]	; (8001da8 <HAL_ADC_MspInit+0x78>)
 8001d70:	f043 0304 	orr.w	r3, r3, #4
 8001d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d76:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <HAL_ADC_MspInit+0x78>)
 8001d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC3     ------> ADC1_IN4
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|waterLevelOLD_Pin|waterLevel_Pin;
 8001d82:	2329      	movs	r3, #41	; 0x29
 8001d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001d86:	230b      	movs	r3, #11
 8001d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d8e:	f107 0314 	add.w	r3, r7, #20
 8001d92:	4619      	mov	r1, r3
 8001d94:	4805      	ldr	r0, [pc, #20]	; (8001dac <HAL_ADC_MspInit+0x7c>)
 8001d96:	f002 fb01 	bl	800439c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d9a:	bf00      	nop
 8001d9c:	3728      	adds	r7, #40	; 0x28
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	50040000 	.word	0x50040000
 8001da8:	40021000 	.word	0x40021000
 8001dac:	48000800 	.word	0x48000800

08001db0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	; 0x28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8001dc8:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d12d      	bne.n	8001e2c <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001dd0:	4b19      	ldr	r3, [pc, #100]	; (8001e38 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd4:	4a18      	ldr	r2, [pc, #96]	; (8001e38 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001dd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dda:	6613      	str	r3, [r2, #96]	; 0x60
 8001ddc:	4b16      	ldr	r3, [pc, #88]	; (8001e38 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001de8:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dec:	4a12      	ldr	r2, [pc, #72]	; (8001e38 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001dee:	f043 0310 	orr.w	r3, r3, #16
 8001df2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001df4:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df8:	f003 0310 	and.w	r3, r3, #16
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001e00:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e06:	2302      	movs	r3, #2
 8001e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001e12:	2306      	movs	r3, #6
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e16:	f107 0314 	add.w	r3, r7, #20
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4807      	ldr	r0, [pc, #28]	; (8001e3c <HAL_DFSDM_ChannelMspInit+0x8c>)
 8001e1e:	f002 fabd 	bl	800439c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001e22:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	3301      	adds	r3, #1
 8001e28:	4a02      	ldr	r2, [pc, #8]	; (8001e34 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001e2a:	6013      	str	r3, [r2, #0]
  }

}
 8001e2c:	bf00      	nop
 8001e2e:	3728      	adds	r7, #40	; 0x28
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000210 	.word	0x20000210
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	48001000 	.word	0x48001000

08001e40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08a      	sub	sp, #40	; 0x28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a17      	ldr	r2, [pc, #92]	; (8001ebc <HAL_I2C_MspInit+0x7c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d128      	bne.n	8001eb4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e62:	4b17      	ldr	r3, [pc, #92]	; (8001ec0 <HAL_I2C_MspInit+0x80>)
 8001e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e66:	4a16      	ldr	r2, [pc, #88]	; (8001ec0 <HAL_I2C_MspInit+0x80>)
 8001e68:	f043 0302 	orr.w	r3, r3, #2
 8001e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e6e:	4b14      	ldr	r3, [pc, #80]	; (8001ec0 <HAL_I2C_MspInit+0x80>)
 8001e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001e7a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e80:	2312      	movs	r3, #18
 8001e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e84:	2301      	movs	r3, #1
 8001e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e8c:	2304      	movs	r3, #4
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	4619      	mov	r1, r3
 8001e96:	480b      	ldr	r0, [pc, #44]	; (8001ec4 <HAL_I2C_MspInit+0x84>)
 8001e98:	f002 fa80 	bl	800439c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e9c:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <HAL_I2C_MspInit+0x80>)
 8001e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea0:	4a07      	ldr	r2, [pc, #28]	; (8001ec0 <HAL_I2C_MspInit+0x80>)
 8001ea2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ea6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <HAL_I2C_MspInit+0x80>)
 8001eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001eb4:	bf00      	nop
 8001eb6:	3728      	adds	r7, #40	; 0x28
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40005800 	.word	0x40005800
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	48000400 	.word	0x48000400

08001ec8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0b      	ldr	r2, [pc, #44]	; (8001f04 <HAL_I2C_MspDeInit+0x3c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d10f      	bne.n	8001efa <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001eda:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <HAL_I2C_MspDeInit+0x40>)
 8001edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ede:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <HAL_I2C_MspDeInit+0x40>)
 8001ee0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001ee4:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001ee6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eea:	4808      	ldr	r0, [pc, #32]	; (8001f0c <HAL_I2C_MspDeInit+0x44>)
 8001eec:	f002 fbfe 	bl	80046ec <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001ef0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ef4:	4805      	ldr	r0, [pc, #20]	; (8001f0c <HAL_I2C_MspDeInit+0x44>)
 8001ef6:	f002 fbf9 	bl	80046ec <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40005800 	.word	0x40005800
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	48000400 	.word	0x48000400

08001f10 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08a      	sub	sp, #40	; 0x28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a17      	ldr	r2, [pc, #92]	; (8001f8c <HAL_QSPI_MspInit+0x7c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d128      	bne.n	8001f84 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001f32:	4b17      	ldr	r3, [pc, #92]	; (8001f90 <HAL_QSPI_MspInit+0x80>)
 8001f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f36:	4a16      	ldr	r2, [pc, #88]	; (8001f90 <HAL_QSPI_MspInit+0x80>)
 8001f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f3c:	6513      	str	r3, [r2, #80]	; 0x50
 8001f3e:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <HAL_QSPI_MspInit+0x80>)
 8001f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f4a:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <HAL_QSPI_MspInit+0x80>)
 8001f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4e:	4a10      	ldr	r2, [pc, #64]	; (8001f90 <HAL_QSPI_MspInit+0x80>)
 8001f50:	f043 0310 	orr.w	r3, r3, #16
 8001f54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f56:	4b0e      	ldr	r3, [pc, #56]	; (8001f90 <HAL_QSPI_MspInit+0x80>)
 8001f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5a:	f003 0310 	and.w	r3, r3, #16
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001f62:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001f66:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f70:	2303      	movs	r3, #3
 8001f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f74:	230a      	movs	r3, #10
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4805      	ldr	r0, [pc, #20]	; (8001f94 <HAL_QSPI_MspInit+0x84>)
 8001f80:	f002 fa0c 	bl	800439c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001f84:	bf00      	nop
 8001f86:	3728      	adds	r7, #40	; 0x28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	a0001000 	.word	0xa0001000
 8001f90:	40021000 	.word	0x40021000
 8001f94:	48001000 	.word	0x48001000

08001f98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08a      	sub	sp, #40	; 0x28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f107 0314 	add.w	r3, r7, #20
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a17      	ldr	r2, [pc, #92]	; (8002014 <HAL_SPI_MspInit+0x7c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d128      	bne.n	800200c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001fba:	4b17      	ldr	r3, [pc, #92]	; (8002018 <HAL_SPI_MspInit+0x80>)
 8001fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbe:	4a16      	ldr	r2, [pc, #88]	; (8002018 <HAL_SPI_MspInit+0x80>)
 8001fc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fc4:	6593      	str	r3, [r2, #88]	; 0x58
 8001fc6:	4b14      	ldr	r3, [pc, #80]	; (8002018 <HAL_SPI_MspInit+0x80>)
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd2:	4b11      	ldr	r3, [pc, #68]	; (8002018 <HAL_SPI_MspInit+0x80>)
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd6:	4a10      	ldr	r2, [pc, #64]	; (8002018 <HAL_SPI_MspInit+0x80>)
 8001fd8:	f043 0304 	orr.w	r3, r3, #4
 8001fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fde:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <HAL_SPI_MspInit+0x80>)
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001fea:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ffc:	2306      	movs	r3, #6
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002000:	f107 0314 	add.w	r3, r7, #20
 8002004:	4619      	mov	r1, r3
 8002006:	4805      	ldr	r0, [pc, #20]	; (800201c <HAL_SPI_MspInit+0x84>)
 8002008:	f002 f9c8 	bl	800439c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800200c:	bf00      	nop
 800200e:	3728      	adds	r7, #40	; 0x28
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40003c00 	.word	0x40003c00
 8002018:	40021000 	.word	0x40021000
 800201c:	48000800 	.word	0x48000800

08002020 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08c      	sub	sp, #48	; 0x30
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002028:	f107 031c 	add.w	r3, r7, #28
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a2e      	ldr	r2, [pc, #184]	; (80020f8 <HAL_UART_MspInit+0xd8>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d128      	bne.n	8002094 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002042:	4b2e      	ldr	r3, [pc, #184]	; (80020fc <HAL_UART_MspInit+0xdc>)
 8002044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002046:	4a2d      	ldr	r2, [pc, #180]	; (80020fc <HAL_UART_MspInit+0xdc>)
 8002048:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800204c:	6613      	str	r3, [r2, #96]	; 0x60
 800204e:	4b2b      	ldr	r3, [pc, #172]	; (80020fc <HAL_UART_MspInit+0xdc>)
 8002050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002056:	61bb      	str	r3, [r7, #24]
 8002058:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800205a:	4b28      	ldr	r3, [pc, #160]	; (80020fc <HAL_UART_MspInit+0xdc>)
 800205c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205e:	4a27      	ldr	r2, [pc, #156]	; (80020fc <HAL_UART_MspInit+0xdc>)
 8002060:	f043 0302 	orr.w	r3, r3, #2
 8002064:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002066:	4b25      	ldr	r3, [pc, #148]	; (80020fc <HAL_UART_MspInit+0xdc>)
 8002068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002072:	23c0      	movs	r3, #192	; 0xc0
 8002074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002076:	2302      	movs	r3, #2
 8002078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800207e:	2303      	movs	r3, #3
 8002080:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002082:	2307      	movs	r3, #7
 8002084:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002086:	f107 031c 	add.w	r3, r7, #28
 800208a:	4619      	mov	r1, r3
 800208c:	481c      	ldr	r0, [pc, #112]	; (8002100 <HAL_UART_MspInit+0xe0>)
 800208e:	f002 f985 	bl	800439c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002092:	e02d      	b.n	80020f0 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a1a      	ldr	r2, [pc, #104]	; (8002104 <HAL_UART_MspInit+0xe4>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d128      	bne.n	80020f0 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800209e:	4b17      	ldr	r3, [pc, #92]	; (80020fc <HAL_UART_MspInit+0xdc>)
 80020a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a2:	4a16      	ldr	r2, [pc, #88]	; (80020fc <HAL_UART_MspInit+0xdc>)
 80020a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020a8:	6593      	str	r3, [r2, #88]	; 0x58
 80020aa:	4b14      	ldr	r3, [pc, #80]	; (80020fc <HAL_UART_MspInit+0xdc>)
 80020ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020b6:	4b11      	ldr	r3, [pc, #68]	; (80020fc <HAL_UART_MspInit+0xdc>)
 80020b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ba:	4a10      	ldr	r2, [pc, #64]	; (80020fc <HAL_UART_MspInit+0xdc>)
 80020bc:	f043 0308 	orr.w	r3, r3, #8
 80020c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020c2:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <HAL_UART_MspInit+0xdc>)
 80020c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80020ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d4:	2302      	movs	r3, #2
 80020d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020dc:	2303      	movs	r3, #3
 80020de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020e0:	2307      	movs	r3, #7
 80020e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020e4:	f107 031c 	add.w	r3, r7, #28
 80020e8:	4619      	mov	r1, r3
 80020ea:	4807      	ldr	r0, [pc, #28]	; (8002108 <HAL_UART_MspInit+0xe8>)
 80020ec:	f002 f956 	bl	800439c <HAL_GPIO_Init>
}
 80020f0:	bf00      	nop
 80020f2:	3730      	adds	r7, #48	; 0x30
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40013800 	.word	0x40013800
 80020fc:	40021000 	.word	0x40021000
 8002100:	48000400 	.word	0x48000400
 8002104:	40004800 	.word	0x40004800
 8002108:	48000c00 	.word	0x48000c00

0800210c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	; 0x28
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800212c:	d154      	bne.n	80021d8 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800212e:	4b2c      	ldr	r3, [pc, #176]	; (80021e0 <HAL_PCD_MspInit+0xd4>)
 8002130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002132:	4a2b      	ldr	r2, [pc, #172]	; (80021e0 <HAL_PCD_MspInit+0xd4>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800213a:	4b29      	ldr	r3, [pc, #164]	; (80021e0 <HAL_PCD_MspInit+0xd4>)
 800213c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002146:	f44f 7300 	mov.w	r3, #512	; 0x200
 800214a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800214c:	2300      	movs	r3, #0
 800214e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002154:	f107 0314 	add.w	r3, r7, #20
 8002158:	4619      	mov	r1, r3
 800215a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800215e:	f002 f91d 	bl	800439c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002162:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002168:	2302      	movs	r3, #2
 800216a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002170:	2303      	movs	r3, #3
 8002172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002174:	230a      	movs	r3, #10
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002178:	f107 0314 	add.w	r3, r7, #20
 800217c:	4619      	mov	r1, r3
 800217e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002182:	f002 f90b 	bl	800439c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002186:	4b16      	ldr	r3, [pc, #88]	; (80021e0 <HAL_PCD_MspInit+0xd4>)
 8002188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218a:	4a15      	ldr	r2, [pc, #84]	; (80021e0 <HAL_PCD_MspInit+0xd4>)
 800218c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002190:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_PCD_MspInit+0xd4>)
 8002194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002196:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800219e:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <HAL_PCD_MspInit+0xd4>)
 80021a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d114      	bne.n	80021d4 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021aa:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <HAL_PCD_MspInit+0xd4>)
 80021ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ae:	4a0c      	ldr	r2, [pc, #48]	; (80021e0 <HAL_PCD_MspInit+0xd4>)
 80021b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b4:	6593      	str	r3, [r2, #88]	; 0x58
 80021b6:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <HAL_PCD_MspInit+0xd4>)
 80021b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021be:	60bb      	str	r3, [r7, #8]
 80021c0:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80021c2:	f003 fb37 	bl	8005834 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c6:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <HAL_PCD_MspInit+0xd4>)
 80021c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ca:	4a05      	ldr	r2, [pc, #20]	; (80021e0 <HAL_PCD_MspInit+0xd4>)
 80021cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d0:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80021d2:	e001      	b.n	80021d8 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 80021d4:	f003 fb2e 	bl	8005834 <HAL_PWREx_EnableVddUSB>
}
 80021d8:	bf00      	nop
 80021da:	3728      	adds	r7, #40	; 0x28
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40021000 	.word	0x40021000

080021e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021e8:	e7fe      	b.n	80021e8 <NMI_Handler+0x4>

080021ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ee:	e7fe      	b.n	80021ee <HardFault_Handler+0x4>

080021f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021f4:	e7fe      	b.n	80021f4 <MemManage_Handler+0x4>

080021f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021fa:	e7fe      	b.n	80021fa <BusFault_Handler+0x4>

080021fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002200:	e7fe      	b.n	8002200 <UsageFault_Handler+0x4>

08002202 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002230:	f000 fbf2 	bl	8002a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002234:	bf00      	nop
 8002236:	bd80      	pop	{r7, pc}

08002238 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800223c:	2020      	movs	r0, #32
 800223e:	f002 fb79 	bl	8004934 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002242:	2040      	movs	r0, #64	; 0x40
 8002244:	f002 fb76 	bl	8004934 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002248:	2080      	movs	r0, #128	; 0x80
 800224a:	f002 fb73 	bl	8004934 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800224e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002252:	f002 fb6f 	bl	8004934 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}

0800225a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800225e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002262:	f002 fb67 	bl	8004934 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002266:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800226a:	f002 fb63 	bl	8004934 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800226e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002272:	f002 fb5f 	bl	8004934 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002276:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800227a:	f002 fb5b 	bl	8004934 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800227e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002282:	f002 fb57 	bl	8004934 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}

0800228a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b086      	sub	sp, #24
 800228e:	af00      	add	r7, sp, #0
 8002290:	60f8      	str	r0, [r7, #12]
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
 800229a:	e00a      	b.n	80022b2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800229c:	f3af 8000 	nop.w
 80022a0:	4601      	mov	r1, r0
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	1c5a      	adds	r2, r3, #1
 80022a6:	60ba      	str	r2, [r7, #8]
 80022a8:	b2ca      	uxtb	r2, r1
 80022aa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	3301      	adds	r3, #1
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	dbf0      	blt.n	800229c <_read+0x12>
	}

return len;
 80022ba:	687b      	ldr	r3, [r7, #4]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	e009      	b.n	80022ea <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	60ba      	str	r2, [r7, #8]
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	3301      	adds	r3, #1
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	dbf1      	blt.n	80022d6 <_write+0x12>
	}
	return len;
 80022f2:	687b      	ldr	r3, [r7, #4]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <_close>:

int _close(int file)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
	return -1;
 8002304:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002324:	605a      	str	r2, [r3, #4]
	return 0;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <_isatty>:

int _isatty(int file)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
	return 1;
 800233c:	2301      	movs	r3, #1
}
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800234a:	b480      	push	{r7}
 800234c:	b085      	sub	sp, #20
 800234e:	af00      	add	r7, sp, #0
 8002350:	60f8      	str	r0, [r7, #12]
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
	return 0;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800236c:	4a14      	ldr	r2, [pc, #80]	; (80023c0 <_sbrk+0x5c>)
 800236e:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <_sbrk+0x60>)
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002378:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <_sbrk+0x64>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d102      	bne.n	8002386 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002380:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <_sbrk+0x64>)
 8002382:	4a12      	ldr	r2, [pc, #72]	; (80023cc <_sbrk+0x68>)
 8002384:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002386:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <_sbrk+0x64>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	429a      	cmp	r2, r3
 8002392:	d207      	bcs.n	80023a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002394:	f005 fdc4 	bl	8007f20 <__errno>
 8002398:	4602      	mov	r2, r0
 800239a:	230c      	movs	r3, #12
 800239c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800239e:	f04f 33ff 	mov.w	r3, #4294967295
 80023a2:	e009      	b.n	80023b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023a4:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <_sbrk+0x64>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023aa:	4b07      	ldr	r3, [pc, #28]	; (80023c8 <_sbrk+0x64>)
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4413      	add	r3, r2
 80023b2:	4a05      	ldr	r2, [pc, #20]	; (80023c8 <_sbrk+0x64>)
 80023b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023b6:	68fb      	ldr	r3, [r7, #12]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20018000 	.word	0x20018000
 80023c4:	00000400 	.word	0x00000400
 80023c8:	20000214 	.word	0x20000214
 80023cc:	200009b8 	.word	0x200009b8

080023d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023d4:	4b17      	ldr	r3, [pc, #92]	; (8002434 <SystemInit+0x64>)
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023da:	4a16      	ldr	r2, [pc, #88]	; (8002434 <SystemInit+0x64>)
 80023dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80023e4:	4b14      	ldr	r3, [pc, #80]	; (8002438 <SystemInit+0x68>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a13      	ldr	r2, [pc, #76]	; (8002438 <SystemInit+0x68>)
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80023f0:	4b11      	ldr	r3, [pc, #68]	; (8002438 <SystemInit+0x68>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80023f6:	4b10      	ldr	r3, [pc, #64]	; (8002438 <SystemInit+0x68>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a0f      	ldr	r2, [pc, #60]	; (8002438 <SystemInit+0x68>)
 80023fc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002400:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002404:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002406:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <SystemInit+0x68>)
 8002408:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800240c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <SystemInit+0x68>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a09      	ldr	r2, [pc, #36]	; (8002438 <SystemInit+0x68>)
 8002414:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002418:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800241a:	4b07      	ldr	r3, [pc, #28]	; (8002438 <SystemInit+0x68>)
 800241c:	2200      	movs	r2, #0
 800241e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002420:	4b04      	ldr	r3, [pc, #16]	; (8002434 <SystemInit+0x64>)
 8002422:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002426:	609a      	str	r2, [r3, #8]
#endif
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	e000ed00 	.word	0xe000ed00
 8002438:	40021000 	.word	0x40021000

0800243c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800243c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002474 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002440:	f7ff ffc6 	bl	80023d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002444:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002446:	e003      	b.n	8002450 <LoopCopyDataInit>

08002448 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800244a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800244c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800244e:	3104      	adds	r1, #4

08002450 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002450:	480a      	ldr	r0, [pc, #40]	; (800247c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002452:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002454:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002456:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002458:	d3f6      	bcc.n	8002448 <CopyDataInit>
	ldr	r2, =_sbss
 800245a:	4a0a      	ldr	r2, [pc, #40]	; (8002484 <LoopForever+0x12>)
	b	LoopFillZerobss
 800245c:	e002      	b.n	8002464 <LoopFillZerobss>

0800245e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800245e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002460:	f842 3b04 	str.w	r3, [r2], #4

08002464 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002464:	4b08      	ldr	r3, [pc, #32]	; (8002488 <LoopForever+0x16>)
	cmp	r2, r3
 8002466:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002468:	d3f9      	bcc.n	800245e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800246a:	f005 fd5f 	bl	8007f2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800246e:	f7fe fd8b 	bl	8000f88 <main>

08002472 <LoopForever>:

LoopForever:
    b LoopForever
 8002472:	e7fe      	b.n	8002472 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002474:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002478:	0800c740 	.word	0x0800c740
	ldr	r0, =_sdata
 800247c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002480:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 8002484:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 8002488:	200009b8 	.word	0x200009b8

0800248c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800248c:	e7fe      	b.n	800248c <ADC1_2_IRQHandler>
	...

08002490 <BSP_LED_On>:
  * @param  Led  LED to be set on 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	4a06      	ldr	r2, [pc, #24]	; (80024b8 <BSP_LED_On+0x28>)
 800249e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024a6:	b291      	uxth	r1, r2
 80024a8:	2201      	movs	r2, #1
 80024aa:	4618      	mov	r0, r3
 80024ac:	f002 fa2a 	bl	8004904 <HAL_GPIO_WritePin>
}
 80024b0:	bf00      	nop
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20000004 	.word	0x20000004

080024bc <BSP_LED_Off>:
  * @param  Led  LED to be set off
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80024c6:	79fb      	ldrb	r3, [r7, #7]
 80024c8:	4a06      	ldr	r2, [pc, #24]	; (80024e4 <BSP_LED_Off+0x28>)
 80024ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024d2:	b291      	uxth	r1, r2
 80024d4:	2200      	movs	r2, #0
 80024d6:	4618      	mov	r0, r3
 80024d8:	f002 fa14 	bl	8004904 <HAL_GPIO_WritePin>
}
 80024dc:	bf00      	nop
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20000004 	.word	0x20000004

080024e8 <BSP_PB_GetState>:
  *                 This parameter can be one of the following values:
  *                   @arg  BUTTON_USER  User Push Button 
  * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	4a06      	ldr	r2, [pc, #24]	; (8002510 <BSP_PB_GetState+0x28>)
 80024f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024fe:	4611      	mov	r1, r2
 8002500:	4618      	mov	r0, r3
 8002502:	f002 f9e7 	bl	80048d4 <HAL_GPIO_ReadPin>
 8002506:	4603      	mov	r3, r0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000008 	.word	0x20000008

08002514 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08a      	sub	sp, #40	; 0x28
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800251c:	4b27      	ldr	r3, [pc, #156]	; (80025bc <I2Cx_MspInit+0xa8>)
 800251e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002520:	4a26      	ldr	r2, [pc, #152]	; (80025bc <I2Cx_MspInit+0xa8>)
 8002522:	f043 0302 	orr.w	r3, r3, #2
 8002526:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002528:	4b24      	ldr	r3, [pc, #144]	; (80025bc <I2Cx_MspInit+0xa8>)
 800252a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002534:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002538:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800253a:	2312      	movs	r3, #18
 800253c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800253e:	2301      	movs	r3, #1
 8002540:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002542:	2303      	movs	r3, #3
 8002544:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002546:	2304      	movs	r3, #4
 8002548:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800254a:	f107 0314 	add.w	r3, r7, #20
 800254e:	4619      	mov	r1, r3
 8002550:	481b      	ldr	r0, [pc, #108]	; (80025c0 <I2Cx_MspInit+0xac>)
 8002552:	f001 ff23 	bl	800439c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002556:	f107 0314 	add.w	r3, r7, #20
 800255a:	4619      	mov	r1, r3
 800255c:	4818      	ldr	r0, [pc, #96]	; (80025c0 <I2Cx_MspInit+0xac>)
 800255e:	f001 ff1d 	bl	800439c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002562:	4b16      	ldr	r3, [pc, #88]	; (80025bc <I2Cx_MspInit+0xa8>)
 8002564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002566:	4a15      	ldr	r2, [pc, #84]	; (80025bc <I2Cx_MspInit+0xa8>)
 8002568:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800256c:	6593      	str	r3, [r2, #88]	; 0x58
 800256e:	4b13      	ldr	r3, [pc, #76]	; (80025bc <I2Cx_MspInit+0xa8>)
 8002570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800257a:	4b10      	ldr	r3, [pc, #64]	; (80025bc <I2Cx_MspInit+0xa8>)
 800257c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257e:	4a0f      	ldr	r2, [pc, #60]	; (80025bc <I2Cx_MspInit+0xa8>)
 8002580:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002584:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002586:	4b0d      	ldr	r3, [pc, #52]	; (80025bc <I2Cx_MspInit+0xa8>)
 8002588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800258a:	4a0c      	ldr	r2, [pc, #48]	; (80025bc <I2Cx_MspInit+0xa8>)
 800258c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002590:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002592:	2200      	movs	r2, #0
 8002594:	210f      	movs	r1, #15
 8002596:	2021      	movs	r0, #33	; 0x21
 8002598:	f001 fdbd 	bl	8004116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800259c:	2021      	movs	r0, #33	; 0x21
 800259e:	f001 fdd6 	bl	800414e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80025a2:	2200      	movs	r2, #0
 80025a4:	210f      	movs	r1, #15
 80025a6:	2022      	movs	r0, #34	; 0x22
 80025a8:	f001 fdb5 	bl	8004116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80025ac:	2022      	movs	r0, #34	; 0x22
 80025ae:	f001 fdce 	bl	800414e <HAL_NVIC_EnableIRQ>
}
 80025b2:	bf00      	nop
 80025b4:	3728      	adds	r7, #40	; 0x28
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40021000 	.word	0x40021000
 80025c0:	48000400 	.word	0x48000400

080025c4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a12      	ldr	r2, [pc, #72]	; (8002618 <I2Cx_Init+0x54>)
 80025d0:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a11      	ldr	r2, [pc, #68]	; (800261c <I2Cx_Init+0x58>)
 80025d6:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff ff89 	bl	8002514 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f002 f9b9 	bl	800497a <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002608:	2100      	movs	r1, #0
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f002 febe 	bl	800538c <HAL_I2CEx_ConfigAnalogFilter>
}
 8002610:	bf00      	nop
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40005800 	.word	0x40005800
 800261c:	00702681 	.word	0x00702681

08002620 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b08a      	sub	sp, #40	; 0x28
 8002624:	af04      	add	r7, sp, #16
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	4608      	mov	r0, r1
 800262a:	4611      	mov	r1, r2
 800262c:	461a      	mov	r2, r3
 800262e:	4603      	mov	r3, r0
 8002630:	72fb      	strb	r3, [r7, #11]
 8002632:	460b      	mov	r3, r1
 8002634:	813b      	strh	r3, [r7, #8]
 8002636:	4613      	mov	r3, r2
 8002638:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800263a:	2300      	movs	r3, #0
 800263c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800263e:	7afb      	ldrb	r3, [r7, #11]
 8002640:	b299      	uxth	r1, r3
 8002642:	88f8      	ldrh	r0, [r7, #6]
 8002644:	893a      	ldrh	r2, [r7, #8]
 8002646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800264a:	9302      	str	r3, [sp, #8]
 800264c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800264e:	9301      	str	r3, [sp, #4]
 8002650:	6a3b      	ldr	r3, [r7, #32]
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	4603      	mov	r3, r0
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f002 fb62 	bl	8004d20 <HAL_I2C_Mem_Read>
 800265c:	4603      	mov	r3, r0
 800265e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002660:	7dfb      	ldrb	r3, [r7, #23]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d004      	beq.n	8002670 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8002666:	7afb      	ldrb	r3, [r7, #11]
 8002668:	4619      	mov	r1, r3
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 f832 	bl	80026d4 <I2Cx_Error>
  }
  return status;
 8002670:	7dfb      	ldrb	r3, [r7, #23]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b08a      	sub	sp, #40	; 0x28
 800267e:	af04      	add	r7, sp, #16
 8002680:	60f8      	str	r0, [r7, #12]
 8002682:	4608      	mov	r0, r1
 8002684:	4611      	mov	r1, r2
 8002686:	461a      	mov	r2, r3
 8002688:	4603      	mov	r3, r0
 800268a:	72fb      	strb	r3, [r7, #11]
 800268c:	460b      	mov	r3, r1
 800268e:	813b      	strh	r3, [r7, #8]
 8002690:	4613      	mov	r3, r2
 8002692:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002694:	2300      	movs	r3, #0
 8002696:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002698:	7afb      	ldrb	r3, [r7, #11]
 800269a:	b299      	uxth	r1, r3
 800269c:	88f8      	ldrh	r0, [r7, #6]
 800269e:	893a      	ldrh	r2, [r7, #8]
 80026a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026a4:	9302      	str	r3, [sp, #8]
 80026a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026a8:	9301      	str	r3, [sp, #4]
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	4603      	mov	r3, r0
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f002 fa21 	bl	8004af8 <HAL_I2C_Mem_Write>
 80026b6:	4603      	mov	r3, r0
 80026b8:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80026ba:	7dfb      	ldrb	r3, [r7, #23]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d004      	beq.n	80026ca <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80026c0:	7afb      	ldrb	r3, [r7, #11]
 80026c2:	4619      	mov	r1, r3
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 f805 	bl	80026d4 <I2Cx_Error>
  }
  return status;
 80026ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	460b      	mov	r3, r1
 80026de:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f002 f9d9 	bl	8004a98 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff ff6c 	bl	80025c4 <I2Cx_Init>
}
 80026ec:	bf00      	nop
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80026f8:	4802      	ldr	r0, [pc, #8]	; (8002704 <SENSOR_IO_Init+0x10>)
 80026fa:	f7ff ff63 	bl	80025c4 <I2Cx_Init>
}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20000964 	.word	0x20000964

08002708 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af02      	add	r7, sp, #8
 800270e:	4603      	mov	r3, r0
 8002710:	71fb      	strb	r3, [r7, #7]
 8002712:	460b      	mov	r3, r1
 8002714:	71bb      	strb	r3, [r7, #6]
 8002716:	4613      	mov	r3, r2
 8002718:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800271a:	79bb      	ldrb	r3, [r7, #6]
 800271c:	b29a      	uxth	r2, r3
 800271e:	79f9      	ldrb	r1, [r7, #7]
 8002720:	2301      	movs	r3, #1
 8002722:	9301      	str	r3, [sp, #4]
 8002724:	1d7b      	adds	r3, r7, #5
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	2301      	movs	r3, #1
 800272a:	4803      	ldr	r0, [pc, #12]	; (8002738 <SENSOR_IO_Write+0x30>)
 800272c:	f7ff ffa5 	bl	800267a <I2Cx_WriteMultiple>
}
 8002730:	bf00      	nop
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	20000964 	.word	0x20000964

0800273c <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af02      	add	r7, sp, #8
 8002742:	4603      	mov	r3, r0
 8002744:	460a      	mov	r2, r1
 8002746:	71fb      	strb	r3, [r7, #7]
 8002748:	4613      	mov	r3, r2
 800274a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800274c:	2300      	movs	r3, #0
 800274e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002750:	79bb      	ldrb	r3, [r7, #6]
 8002752:	b29a      	uxth	r2, r3
 8002754:	79f9      	ldrb	r1, [r7, #7]
 8002756:	2301      	movs	r3, #1
 8002758:	9301      	str	r3, [sp, #4]
 800275a:	f107 030f 	add.w	r3, r7, #15
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	2301      	movs	r3, #1
 8002762:	4804      	ldr	r0, [pc, #16]	; (8002774 <SENSOR_IO_Read+0x38>)
 8002764:	f7ff ff5c 	bl	8002620 <I2Cx_ReadMultiple>

  return read_value;
 8002768:	7bfb      	ldrb	r3, [r7, #15]
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20000964 	.word	0x20000964

08002778 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af02      	add	r7, sp, #8
 800277e:	603a      	str	r2, [r7, #0]
 8002780:	461a      	mov	r2, r3
 8002782:	4603      	mov	r3, r0
 8002784:	71fb      	strb	r3, [r7, #7]
 8002786:	460b      	mov	r3, r1
 8002788:	71bb      	strb	r3, [r7, #6]
 800278a:	4613      	mov	r3, r2
 800278c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800278e:	79bb      	ldrb	r3, [r7, #6]
 8002790:	b29a      	uxth	r2, r3
 8002792:	79f9      	ldrb	r1, [r7, #7]
 8002794:	88bb      	ldrh	r3, [r7, #4]
 8002796:	9301      	str	r3, [sp, #4]
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	2301      	movs	r3, #1
 800279e:	4804      	ldr	r0, [pc, #16]	; (80027b0 <SENSOR_IO_ReadMultiple+0x38>)
 80027a0:	f7ff ff3e 	bl	8002620 <I2Cx_ReadMultiple>
 80027a4:	4603      	mov	r3, r0
 80027a6:	b29b      	uxth	r3, r3
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	20000964 	.word	0x20000964

080027b4 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80027be:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <BSP_TSENSOR_Init+0x30>)
 80027c0:	4a09      	ldr	r2, [pc, #36]	; (80027e8 <BSP_TSENSOR_Init+0x34>)
 80027c2:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80027c4:	f7ff ff96 	bl	80026f4 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <BSP_TSENSOR_Init+0x30>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2100      	movs	r1, #0
 80027d0:	20be      	movs	r0, #190	; 0xbe
 80027d2:	4798      	blx	r3

  ret = TSENSOR_OK;
 80027d4:	2300      	movs	r3, #0
 80027d6:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80027d8:	79fb      	ldrb	r3, [r7, #7]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	20000218 	.word	0x20000218
 80027e8:	2000000c 	.word	0x2000000c

080027ec <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80027f0:	4b04      	ldr	r3, [pc, #16]	; (8002804 <BSP_TSENSOR_ReadTemp+0x18>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	20be      	movs	r0, #190	; 0xbe
 80027f8:	4798      	blx	r3
 80027fa:	eef0 7a40 	vmov.f32	s15, s0
}
 80027fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002802:	bd80      	pop	{r7, pc}
 8002804:	20000218 	.word	0x20000218

08002808 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	6039      	str	r1, [r7, #0]
 8002812:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002814:	88fb      	ldrh	r3, [r7, #6]
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2120      	movs	r1, #32
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff ff8e 	bl	800273c <SENSOR_IO_Read>
 8002820:	4603      	mov	r3, r0
 8002822:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	f023 0304 	bic.w	r3, r3, #4
 800282a:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	f043 0304 	orr.w	r3, r3, #4
 8002832:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002834:	7bfb      	ldrb	r3, [r7, #15]
 8002836:	f023 0303 	bic.w	r3, r3, #3
 800283a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800283c:	7bfb      	ldrb	r3, [r7, #15]
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800284a:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800284c:	88fb      	ldrh	r3, [r7, #6]
 800284e:	b2db      	uxtb	r3, r3
 8002850:	7bfa      	ldrb	r2, [r7, #15]
 8002852:	2120      	movs	r1, #32
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff ff57 	bl	8002708 <SENSOR_IO_Write>
}
 800285a:	bf00      	nop
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b088      	sub	sp, #32
 8002866:	af00      	add	r7, sp, #0
 8002868:	4603      	mov	r3, r0
 800286a:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 800286c:	88fb      	ldrh	r3, [r7, #6]
 800286e:	b2d8      	uxtb	r0, r3
 8002870:	f107 0208 	add.w	r2, r7, #8
 8002874:	2302      	movs	r3, #2
 8002876:	21b2      	movs	r1, #178	; 0xb2
 8002878:	f7ff ff7e 	bl	8002778 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 800287c:	88fb      	ldrh	r3, [r7, #6]
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2135      	movs	r1, #53	; 0x35
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff ff5a 	bl	800273c <SENSOR_IO_Read>
 8002888:	4603      	mov	r3, r0
 800288a:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 800288c:	7ffb      	ldrb	r3, [r7, #31]
 800288e:	021b      	lsls	r3, r3, #8
 8002890:	b21b      	sxth	r3, r3
 8002892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002896:	b21a      	sxth	r2, r3
 8002898:	7a3b      	ldrb	r3, [r7, #8]
 800289a:	b21b      	sxth	r3, r3
 800289c:	4313      	orrs	r3, r2
 800289e:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80028a0:	7ffb      	ldrb	r3, [r7, #31]
 80028a2:	019b      	lsls	r3, r3, #6
 80028a4:	b21b      	sxth	r3, r3
 80028a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028aa:	b21a      	sxth	r2, r3
 80028ac:	7a7b      	ldrb	r3, [r7, #9]
 80028ae:	b21b      	sxth	r3, r3
 80028b0:	4313      	orrs	r3, r2
 80028b2:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80028b4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80028b8:	10db      	asrs	r3, r3, #3
 80028ba:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 80028bc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80028c0:	10db      	asrs	r3, r3, #3
 80028c2:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80028c4:	88fb      	ldrh	r3, [r7, #6]
 80028c6:	b2d8      	uxtb	r0, r3
 80028c8:	f107 0208 	add.w	r2, r7, #8
 80028cc:	2304      	movs	r3, #4
 80028ce:	21bc      	movs	r1, #188	; 0xbc
 80028d0:	f7ff ff52 	bl	8002778 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80028d4:	7a7b      	ldrb	r3, [r7, #9]
 80028d6:	021b      	lsls	r3, r3, #8
 80028d8:	b21a      	sxth	r2, r3
 80028da:	7a3b      	ldrb	r3, [r7, #8]
 80028dc:	b21b      	sxth	r3, r3
 80028de:	4313      	orrs	r3, r2
 80028e0:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80028e2:	7afb      	ldrb	r3, [r7, #11]
 80028e4:	021b      	lsls	r3, r3, #8
 80028e6:	b21a      	sxth	r2, r3
 80028e8:	7abb      	ldrb	r3, [r7, #10]
 80028ea:	b21b      	sxth	r3, r3
 80028ec:	4313      	orrs	r3, r2
 80028ee:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80028f0:	88fb      	ldrh	r3, [r7, #6]
 80028f2:	b2d8      	uxtb	r0, r3
 80028f4:	f107 0208 	add.w	r2, r7, #8
 80028f8:	2302      	movs	r3, #2
 80028fa:	21aa      	movs	r1, #170	; 0xaa
 80028fc:	f7ff ff3c 	bl	8002778 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002900:	7a7b      	ldrb	r3, [r7, #9]
 8002902:	021b      	lsls	r3, r3, #8
 8002904:	b21a      	sxth	r2, r3
 8002906:	7a3b      	ldrb	r3, [r7, #8]
 8002908:	b21b      	sxth	r3, r3
 800290a:	4313      	orrs	r3, r2
 800290c:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800290e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002912:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	ee07 3a90 	vmov	s15, r3
 800291c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002920:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002924:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	ee07 3a90 	vmov	s15, r3
 800292e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002932:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002936:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800293a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	ee07 3a90 	vmov	s15, r3
 8002944:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002948:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800294c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002950:	ee07 3a90 	vmov	s15, r3
 8002954:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002958:	ee77 7a27 	vadd.f32	s15, s14, s15
 800295c:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	ee07 3a90 	vmov	s15, r3
}
 8002966:	eeb0 0a67 	vmov.f32	s0, s15
 800296a:	3720      	adds	r7, #32
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800297a:	2003      	movs	r0, #3
 800297c:	f001 fbc0 	bl	8004100 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002980:	2000      	movs	r0, #0
 8002982:	f000 f80d 	bl	80029a0 <HAL_InitTick>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d002      	beq.n	8002992 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	71fb      	strb	r3, [r7, #7]
 8002990:	e001      	b.n	8002996 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002992:	f7ff f9a9 	bl	8001ce8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002996:	79fb      	ldrb	r3, [r7, #7]
}
 8002998:	4618      	mov	r0, r3
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80029a8:	2300      	movs	r3, #0
 80029aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80029ac:	4b17      	ldr	r3, [pc, #92]	; (8002a0c <HAL_InitTick+0x6c>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d023      	beq.n	80029fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80029b4:	4b16      	ldr	r3, [pc, #88]	; (8002a10 <HAL_InitTick+0x70>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <HAL_InitTick+0x6c>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	4619      	mov	r1, r3
 80029be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ca:	4618      	mov	r0, r3
 80029cc:	f001 fbcd 	bl	800416a <HAL_SYSTICK_Config>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10f      	bne.n	80029f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b0f      	cmp	r3, #15
 80029da:	d809      	bhi.n	80029f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029dc:	2200      	movs	r2, #0
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	f04f 30ff 	mov.w	r0, #4294967295
 80029e4:	f001 fb97 	bl	8004116 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029e8:	4a0a      	ldr	r2, [pc, #40]	; (8002a14 <HAL_InitTick+0x74>)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	e007      	b.n	8002a00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	73fb      	strb	r3, [r7, #15]
 80029f4:	e004      	b.n	8002a00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	73fb      	strb	r3, [r7, #15]
 80029fa:	e001      	b.n	8002a00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20000020 	.word	0x20000020
 8002a10:	20000000 	.word	0x20000000
 8002a14:	2000001c 	.word	0x2000001c

08002a18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <HAL_IncTick+0x20>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	461a      	mov	r2, r3
 8002a22:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <HAL_IncTick+0x24>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4413      	add	r3, r2
 8002a28:	4a04      	ldr	r2, [pc, #16]	; (8002a3c <HAL_IncTick+0x24>)
 8002a2a:	6013      	str	r3, [r2, #0]
}
 8002a2c:	bf00      	nop
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	20000020 	.word	0x20000020
 8002a3c:	200009b0 	.word	0x200009b0

08002a40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  return uwTick;
 8002a44:	4b03      	ldr	r3, [pc, #12]	; (8002a54 <HAL_GetTick+0x14>)
 8002a46:	681b      	ldr	r3, [r3, #0]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	200009b0 	.word	0x200009b0

08002a58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a60:	f7ff ffee 	bl	8002a40 <HAL_GetTick>
 8002a64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a70:	d005      	beq.n	8002a7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002a72:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <HAL_Delay+0x40>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	461a      	mov	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a7e:	bf00      	nop
 8002a80:	f7ff ffde 	bl	8002a40 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d8f7      	bhi.n	8002a80 <HAL_Delay+0x28>
  {
  }
}
 8002a90:	bf00      	nop
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	20000020 	.word	0x20000020

08002a9c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	609a      	str	r2, [r3, #8]
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	609a      	str	r2, [r3, #8]
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b087      	sub	sp, #28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
 8002b10:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	3360      	adds	r3, #96	; 0x60
 8002b16:	461a      	mov	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	4b08      	ldr	r3, [pc, #32]	; (8002b48 <LL_ADC_SetOffset+0x44>)
 8002b26:	4013      	ands	r3, r2
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	4313      	orrs	r3, r2
 8002b34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002b3c:	bf00      	nop
 8002b3e:	371c      	adds	r7, #28
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	03fff000 	.word	0x03fff000

08002b4c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3360      	adds	r3, #96	; 0x60
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b087      	sub	sp, #28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	3360      	adds	r3, #96	; 0x60
 8002b88:	461a      	mov	r2, r3
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002ba2:	bf00      	nop
 8002ba4:	371c      	adds	r7, #28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b087      	sub	sp, #28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	3330      	adds	r3, #48	; 0x30
 8002be4:	461a      	mov	r2, r3
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	0a1b      	lsrs	r3, r3, #8
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	f003 030c 	and.w	r3, r3, #12
 8002bf0:	4413      	add	r3, r2
 8002bf2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f003 031f 	and.w	r3, r3, #31
 8002bfe:	211f      	movs	r1, #31
 8002c00:	fa01 f303 	lsl.w	r3, r1, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	401a      	ands	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	0e9b      	lsrs	r3, r3, #26
 8002c0c:	f003 011f 	and.w	r1, r3, #31
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f003 031f 	and.w	r3, r3, #31
 8002c16:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c20:	bf00      	nop
 8002c22:	371c      	adds	r7, #28
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	3314      	adds	r3, #20
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	0e5b      	lsrs	r3, r3, #25
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	4413      	add	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	0d1b      	lsrs	r3, r3, #20
 8002c54:	f003 031f 	and.w	r3, r3, #31
 8002c58:	2107      	movs	r1, #7
 8002c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	401a      	ands	r2, r3
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	0d1b      	lsrs	r3, r3, #20
 8002c66:	f003 031f 	and.w	r3, r3, #31
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c70:	431a      	orrs	r2, r3
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c76:	bf00      	nop
 8002c78:	371c      	adds	r7, #28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
	...

08002c84 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	401a      	ands	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f003 0318 	and.w	r3, r3, #24
 8002ca6:	4908      	ldr	r1, [pc, #32]	; (8002cc8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002ca8:	40d9      	lsrs	r1, r3
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	400b      	ands	r3, r1
 8002cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002cba:	bf00      	nop
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	0007ffff 	.word	0x0007ffff

08002ccc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 031f 	and.w	r3, r3, #31
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002d14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6093      	str	r3, [r2, #8]
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d3c:	d101      	bne.n	8002d42 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002d60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d64:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d8c:	d101      	bne.n	8002d92 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002db0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002db4:	f043 0201 	orr.w	r2, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <LL_ADC_IsEnabled+0x18>
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e000      	b.n	8002de2 <LL_ADC_IsEnabled+0x1a>
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dfe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e02:	f043 0204 	orr.w	r2, r3, #4
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 0304 	and.w	r3, r3, #4
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d101      	bne.n	8002e2e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 0308 	and.w	r3, r3, #8
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d101      	bne.n	8002e54 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e50:	2301      	movs	r3, #1
 8002e52:	e000      	b.n	8002e56 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
	...

08002e64 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e64:	b590      	push	{r4, r7, lr}
 8002e66:	b089      	sub	sp, #36	; 0x24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e70:	2300      	movs	r3, #0
 8002e72:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e134      	b.n	80030e8 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d109      	bne.n	8002ea0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7fe ff4f 	bl	8001d30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff ff3f 	bl	8002d28 <LL_ADC_IsDeepPowerDownEnabled>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d004      	beq.n	8002eba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff ff25 	bl	8002d04 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff ff5a 	bl	8002d78 <LL_ADC_IsInternalRegulatorEnabled>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d113      	bne.n	8002ef2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff ff3e 	bl	8002d50 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002ed4:	4b86      	ldr	r3, [pc, #536]	; (80030f0 <HAL_ADC_Init+0x28c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	099b      	lsrs	r3, r3, #6
 8002eda:	4a86      	ldr	r2, [pc, #536]	; (80030f4 <HAL_ADC_Init+0x290>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	099b      	lsrs	r3, r3, #6
 8002ee2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ee4:	e002      	b.n	8002eec <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f9      	bne.n	8002ee6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff ff3e 	bl	8002d78 <LL_ADC_IsInternalRegulatorEnabled>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10d      	bne.n	8002f1e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f06:	f043 0210 	orr.w	r2, r3, #16
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f12:	f043 0201 	orr.w	r2, r3, #1
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff ff77 	bl	8002e16 <LL_ADC_REG_IsConversionOngoing>
 8002f28:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2e:	f003 0310 	and.w	r3, r3, #16
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f040 80cf 	bne.w	80030d6 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f040 80cb 	bne.w	80030d6 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f44:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f48:	f043 0202 	orr.w	r2, r3, #2
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff ff37 	bl	8002dc8 <LL_ADC_IsEnabled>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d115      	bne.n	8002f8c <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f60:	4865      	ldr	r0, [pc, #404]	; (80030f8 <HAL_ADC_Init+0x294>)
 8002f62:	f7ff ff31 	bl	8002dc8 <LL_ADC_IsEnabled>
 8002f66:	4604      	mov	r4, r0
 8002f68:	4864      	ldr	r0, [pc, #400]	; (80030fc <HAL_ADC_Init+0x298>)
 8002f6a:	f7ff ff2d 	bl	8002dc8 <LL_ADC_IsEnabled>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	431c      	orrs	r4, r3
 8002f72:	4863      	ldr	r0, [pc, #396]	; (8003100 <HAL_ADC_Init+0x29c>)
 8002f74:	f7ff ff28 	bl	8002dc8 <LL_ADC_IsEnabled>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	4323      	orrs	r3, r4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d105      	bne.n	8002f8c <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	4619      	mov	r1, r3
 8002f86:	485f      	ldr	r0, [pc, #380]	; (8003104 <HAL_ADC_Init+0x2a0>)
 8002f88:	f7ff fd88 	bl	8002a9c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	7e5b      	ldrb	r3, [r3, #25]
 8002f90:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f96:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002f9c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002fa2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002faa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fac:	4313      	orrs	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d106      	bne.n	8002fc8 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	045b      	lsls	r3, r3, #17
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d009      	beq.n	8002fe4 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	4b47      	ldr	r3, [pc, #284]	; (8003108 <HAL_ADC_Init+0x2a4>)
 8002fec:	4013      	ands	r3, r2
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6812      	ldr	r2, [r2, #0]
 8002ff2:	69b9      	ldr	r1, [r7, #24]
 8002ff4:	430b      	orrs	r3, r1
 8002ff6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff ff0a 	bl	8002e16 <LL_ADC_REG_IsConversionOngoing>
 8003002:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff ff17 	bl	8002e3c <LL_ADC_INJ_IsConversionOngoing>
 800300e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d13d      	bne.n	8003092 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d13a      	bne.n	8003092 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003020:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003028:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800302a:	4313      	orrs	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003038:	f023 0302 	bic.w	r3, r3, #2
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6812      	ldr	r2, [r2, #0]
 8003040:	69b9      	ldr	r1, [r7, #24]
 8003042:	430b      	orrs	r3, r1
 8003044:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800304c:	2b01      	cmp	r3, #1
 800304e:	d118      	bne.n	8003082 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800305a:	f023 0304 	bic.w	r3, r3, #4
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003066:	4311      	orrs	r1, r2
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800306c:	4311      	orrs	r1, r2
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003072:	430a      	orrs	r2, r1
 8003074:	431a      	orrs	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0201 	orr.w	r2, r2, #1
 800307e:	611a      	str	r2, [r3, #16]
 8003080:	e007      	b.n	8003092 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	691a      	ldr	r2, [r3, #16]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 0201 	bic.w	r2, r2, #1
 8003090:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d10c      	bne.n	80030b4 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a0:	f023 010f 	bic.w	r1, r3, #15
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	1e5a      	subs	r2, r3, #1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	631a      	str	r2, [r3, #48]	; 0x30
 80030b2:	e007      	b.n	80030c4 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 020f 	bic.w	r2, r2, #15
 80030c2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c8:	f023 0303 	bic.w	r3, r3, #3
 80030cc:	f043 0201 	orr.w	r2, r3, #1
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	655a      	str	r2, [r3, #84]	; 0x54
 80030d4:	e007      	b.n	80030e6 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030da:	f043 0210 	orr.w	r2, r3, #16
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80030e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3724      	adds	r7, #36	; 0x24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd90      	pop	{r4, r7, pc}
 80030f0:	20000000 	.word	0x20000000
 80030f4:	053e2d63 	.word	0x053e2d63
 80030f8:	50040000 	.word	0x50040000
 80030fc:	50040100 	.word	0x50040100
 8003100:	50040200 	.word	0x50040200
 8003104:	50040300 	.word	0x50040300
 8003108:	fff0c007 	.word	0xfff0c007

0800310c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003116:	4862      	ldr	r0, [pc, #392]	; (80032a0 <HAL_ADC_PollForConversion+0x194>)
 8003118:	f7ff fdd8 	bl	8002ccc <LL_ADC_GetMultimode>
 800311c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	2b08      	cmp	r3, #8
 8003124:	d102      	bne.n	800312c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003126:	2308      	movs	r3, #8
 8003128:	61fb      	str	r3, [r7, #28]
 800312a:	e02a      	b.n	8003182 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d005      	beq.n	800313e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2b05      	cmp	r3, #5
 8003136:	d002      	beq.n	800313e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	2b09      	cmp	r3, #9
 800313c:	d111      	bne.n	8003162 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b00      	cmp	r3, #0
 800314a:	d007      	beq.n	800315c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003150:	f043 0220 	orr.w	r2, r3, #32
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e09d      	b.n	8003298 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800315c:	2304      	movs	r3, #4
 800315e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003160:	e00f      	b.n	8003182 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003162:	484f      	ldr	r0, [pc, #316]	; (80032a0 <HAL_ADC_PollForConversion+0x194>)
 8003164:	f7ff fdc0 	bl	8002ce8 <LL_ADC_GetMultiDMATransfer>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d007      	beq.n	800317e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003172:	f043 0220 	orr.w	r2, r3, #32
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e08c      	b.n	8003298 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800317e:	2304      	movs	r3, #4
 8003180:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003182:	f7ff fc5d 	bl	8002a40 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003188:	e01a      	b.n	80031c0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003190:	d016      	beq.n	80031c0 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003192:	f7ff fc55 	bl	8002a40 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d302      	bcc.n	80031a8 <HAL_ADC_PollForConversion+0x9c>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10b      	bne.n	80031c0 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ac:	f043 0204 	orr.w	r2, r3, #4
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e06b      	b.n	8003298 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	4013      	ands	r3, r2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0dd      	beq.n	800318a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff fce5 	bl	8002bae <LL_ADC_REG_IsTriggerSourceSWStart>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d01c      	beq.n	8003224 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	7e5b      	ldrb	r3, [r3, #25]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d118      	bne.n	8003224 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0308 	and.w	r3, r3, #8
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d111      	bne.n	8003224 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003204:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003210:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d105      	bne.n	8003224 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321c:	f043 0201 	orr.w	r2, r3, #1
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a1e      	ldr	r2, [pc, #120]	; (80032a4 <HAL_ADC_PollForConversion+0x198>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d002      	beq.n	8003234 <HAL_ADC_PollForConversion+0x128>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	e000      	b.n	8003236 <HAL_ADC_PollForConversion+0x12a>
 8003234:	4b1c      	ldr	r3, [pc, #112]	; (80032a8 <HAL_ADC_PollForConversion+0x19c>)
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6812      	ldr	r2, [r2, #0]
 800323a:	4293      	cmp	r3, r2
 800323c:	d008      	beq.n	8003250 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d005      	beq.n	8003250 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	2b05      	cmp	r3, #5
 8003248:	d002      	beq.n	8003250 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	2b09      	cmp	r3, #9
 800324e:	d104      	bne.n	800325a <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	61bb      	str	r3, [r7, #24]
 8003258:	e00c      	b.n	8003274 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a11      	ldr	r2, [pc, #68]	; (80032a4 <HAL_ADC_PollForConversion+0x198>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d002      	beq.n	800326a <HAL_ADC_PollForConversion+0x15e>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	e000      	b.n	800326c <HAL_ADC_PollForConversion+0x160>
 800326a:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <HAL_ADC_PollForConversion+0x19c>)
 800326c:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	2b08      	cmp	r3, #8
 8003278:	d104      	bne.n	8003284 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2208      	movs	r2, #8
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	e008      	b.n	8003296 <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d103      	bne.n	8003296 <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	220c      	movs	r2, #12
 8003294:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3720      	adds	r7, #32
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	50040300 	.word	0x50040300
 80032a4:	50040100 	.word	0x50040100
 80032a8:	50040000 	.word	0x50040000

080032ac <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032b4:	4893      	ldr	r0, [pc, #588]	; (8003504 <HAL_ADC_Start_IT+0x258>)
 80032b6:	f7ff fd09 	bl	8002ccc <LL_ADC_GetMultimode>
 80032ba:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff fda8 	bl	8002e16 <LL_ADC_REG_IsConversionOngoing>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f040 8112 	bne.w	80034f2 <HAL_ADC_Start_IT+0x246>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d101      	bne.n	80032dc <HAL_ADC_Start_IT+0x30>
 80032d8:	2302      	movs	r3, #2
 80032da:	e10f      	b.n	80034fc <HAL_ADC_Start_IT+0x250>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 fd0f 	bl	8003d08 <ADC_Enable>
 80032ea:	4603      	mov	r3, r0
 80032ec:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80032ee:	7dfb      	ldrb	r3, [r7, #23]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f040 80f9 	bne.w	80034e8 <HAL_ADC_Start_IT+0x23c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032fe:	f023 0301 	bic.w	r3, r3, #1
 8003302:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a7e      	ldr	r2, [pc, #504]	; (8003508 <HAL_ADC_Start_IT+0x25c>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d002      	beq.n	800331a <HAL_ADC_Start_IT+0x6e>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	e000      	b.n	800331c <HAL_ADC_Start_IT+0x70>
 800331a:	4b7c      	ldr	r3, [pc, #496]	; (800350c <HAL_ADC_Start_IT+0x260>)
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6812      	ldr	r2, [r2, #0]
 8003320:	4293      	cmp	r3, r2
 8003322:	d002      	beq.n	800332a <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d105      	bne.n	8003336 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d006      	beq.n	8003350 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003346:	f023 0206 	bic.w	r2, r3, #6
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	659a      	str	r2, [r3, #88]	; 0x58
 800334e:	e002      	b.n	8003356 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	221c      	movs	r2, #28
 800335c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 021c 	bic.w	r2, r2, #28
 8003374:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	2b08      	cmp	r3, #8
 800337c:	d108      	bne.n	8003390 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f042 0208 	orr.w	r2, r2, #8
 800338c:	605a      	str	r2, [r3, #4]
          break;
 800338e:	e008      	b.n	80033a2 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0204 	orr.w	r2, r2, #4
 800339e:	605a      	str	r2, [r3, #4]
          break;
 80033a0:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d107      	bne.n	80033ba <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f042 0210 	orr.w	r2, r2, #16
 80033b8:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a52      	ldr	r2, [pc, #328]	; (8003508 <HAL_ADC_Start_IT+0x25c>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d002      	beq.n	80033ca <HAL_ADC_Start_IT+0x11e>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	e000      	b.n	80033cc <HAL_ADC_Start_IT+0x120>
 80033ca:	4b50      	ldr	r3, [pc, #320]	; (800350c <HAL_ADC_Start_IT+0x260>)
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6812      	ldr	r2, [r2, #0]
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d008      	beq.n	80033e6 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d005      	beq.n	80033e6 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	2b05      	cmp	r3, #5
 80033de:	d002      	beq.n	80033e6 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	2b09      	cmp	r3, #9
 80033e4:	d13b      	bne.n	800345e <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d02d      	beq.n	8003450 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	2b08      	cmp	r3, #8
 800340a:	d110      	bne.n	800342e <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0220 	bic.w	r2, r2, #32
 800341a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800342a:	605a      	str	r2, [r3, #4]
              break;
 800342c:	e011      	b.n	8003452 <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800343c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f042 0220 	orr.w	r2, r2, #32
 800344c:	605a      	str	r2, [r3, #4]
              break;
 800344e:	e000      	b.n	8003452 <HAL_ADC_Start_IT+0x1a6>
          }
        }
 8003450:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff fcc9 	bl	8002dee <LL_ADC_REG_StartConversion>
 800345c:	e04d      	b.n	80034fa <HAL_ADC_Start_IT+0x24e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003462:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a26      	ldr	r2, [pc, #152]	; (8003508 <HAL_ADC_Start_IT+0x25c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d002      	beq.n	800347a <HAL_ADC_Start_IT+0x1ce>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	e000      	b.n	800347c <HAL_ADC_Start_IT+0x1d0>
 800347a:	4b24      	ldr	r3, [pc, #144]	; (800350c <HAL_ADC_Start_IT+0x260>)
 800347c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d036      	beq.n	80034f8 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003492:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	2b08      	cmp	r3, #8
 80034a0:	d110      	bne.n	80034c4 <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0220 	bic.w	r2, r2, #32
 80034b0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034c0:	605a      	str	r2, [r3, #4]
              break;
 80034c2:	e01a      	b.n	80034fa <HAL_ADC_Start_IT+0x24e>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034d2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0220 	orr.w	r2, r2, #32
 80034e2:	605a      	str	r2, [r3, #4]
              break;
 80034e4:	bf00      	nop
 80034e6:	e008      	b.n	80034fa <HAL_ADC_Start_IT+0x24e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80034f0:	e003      	b.n	80034fa <HAL_ADC_Start_IT+0x24e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80034f2:	2302      	movs	r3, #2
 80034f4:	75fb      	strb	r3, [r7, #23]
 80034f6:	e000      	b.n	80034fa <HAL_ADC_Start_IT+0x24e>
        }
 80034f8:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 80034fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	50040300 	.word	0x50040300
 8003508:	50040100 	.word	0x50040100
 800350c:	50040000 	.word	0x50040000

08003510 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800351e:	4618      	mov	r0, r3
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
	...

0800352c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b0b6      	sub	sp, #216	; 0xd8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003536:	2300      	movs	r3, #0
 8003538:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800353c:	2300      	movs	r3, #0
 800353e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003546:	2b01      	cmp	r3, #1
 8003548:	d101      	bne.n	800354e <HAL_ADC_ConfigChannel+0x22>
 800354a:	2302      	movs	r3, #2
 800354c:	e3c6      	b.n	8003cdc <HAL_ADC_ConfigChannel+0x7b0>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff fc5b 	bl	8002e16 <LL_ADC_REG_IsConversionOngoing>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	f040 83a7 	bne.w	8003cb6 <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2b05      	cmp	r3, #5
 800356e:	d824      	bhi.n	80035ba <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	3b02      	subs	r3, #2
 8003576:	2b03      	cmp	r3, #3
 8003578:	d81b      	bhi.n	80035b2 <HAL_ADC_ConfigChannel+0x86>
 800357a:	a201      	add	r2, pc, #4	; (adr r2, 8003580 <HAL_ADC_ConfigChannel+0x54>)
 800357c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003580:	08003591 	.word	0x08003591
 8003584:	08003599 	.word	0x08003599
 8003588:	080035a1 	.word	0x080035a1
 800358c:	080035a9 	.word	0x080035a9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	220c      	movs	r2, #12
 8003594:	605a      	str	r2, [r3, #4]
          break;
 8003596:	e011      	b.n	80035bc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	2212      	movs	r2, #18
 800359c:	605a      	str	r2, [r3, #4]
          break;
 800359e:	e00d      	b.n	80035bc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	2218      	movs	r2, #24
 80035a4:	605a      	str	r2, [r3, #4]
          break;
 80035a6:	e009      	b.n	80035bc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035ae:	605a      	str	r2, [r3, #4]
          break;
 80035b0:	e004      	b.n	80035bc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2206      	movs	r2, #6
 80035b6:	605a      	str	r2, [r3, #4]
          break;
 80035b8:	e000      	b.n	80035bc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80035ba:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6818      	ldr	r0, [r3, #0]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	6859      	ldr	r1, [r3, #4]
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	461a      	mov	r2, r3
 80035ca:	f7ff fb03 	bl	8002bd4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff fc1f 	bl	8002e16 <LL_ADC_REG_IsConversionOngoing>
 80035d8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff fc2b 	bl	8002e3c <LL_ADC_INJ_IsConversionOngoing>
 80035e6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f040 81a6 	bne.w	8003940 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f040 81a1 	bne.w	8003940 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6818      	ldr	r0, [r3, #0]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	6819      	ldr	r1, [r3, #0]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	461a      	mov	r2, r3
 800360c:	f7ff fb0e 	bl	8002c2c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	695a      	ldr	r2, [r3, #20]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	08db      	lsrs	r3, r3, #3
 800361c:	f003 0303 	and.w	r3, r3, #3
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	2b04      	cmp	r3, #4
 8003630:	d00a      	beq.n	8003648 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6818      	ldr	r0, [r3, #0]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	6919      	ldr	r1, [r3, #16]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003642:	f7ff fa5f 	bl	8002b04 <LL_ADC_SetOffset>
 8003646:	e17b      	b.n	8003940 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2100      	movs	r1, #0
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff fa7c 	bl	8002b4c <LL_ADC_GetOffsetChannel>
 8003654:	4603      	mov	r3, r0
 8003656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10a      	bne.n	8003674 <HAL_ADC_ConfigChannel+0x148>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2100      	movs	r1, #0
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff fa71 	bl	8002b4c <LL_ADC_GetOffsetChannel>
 800366a:	4603      	mov	r3, r0
 800366c:	0e9b      	lsrs	r3, r3, #26
 800366e:	f003 021f 	and.w	r2, r3, #31
 8003672:	e01e      	b.n	80036b2 <HAL_ADC_ConfigChannel+0x186>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2100      	movs	r1, #0
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff fa66 	bl	8002b4c <LL_ADC_GetOffsetChannel>
 8003680:	4603      	mov	r3, r0
 8003682:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003686:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800368a:	fa93 f3a3 	rbit	r3, r3
 800368e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003692:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003696:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800369a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80036a2:	2320      	movs	r3, #32
 80036a4:	e004      	b.n	80036b0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80036a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036aa:	fab3 f383 	clz	r3, r3
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d105      	bne.n	80036ca <HAL_ADC_ConfigChannel+0x19e>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	0e9b      	lsrs	r3, r3, #26
 80036c4:	f003 031f 	and.w	r3, r3, #31
 80036c8:	e018      	b.n	80036fc <HAL_ADC_ConfigChannel+0x1d0>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80036d6:	fa93 f3a3 	rbit	r3, r3
 80036da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80036de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80036e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80036ee:	2320      	movs	r3, #32
 80036f0:	e004      	b.n	80036fc <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80036f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80036f6:	fab3 f383 	clz	r3, r3
 80036fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d106      	bne.n	800370e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2200      	movs	r2, #0
 8003706:	2100      	movs	r1, #0
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff fa35 	bl	8002b78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2101      	movs	r1, #1
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff fa19 	bl	8002b4c <LL_ADC_GetOffsetChannel>
 800371a:	4603      	mov	r3, r0
 800371c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10a      	bne.n	800373a <HAL_ADC_ConfigChannel+0x20e>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2101      	movs	r1, #1
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff fa0e 	bl	8002b4c <LL_ADC_GetOffsetChannel>
 8003730:	4603      	mov	r3, r0
 8003732:	0e9b      	lsrs	r3, r3, #26
 8003734:	f003 021f 	and.w	r2, r3, #31
 8003738:	e01e      	b.n	8003778 <HAL_ADC_ConfigChannel+0x24c>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2101      	movs	r1, #1
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff fa03 	bl	8002b4c <LL_ADC_GetOffsetChannel>
 8003746:	4603      	mov	r3, r0
 8003748:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003750:	fa93 f3a3 	rbit	r3, r3
 8003754:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003758:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800375c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003760:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003768:	2320      	movs	r3, #32
 800376a:	e004      	b.n	8003776 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800376c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003770:	fab3 f383 	clz	r3, r3
 8003774:	b2db      	uxtb	r3, r3
 8003776:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003780:	2b00      	cmp	r3, #0
 8003782:	d105      	bne.n	8003790 <HAL_ADC_ConfigChannel+0x264>
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	0e9b      	lsrs	r3, r3, #26
 800378a:	f003 031f 	and.w	r3, r3, #31
 800378e:	e018      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x296>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003798:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800379c:	fa93 f3a3 	rbit	r3, r3
 80037a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80037a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80037a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80037ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80037b4:	2320      	movs	r3, #32
 80037b6:	e004      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80037b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037bc:	fab3 f383 	clz	r3, r3
 80037c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d106      	bne.n	80037d4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2200      	movs	r2, #0
 80037cc:	2101      	movs	r1, #1
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7ff f9d2 	bl	8002b78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2102      	movs	r1, #2
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff f9b6 	bl	8002b4c <LL_ADC_GetOffsetChannel>
 80037e0:	4603      	mov	r3, r0
 80037e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10a      	bne.n	8003800 <HAL_ADC_ConfigChannel+0x2d4>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2102      	movs	r1, #2
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff f9ab 	bl	8002b4c <LL_ADC_GetOffsetChannel>
 80037f6:	4603      	mov	r3, r0
 80037f8:	0e9b      	lsrs	r3, r3, #26
 80037fa:	f003 021f 	and.w	r2, r3, #31
 80037fe:	e01e      	b.n	800383e <HAL_ADC_ConfigChannel+0x312>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2102      	movs	r1, #2
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff f9a0 	bl	8002b4c <LL_ADC_GetOffsetChannel>
 800380c:	4603      	mov	r3, r0
 800380e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003812:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003816:	fa93 f3a3 	rbit	r3, r3
 800381a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800381e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003822:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003826:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800382e:	2320      	movs	r3, #32
 8003830:	e004      	b.n	800383c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003832:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003836:	fab3 f383 	clz	r3, r3
 800383a:	b2db      	uxtb	r3, r3
 800383c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003846:	2b00      	cmp	r3, #0
 8003848:	d105      	bne.n	8003856 <HAL_ADC_ConfigChannel+0x32a>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	0e9b      	lsrs	r3, r3, #26
 8003850:	f003 031f 	and.w	r3, r3, #31
 8003854:	e016      	b.n	8003884 <HAL_ADC_ConfigChannel+0x358>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003862:	fa93 f3a3 	rbit	r3, r3
 8003866:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003868:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800386a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800386e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003876:	2320      	movs	r3, #32
 8003878:	e004      	b.n	8003884 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800387a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800387e:	fab3 f383 	clz	r3, r3
 8003882:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003884:	429a      	cmp	r2, r3
 8003886:	d106      	bne.n	8003896 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2200      	movs	r2, #0
 800388e:	2102      	movs	r1, #2
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff f971 	bl	8002b78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2103      	movs	r1, #3
 800389c:	4618      	mov	r0, r3
 800389e:	f7ff f955 	bl	8002b4c <LL_ADC_GetOffsetChannel>
 80038a2:	4603      	mov	r3, r0
 80038a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10a      	bne.n	80038c2 <HAL_ADC_ConfigChannel+0x396>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2103      	movs	r1, #3
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7ff f94a 	bl	8002b4c <LL_ADC_GetOffsetChannel>
 80038b8:	4603      	mov	r3, r0
 80038ba:	0e9b      	lsrs	r3, r3, #26
 80038bc:	f003 021f 	and.w	r2, r3, #31
 80038c0:	e017      	b.n	80038f2 <HAL_ADC_ConfigChannel+0x3c6>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2103      	movs	r1, #3
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff f93f 	bl	8002b4c <LL_ADC_GetOffsetChannel>
 80038ce:	4603      	mov	r3, r0
 80038d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038d4:	fa93 f3a3 	rbit	r3, r3
 80038d8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80038da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038dc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80038de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80038e4:	2320      	movs	r3, #32
 80038e6:	e003      	b.n	80038f0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80038e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038ea:	fab3 f383 	clz	r3, r3
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d105      	bne.n	800390a <HAL_ADC_ConfigChannel+0x3de>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	0e9b      	lsrs	r3, r3, #26
 8003904:	f003 031f 	and.w	r3, r3, #31
 8003908:	e011      	b.n	800392e <HAL_ADC_ConfigChannel+0x402>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003910:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003912:	fa93 f3a3 	rbit	r3, r3
 8003916:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003918:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800391a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800391c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003922:	2320      	movs	r3, #32
 8003924:	e003      	b.n	800392e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003928:	fab3 f383 	clz	r3, r3
 800392c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800392e:	429a      	cmp	r2, r3
 8003930:	d106      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2200      	movs	r2, #0
 8003938:	2103      	movs	r1, #3
 800393a:	4618      	mov	r0, r3
 800393c:	f7ff f91c 	bl	8002b78 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff fa3f 	bl	8002dc8 <LL_ADC_IsEnabled>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	f040 813f 	bne.w	8003bd0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6818      	ldr	r0, [r3, #0]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	6819      	ldr	r1, [r3, #0]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	461a      	mov	r2, r3
 8003960:	f7ff f990 	bl	8002c84 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	4a8e      	ldr	r2, [pc, #568]	; (8003ba4 <HAL_ADC_ConfigChannel+0x678>)
 800396a:	4293      	cmp	r3, r2
 800396c:	f040 8130 	bne.w	8003bd0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10b      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x46c>
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	0e9b      	lsrs	r3, r3, #26
 8003986:	3301      	adds	r3, #1
 8003988:	f003 031f 	and.w	r3, r3, #31
 800398c:	2b09      	cmp	r3, #9
 800398e:	bf94      	ite	ls
 8003990:	2301      	movls	r3, #1
 8003992:	2300      	movhi	r3, #0
 8003994:	b2db      	uxtb	r3, r3
 8003996:	e019      	b.n	80039cc <HAL_ADC_ConfigChannel+0x4a0>
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039a0:	fa93 f3a3 	rbit	r3, r3
 80039a4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80039a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039a8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80039aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80039b0:	2320      	movs	r3, #32
 80039b2:	e003      	b.n	80039bc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80039b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039b6:	fab3 f383 	clz	r3, r3
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	3301      	adds	r3, #1
 80039be:	f003 031f 	and.w	r3, r3, #31
 80039c2:	2b09      	cmp	r3, #9
 80039c4:	bf94      	ite	ls
 80039c6:	2301      	movls	r3, #1
 80039c8:	2300      	movhi	r3, #0
 80039ca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d079      	beq.n	8003ac4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d107      	bne.n	80039ec <HAL_ADC_ConfigChannel+0x4c0>
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	0e9b      	lsrs	r3, r3, #26
 80039e2:	3301      	adds	r3, #1
 80039e4:	069b      	lsls	r3, r3, #26
 80039e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039ea:	e015      	b.n	8003a18 <HAL_ADC_ConfigChannel+0x4ec>
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039f4:	fa93 f3a3 	rbit	r3, r3
 80039f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80039fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039fc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80039fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003a04:	2320      	movs	r3, #32
 8003a06:	e003      	b.n	8003a10 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003a08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a0a:	fab3 f383 	clz	r3, r3
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	3301      	adds	r3, #1
 8003a12:	069b      	lsls	r3, r3, #26
 8003a14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d109      	bne.n	8003a38 <HAL_ADC_ConfigChannel+0x50c>
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	0e9b      	lsrs	r3, r3, #26
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	f003 031f 	and.w	r3, r3, #31
 8003a30:	2101      	movs	r1, #1
 8003a32:	fa01 f303 	lsl.w	r3, r1, r3
 8003a36:	e017      	b.n	8003a68 <HAL_ADC_ConfigChannel+0x53c>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a40:	fa93 f3a3 	rbit	r3, r3
 8003a44:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a48:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003a50:	2320      	movs	r3, #32
 8003a52:	e003      	b.n	8003a5c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003a54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a56:	fab3 f383 	clz	r3, r3
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	f003 031f 	and.w	r3, r3, #31
 8003a62:	2101      	movs	r1, #1
 8003a64:	fa01 f303 	lsl.w	r3, r1, r3
 8003a68:	ea42 0103 	orr.w	r1, r2, r3
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10a      	bne.n	8003a8e <HAL_ADC_ConfigChannel+0x562>
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	0e9b      	lsrs	r3, r3, #26
 8003a7e:	3301      	adds	r3, #1
 8003a80:	f003 021f 	and.w	r2, r3, #31
 8003a84:	4613      	mov	r3, r2
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	4413      	add	r3, r2
 8003a8a:	051b      	lsls	r3, r3, #20
 8003a8c:	e018      	b.n	8003ac0 <HAL_ADC_ConfigChannel+0x594>
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a96:	fa93 f3a3 	rbit	r3, r3
 8003a9a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003aa6:	2320      	movs	r3, #32
 8003aa8:	e003      	b.n	8003ab2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aac:	fab3 f383 	clz	r3, r3
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	f003 021f 	and.w	r2, r3, #31
 8003ab8:	4613      	mov	r3, r2
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	4413      	add	r3, r2
 8003abe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ac0:	430b      	orrs	r3, r1
 8003ac2:	e080      	b.n	8003bc6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d107      	bne.n	8003ae0 <HAL_ADC_ConfigChannel+0x5b4>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	0e9b      	lsrs	r3, r3, #26
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	069b      	lsls	r3, r3, #26
 8003ada:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ade:	e015      	b.n	8003b0c <HAL_ADC_ConfigChannel+0x5e0>
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae8:	fa93 f3a3 	rbit	r3, r3
 8003aec:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003af8:	2320      	movs	r3, #32
 8003afa:	e003      	b.n	8003b04 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afe:	fab3 f383 	clz	r3, r3
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	3301      	adds	r3, #1
 8003b06:	069b      	lsls	r3, r3, #26
 8003b08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d109      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x600>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	0e9b      	lsrs	r3, r3, #26
 8003b1e:	3301      	adds	r3, #1
 8003b20:	f003 031f 	and.w	r3, r3, #31
 8003b24:	2101      	movs	r1, #1
 8003b26:	fa01 f303 	lsl.w	r3, r1, r3
 8003b2a:	e017      	b.n	8003b5c <HAL_ADC_ConfigChannel+0x630>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	fa93 f3a3 	rbit	r3, r3
 8003b38:	61fb      	str	r3, [r7, #28]
  return result;
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003b44:	2320      	movs	r3, #32
 8003b46:	e003      	b.n	8003b50 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	fab3 f383 	clz	r3, r3
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	3301      	adds	r3, #1
 8003b52:	f003 031f 	and.w	r3, r3, #31
 8003b56:	2101      	movs	r1, #1
 8003b58:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5c:	ea42 0103 	orr.w	r1, r2, r3
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10d      	bne.n	8003b88 <HAL_ADC_ConfigChannel+0x65c>
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	0e9b      	lsrs	r3, r3, #26
 8003b72:	3301      	adds	r3, #1
 8003b74:	f003 021f 	and.w	r2, r3, #31
 8003b78:	4613      	mov	r3, r2
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	4413      	add	r3, r2
 8003b7e:	3b1e      	subs	r3, #30
 8003b80:	051b      	lsls	r3, r3, #20
 8003b82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b86:	e01d      	b.n	8003bc4 <HAL_ADC_ConfigChannel+0x698>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	fa93 f3a3 	rbit	r3, r3
 8003b94:	613b      	str	r3, [r7, #16]
  return result;
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d103      	bne.n	8003ba8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003ba0:	2320      	movs	r3, #32
 8003ba2:	e005      	b.n	8003bb0 <HAL_ADC_ConfigChannel+0x684>
 8003ba4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	fab3 f383 	clz	r3, r3
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	f003 021f 	and.w	r2, r3, #31
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	4413      	add	r3, r2
 8003bbc:	3b1e      	subs	r3, #30
 8003bbe:	051b      	lsls	r3, r3, #20
 8003bc0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	6892      	ldr	r2, [r2, #8]
 8003bca:	4619      	mov	r1, r3
 8003bcc:	f7ff f82e 	bl	8002c2c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	4b43      	ldr	r3, [pc, #268]	; (8003ce4 <HAL_ADC_ConfigChannel+0x7b8>)
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d079      	beq.n	8003cd0 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bdc:	4842      	ldr	r0, [pc, #264]	; (8003ce8 <HAL_ADC_ConfigChannel+0x7bc>)
 8003bde:	f7fe ff83 	bl	8002ae8 <LL_ADC_GetCommonPathInternalCh>
 8003be2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a40      	ldr	r2, [pc, #256]	; (8003cec <HAL_ADC_ConfigChannel+0x7c0>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d12b      	bne.n	8003c48 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003bf0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d125      	bne.n	8003c48 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a3b      	ldr	r2, [pc, #236]	; (8003cf0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d004      	beq.n	8003c10 <HAL_ADC_ConfigChannel+0x6e4>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a3a      	ldr	r2, [pc, #232]	; (8003cf4 <HAL_ADC_ConfigChannel+0x7c8>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d15c      	bne.n	8003cca <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4833      	ldr	r0, [pc, #204]	; (8003ce8 <HAL_ADC_ConfigChannel+0x7bc>)
 8003c1c:	f7fe ff51 	bl	8002ac2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003c20:	4b35      	ldr	r3, [pc, #212]	; (8003cf8 <HAL_ADC_ConfigChannel+0x7cc>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	099b      	lsrs	r3, r3, #6
 8003c26:	4a35      	ldr	r2, [pc, #212]	; (8003cfc <HAL_ADC_ConfigChannel+0x7d0>)
 8003c28:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2c:	099a      	lsrs	r2, r3, #6
 8003c2e:	4613      	mov	r3, r2
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	4413      	add	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003c38:	e002      	b.n	8003c40 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f9      	bne.n	8003c3a <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c46:	e040      	b.n	8003cca <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a2c      	ldr	r2, [pc, #176]	; (8003d00 <HAL_ADC_ConfigChannel+0x7d4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d118      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0x758>
 8003c52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d112      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a23      	ldr	r2, [pc, #140]	; (8003cf0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d004      	beq.n	8003c72 <HAL_ADC_ConfigChannel+0x746>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a21      	ldr	r2, [pc, #132]	; (8003cf4 <HAL_ADC_ConfigChannel+0x7c8>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d12d      	bne.n	8003cce <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	481a      	ldr	r0, [pc, #104]	; (8003ce8 <HAL_ADC_ConfigChannel+0x7bc>)
 8003c7e:	f7fe ff20 	bl	8002ac2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c82:	e024      	b.n	8003cce <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a1e      	ldr	r2, [pc, #120]	; (8003d04 <HAL_ADC_ConfigChannel+0x7d8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d120      	bne.n	8003cd0 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d11a      	bne.n	8003cd0 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a14      	ldr	r2, [pc, #80]	; (8003cf0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d115      	bne.n	8003cd0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ca4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ca8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003cac:	4619      	mov	r1, r3
 8003cae:	480e      	ldr	r0, [pc, #56]	; (8003ce8 <HAL_ADC_ConfigChannel+0x7bc>)
 8003cb0:	f7fe ff07 	bl	8002ac2 <LL_ADC_SetCommonPathInternalCh>
 8003cb4:	e00c      	b.n	8003cd0 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cba:	f043 0220 	orr.w	r2, r3, #32
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003cc8:	e002      	b.n	8003cd0 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003cca:	bf00      	nop
 8003ccc:	e000      	b.n	8003cd0 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cce:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003cd8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	37d8      	adds	r7, #216	; 0xd8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	80080000 	.word	0x80080000
 8003ce8:	50040300 	.word	0x50040300
 8003cec:	c7520000 	.word	0xc7520000
 8003cf0:	50040000 	.word	0x50040000
 8003cf4:	50040200 	.word	0x50040200
 8003cf8:	20000000 	.word	0x20000000
 8003cfc:	053e2d63 	.word	0x053e2d63
 8003d00:	cb840000 	.word	0xcb840000
 8003d04:	80000001 	.word	0x80000001

08003d08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff f857 	bl	8002dc8 <LL_ADC_IsEnabled>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d146      	bne.n	8003dae <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689a      	ldr	r2, [r3, #8]
 8003d26:	4b24      	ldr	r3, [pc, #144]	; (8003db8 <ADC_Enable+0xb0>)
 8003d28:	4013      	ands	r3, r2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00d      	beq.n	8003d4a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d32:	f043 0210 	orr.w	r2, r3, #16
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3e:	f043 0201 	orr.w	r2, r3, #1
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e032      	b.n	8003db0 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff f826 	bl	8002da0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003d54:	f7fe fe74 	bl	8002a40 <HAL_GetTick>
 8003d58:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d5a:	e021      	b.n	8003da0 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff f831 	bl	8002dc8 <LL_ADC_IsEnabled>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d104      	bne.n	8003d76 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff f815 	bl	8002da0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d76:	f7fe fe63 	bl	8002a40 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d90d      	bls.n	8003da0 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d88:	f043 0210 	orr.w	r2, r3, #16
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d94:	f043 0201 	orr.w	r2, r3, #1
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e007      	b.n	8003db0 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d1d6      	bne.n	8003d5c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	8000003f 	.word	0x8000003f

08003dbc <LL_ADC_IsEnabled>:
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d101      	bne.n	8003dd4 <LL_ADC_IsEnabled+0x18>
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e000      	b.n	8003dd6 <LL_ADC_IsEnabled+0x1a>
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <LL_ADC_REG_IsConversionOngoing>:
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 0304 	and.w	r3, r3, #4
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d101      	bne.n	8003dfa <LL_ADC_REG_IsConversionOngoing+0x18>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003e08:	b590      	push	{r4, r7, lr}
 8003e0a:	b09f      	sub	sp, #124	; 0x7c
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e12:	2300      	movs	r3, #0
 8003e14:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e08f      	b.n	8003f46 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a47      	ldr	r2, [pc, #284]	; (8003f50 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d102      	bne.n	8003e3e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003e38:	4b46      	ldr	r3, [pc, #280]	; (8003f54 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003e3a:	60bb      	str	r3, [r7, #8]
 8003e3c:	e001      	b.n	8003e42 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10b      	bne.n	8003e60 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4c:	f043 0220 	orr.w	r2, r3, #32
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e072      	b.n	8003f46 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7ff ffbd 	bl	8003de2 <LL_ADC_REG_IsConversionOngoing>
 8003e68:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7ff ffb7 	bl	8003de2 <LL_ADC_REG_IsConversionOngoing>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d154      	bne.n	8003f24 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003e7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d151      	bne.n	8003f24 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003e80:	4b35      	ldr	r3, [pc, #212]	; (8003f58 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003e82:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d02c      	beq.n	8003ee6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	6859      	ldr	r1, [r3, #4]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e9e:	035b      	lsls	r3, r3, #13
 8003ea0:	430b      	orrs	r3, r1
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ea8:	4829      	ldr	r0, [pc, #164]	; (8003f50 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003eaa:	f7ff ff87 	bl	8003dbc <LL_ADC_IsEnabled>
 8003eae:	4604      	mov	r4, r0
 8003eb0:	4828      	ldr	r0, [pc, #160]	; (8003f54 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003eb2:	f7ff ff83 	bl	8003dbc <LL_ADC_IsEnabled>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	431c      	orrs	r4, r3
 8003eba:	4828      	ldr	r0, [pc, #160]	; (8003f5c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003ebc:	f7ff ff7e 	bl	8003dbc <LL_ADC_IsEnabled>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	4323      	orrs	r3, r4
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d137      	bne.n	8003f38 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003ed0:	f023 030f 	bic.w	r3, r3, #15
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	6811      	ldr	r1, [r2, #0]
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	6892      	ldr	r2, [r2, #8]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ee4:	e028      	b.n	8003f38 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ef2:	4817      	ldr	r0, [pc, #92]	; (8003f50 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003ef4:	f7ff ff62 	bl	8003dbc <LL_ADC_IsEnabled>
 8003ef8:	4604      	mov	r4, r0
 8003efa:	4816      	ldr	r0, [pc, #88]	; (8003f54 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003efc:	f7ff ff5e 	bl	8003dbc <LL_ADC_IsEnabled>
 8003f00:	4603      	mov	r3, r0
 8003f02:	431c      	orrs	r4, r3
 8003f04:	4815      	ldr	r0, [pc, #84]	; (8003f5c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003f06:	f7ff ff59 	bl	8003dbc <LL_ADC_IsEnabled>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	4323      	orrs	r3, r4
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d112      	bne.n	8003f38 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003f1a:	f023 030f 	bic.w	r3, r3, #15
 8003f1e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f20:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f22:	e009      	b.n	8003f38 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f28:	f043 0220 	orr.w	r2, r3, #32
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003f36:	e000      	b.n	8003f3a <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f38:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003f42:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	377c      	adds	r7, #124	; 0x7c
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd90      	pop	{r4, r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	50040000 	.word	0x50040000
 8003f54:	50040100 	.word	0x50040100
 8003f58:	50040300 	.word	0x50040300
 8003f5c:	50040200 	.word	0x50040200

08003f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f003 0307 	and.w	r3, r3, #7
 8003f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f70:	4b0c      	ldr	r3, [pc, #48]	; (8003fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f92:	4a04      	ldr	r2, [pc, #16]	; (8003fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	60d3      	str	r3, [r2, #12]
}
 8003f98:	bf00      	nop
 8003f9a:	3714      	adds	r7, #20
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr
 8003fa4:	e000ed00 	.word	0xe000ed00

08003fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fac:	4b04      	ldr	r3, [pc, #16]	; (8003fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	0a1b      	lsrs	r3, r3, #8
 8003fb2:	f003 0307 	and.w	r3, r3, #7
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	e000ed00 	.word	0xe000ed00

08003fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	4603      	mov	r3, r0
 8003fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	db0b      	blt.n	8003fee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fd6:	79fb      	ldrb	r3, [r7, #7]
 8003fd8:	f003 021f 	and.w	r2, r3, #31
 8003fdc:	4907      	ldr	r1, [pc, #28]	; (8003ffc <__NVIC_EnableIRQ+0x38>)
 8003fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe2:	095b      	lsrs	r3, r3, #5
 8003fe4:	2001      	movs	r0, #1
 8003fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8003fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	e000e100 	.word	0xe000e100

08004000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	4603      	mov	r3, r0
 8004008:	6039      	str	r1, [r7, #0]
 800400a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800400c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004010:	2b00      	cmp	r3, #0
 8004012:	db0a      	blt.n	800402a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	b2da      	uxtb	r2, r3
 8004018:	490c      	ldr	r1, [pc, #48]	; (800404c <__NVIC_SetPriority+0x4c>)
 800401a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800401e:	0112      	lsls	r2, r2, #4
 8004020:	b2d2      	uxtb	r2, r2
 8004022:	440b      	add	r3, r1
 8004024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004028:	e00a      	b.n	8004040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	b2da      	uxtb	r2, r3
 800402e:	4908      	ldr	r1, [pc, #32]	; (8004050 <__NVIC_SetPriority+0x50>)
 8004030:	79fb      	ldrb	r3, [r7, #7]
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	3b04      	subs	r3, #4
 8004038:	0112      	lsls	r2, r2, #4
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	440b      	add	r3, r1
 800403e:	761a      	strb	r2, [r3, #24]
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	e000e100 	.word	0xe000e100
 8004050:	e000ed00 	.word	0xe000ed00

08004054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004054:	b480      	push	{r7}
 8004056:	b089      	sub	sp, #36	; 0x24
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	f1c3 0307 	rsb	r3, r3, #7
 800406e:	2b04      	cmp	r3, #4
 8004070:	bf28      	it	cs
 8004072:	2304      	movcs	r3, #4
 8004074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	3304      	adds	r3, #4
 800407a:	2b06      	cmp	r3, #6
 800407c:	d902      	bls.n	8004084 <NVIC_EncodePriority+0x30>
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	3b03      	subs	r3, #3
 8004082:	e000      	b.n	8004086 <NVIC_EncodePriority+0x32>
 8004084:	2300      	movs	r3, #0
 8004086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004088:	f04f 32ff 	mov.w	r2, #4294967295
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	43da      	mvns	r2, r3
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	401a      	ands	r2, r3
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800409c:	f04f 31ff 	mov.w	r1, #4294967295
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	fa01 f303 	lsl.w	r3, r1, r3
 80040a6:	43d9      	mvns	r1, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040ac:	4313      	orrs	r3, r2
         );
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3724      	adds	r7, #36	; 0x24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
	...

080040bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3b01      	subs	r3, #1
 80040c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040cc:	d301      	bcc.n	80040d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040ce:	2301      	movs	r3, #1
 80040d0:	e00f      	b.n	80040f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040d2:	4a0a      	ldr	r2, [pc, #40]	; (80040fc <SysTick_Config+0x40>)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040da:	210f      	movs	r1, #15
 80040dc:	f04f 30ff 	mov.w	r0, #4294967295
 80040e0:	f7ff ff8e 	bl	8004000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040e4:	4b05      	ldr	r3, [pc, #20]	; (80040fc <SysTick_Config+0x40>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040ea:	4b04      	ldr	r3, [pc, #16]	; (80040fc <SysTick_Config+0x40>)
 80040ec:	2207      	movs	r2, #7
 80040ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	e000e010 	.word	0xe000e010

08004100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7ff ff29 	bl	8003f60 <__NVIC_SetPriorityGrouping>
}
 800410e:	bf00      	nop
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b086      	sub	sp, #24
 800411a:	af00      	add	r7, sp, #0
 800411c:	4603      	mov	r3, r0
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	607a      	str	r2, [r7, #4]
 8004122:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004124:	2300      	movs	r3, #0
 8004126:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004128:	f7ff ff3e 	bl	8003fa8 <__NVIC_GetPriorityGrouping>
 800412c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	68b9      	ldr	r1, [r7, #8]
 8004132:	6978      	ldr	r0, [r7, #20]
 8004134:	f7ff ff8e 	bl	8004054 <NVIC_EncodePriority>
 8004138:	4602      	mov	r2, r0
 800413a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800413e:	4611      	mov	r1, r2
 8004140:	4618      	mov	r0, r3
 8004142:	f7ff ff5d 	bl	8004000 <__NVIC_SetPriority>
}
 8004146:	bf00      	nop
 8004148:	3718      	adds	r7, #24
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b082      	sub	sp, #8
 8004152:	af00      	add	r7, sp, #0
 8004154:	4603      	mov	r3, r0
 8004156:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800415c:	4618      	mov	r0, r3
 800415e:	f7ff ff31 	bl	8003fc4 <__NVIC_EnableIRQ>
}
 8004162:	bf00      	nop
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b082      	sub	sp, #8
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7ff ffa2 	bl	80040bc <SysTick_Config>
 8004178:	4603      	mov	r3, r0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
	...

08004184 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e0ac      	b.n	80042f0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4618      	mov	r0, r3
 800419c:	f000 f8b2 	bl	8004304 <DFSDM_GetChannelFromInstance>
 80041a0:	4602      	mov	r2, r0
 80041a2:	4b55      	ldr	r3, [pc, #340]	; (80042f8 <HAL_DFSDM_ChannelInit+0x174>)
 80041a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e09f      	b.n	80042f0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7fd fdfd 	bl	8001db0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80041b6:	4b51      	ldr	r3, [pc, #324]	; (80042fc <HAL_DFSDM_ChannelInit+0x178>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	3301      	adds	r3, #1
 80041bc:	4a4f      	ldr	r2, [pc, #316]	; (80042fc <HAL_DFSDM_ChannelInit+0x178>)
 80041be:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80041c0:	4b4e      	ldr	r3, [pc, #312]	; (80042fc <HAL_DFSDM_ChannelInit+0x178>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d125      	bne.n	8004214 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80041c8:	4b4d      	ldr	r3, [pc, #308]	; (8004300 <HAL_DFSDM_ChannelInit+0x17c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a4c      	ldr	r2, [pc, #304]	; (8004300 <HAL_DFSDM_ChannelInit+0x17c>)
 80041ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80041d2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80041d4:	4b4a      	ldr	r3, [pc, #296]	; (8004300 <HAL_DFSDM_ChannelInit+0x17c>)
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	4948      	ldr	r1, [pc, #288]	; (8004300 <HAL_DFSDM_ChannelInit+0x17c>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80041e2:	4b47      	ldr	r3, [pc, #284]	; (8004300 <HAL_DFSDM_ChannelInit+0x17c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a46      	ldr	r2, [pc, #280]	; (8004300 <HAL_DFSDM_ChannelInit+0x17c>)
 80041e8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80041ec:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	791b      	ldrb	r3, [r3, #4]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d108      	bne.n	8004208 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80041f6:	4b42      	ldr	r3, [pc, #264]	; (8004300 <HAL_DFSDM_ChannelInit+0x17c>)
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	3b01      	subs	r3, #1
 8004200:	041b      	lsls	r3, r3, #16
 8004202:	493f      	ldr	r1, [pc, #252]	; (8004300 <HAL_DFSDM_ChannelInit+0x17c>)
 8004204:	4313      	orrs	r3, r2
 8004206:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004208:	4b3d      	ldr	r3, [pc, #244]	; (8004300 <HAL_DFSDM_ChannelInit+0x17c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a3c      	ldr	r2, [pc, #240]	; (8004300 <HAL_DFSDM_ChannelInit+0x17c>)
 800420e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004212:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8004222:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6819      	ldr	r1, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004232:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004238:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 020f 	bic.w	r2, r2, #15
 8004250:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6819      	ldr	r1, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004260:	431a      	orrs	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8004278:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	6899      	ldr	r1, [r3, #8]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004288:	3b01      	subs	r3, #1
 800428a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800428c:	431a      	orrs	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f002 0207 	and.w	r2, r2, #7
 80042a4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	6859      	ldr	r1, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80042b8:	431a      	orrs	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042d0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 f810 	bl	8004304 <DFSDM_GetChannelFromInstance>
 80042e4:	4601      	mov	r1, r0
 80042e6:	4a04      	ldr	r2, [pc, #16]	; (80042f8 <HAL_DFSDM_ChannelInit+0x174>)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	20000220 	.word	0x20000220
 80042fc:	2000021c 	.word	0x2000021c
 8004300:	40016000 	.word	0x40016000

08004304 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a1c      	ldr	r2, [pc, #112]	; (8004380 <DFSDM_GetChannelFromInstance+0x7c>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d102      	bne.n	800431a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004314:	2300      	movs	r3, #0
 8004316:	60fb      	str	r3, [r7, #12]
 8004318:	e02b      	b.n	8004372 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a19      	ldr	r2, [pc, #100]	; (8004384 <DFSDM_GetChannelFromInstance+0x80>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d102      	bne.n	8004328 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8004322:	2301      	movs	r3, #1
 8004324:	60fb      	str	r3, [r7, #12]
 8004326:	e024      	b.n	8004372 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a17      	ldr	r2, [pc, #92]	; (8004388 <DFSDM_GetChannelFromInstance+0x84>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d102      	bne.n	8004336 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004330:	2302      	movs	r3, #2
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	e01d      	b.n	8004372 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a14      	ldr	r2, [pc, #80]	; (800438c <DFSDM_GetChannelFromInstance+0x88>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d102      	bne.n	8004344 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800433e:	2304      	movs	r3, #4
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	e016      	b.n	8004372 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a12      	ldr	r2, [pc, #72]	; (8004390 <DFSDM_GetChannelFromInstance+0x8c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d102      	bne.n	8004352 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800434c:	2305      	movs	r3, #5
 800434e:	60fb      	str	r3, [r7, #12]
 8004350:	e00f      	b.n	8004372 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a0f      	ldr	r2, [pc, #60]	; (8004394 <DFSDM_GetChannelFromInstance+0x90>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d102      	bne.n	8004360 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800435a:	2306      	movs	r3, #6
 800435c:	60fb      	str	r3, [r7, #12]
 800435e:	e008      	b.n	8004372 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a0d      	ldr	r2, [pc, #52]	; (8004398 <DFSDM_GetChannelFromInstance+0x94>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d102      	bne.n	800436e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004368:	2307      	movs	r3, #7
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	e001      	b.n	8004372 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800436e:	2303      	movs	r3, #3
 8004370:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8004372:	68fb      	ldr	r3, [r7, #12]
}
 8004374:	4618      	mov	r0, r3
 8004376:	3714      	adds	r7, #20
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	40016000 	.word	0x40016000
 8004384:	40016020 	.word	0x40016020
 8004388:	40016040 	.word	0x40016040
 800438c:	40016080 	.word	0x40016080
 8004390:	400160a0 	.word	0x400160a0
 8004394:	400160c0 	.word	0x400160c0
 8004398:	400160e0 	.word	0x400160e0

0800439c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043a6:	2300      	movs	r3, #0
 80043a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043aa:	e17f      	b.n	80046ac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	2101      	movs	r1, #1
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	fa01 f303 	lsl.w	r3, r1, r3
 80043b8:	4013      	ands	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 8171 	beq.w	80046a6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d00b      	beq.n	80043e4 <HAL_GPIO_Init+0x48>
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d007      	beq.n	80043e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043d8:	2b11      	cmp	r3, #17
 80043da:	d003      	beq.n	80043e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2b12      	cmp	r3, #18
 80043e2:	d130      	bne.n	8004446 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	2203      	movs	r2, #3
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	43db      	mvns	r3, r3
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	4013      	ands	r3, r2
 80043fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800441a:	2201      	movs	r2, #1
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	fa02 f303 	lsl.w	r3, r2, r3
 8004422:	43db      	mvns	r3, r3
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	4013      	ands	r3, r2
 8004428:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	091b      	lsrs	r3, r3, #4
 8004430:	f003 0201 	and.w	r2, r3, #1
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	fa02 f303 	lsl.w	r3, r2, r3
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	4313      	orrs	r3, r2
 800443e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f003 0303 	and.w	r3, r3, #3
 800444e:	2b03      	cmp	r3, #3
 8004450:	d118      	bne.n	8004484 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004456:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004458:	2201      	movs	r2, #1
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	fa02 f303 	lsl.w	r3, r2, r3
 8004460:	43db      	mvns	r3, r3
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	4013      	ands	r3, r2
 8004466:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	08db      	lsrs	r3, r3, #3
 800446e:	f003 0201 	and.w	r2, r3, #1
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	fa02 f303 	lsl.w	r3, r2, r3
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	4313      	orrs	r3, r2
 800447c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	005b      	lsls	r3, r3, #1
 800448e:	2203      	movs	r2, #3
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	43db      	mvns	r3, r3
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	4013      	ands	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	fa02 f303 	lsl.w	r3, r2, r3
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d003      	beq.n	80044c4 <HAL_GPIO_Init+0x128>
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	2b12      	cmp	r3, #18
 80044c2:	d123      	bne.n	800450c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	08da      	lsrs	r2, r3, #3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	3208      	adds	r2, #8
 80044cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	220f      	movs	r2, #15
 80044dc:	fa02 f303 	lsl.w	r3, r2, r3
 80044e0:	43db      	mvns	r3, r3
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	4013      	ands	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	691a      	ldr	r2, [r3, #16]
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f003 0307 	and.w	r3, r3, #7
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	fa02 f303 	lsl.w	r3, r2, r3
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	08da      	lsrs	r2, r3, #3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	3208      	adds	r2, #8
 8004506:	6939      	ldr	r1, [r7, #16]
 8004508:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	2203      	movs	r2, #3
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	43db      	mvns	r3, r3
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	4013      	ands	r3, r2
 8004522:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f003 0203 	and.w	r2, r3, #3
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	4313      	orrs	r3, r2
 8004538:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 80ac 	beq.w	80046a6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800454e:	4b5e      	ldr	r3, [pc, #376]	; (80046c8 <HAL_GPIO_Init+0x32c>)
 8004550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004552:	4a5d      	ldr	r2, [pc, #372]	; (80046c8 <HAL_GPIO_Init+0x32c>)
 8004554:	f043 0301 	orr.w	r3, r3, #1
 8004558:	6613      	str	r3, [r2, #96]	; 0x60
 800455a:	4b5b      	ldr	r3, [pc, #364]	; (80046c8 <HAL_GPIO_Init+0x32c>)
 800455c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	60bb      	str	r3, [r7, #8]
 8004564:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004566:	4a59      	ldr	r2, [pc, #356]	; (80046cc <HAL_GPIO_Init+0x330>)
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	089b      	lsrs	r3, r3, #2
 800456c:	3302      	adds	r3, #2
 800456e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004572:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f003 0303 	and.w	r3, r3, #3
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	220f      	movs	r2, #15
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	43db      	mvns	r3, r3
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	4013      	ands	r3, r2
 8004588:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004590:	d025      	beq.n	80045de <HAL_GPIO_Init+0x242>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a4e      	ldr	r2, [pc, #312]	; (80046d0 <HAL_GPIO_Init+0x334>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d01f      	beq.n	80045da <HAL_GPIO_Init+0x23e>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a4d      	ldr	r2, [pc, #308]	; (80046d4 <HAL_GPIO_Init+0x338>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d019      	beq.n	80045d6 <HAL_GPIO_Init+0x23a>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a4c      	ldr	r2, [pc, #304]	; (80046d8 <HAL_GPIO_Init+0x33c>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d013      	beq.n	80045d2 <HAL_GPIO_Init+0x236>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a4b      	ldr	r2, [pc, #300]	; (80046dc <HAL_GPIO_Init+0x340>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d00d      	beq.n	80045ce <HAL_GPIO_Init+0x232>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a4a      	ldr	r2, [pc, #296]	; (80046e0 <HAL_GPIO_Init+0x344>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d007      	beq.n	80045ca <HAL_GPIO_Init+0x22e>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a49      	ldr	r2, [pc, #292]	; (80046e4 <HAL_GPIO_Init+0x348>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d101      	bne.n	80045c6 <HAL_GPIO_Init+0x22a>
 80045c2:	2306      	movs	r3, #6
 80045c4:	e00c      	b.n	80045e0 <HAL_GPIO_Init+0x244>
 80045c6:	2307      	movs	r3, #7
 80045c8:	e00a      	b.n	80045e0 <HAL_GPIO_Init+0x244>
 80045ca:	2305      	movs	r3, #5
 80045cc:	e008      	b.n	80045e0 <HAL_GPIO_Init+0x244>
 80045ce:	2304      	movs	r3, #4
 80045d0:	e006      	b.n	80045e0 <HAL_GPIO_Init+0x244>
 80045d2:	2303      	movs	r3, #3
 80045d4:	e004      	b.n	80045e0 <HAL_GPIO_Init+0x244>
 80045d6:	2302      	movs	r3, #2
 80045d8:	e002      	b.n	80045e0 <HAL_GPIO_Init+0x244>
 80045da:	2301      	movs	r3, #1
 80045dc:	e000      	b.n	80045e0 <HAL_GPIO_Init+0x244>
 80045de:	2300      	movs	r3, #0
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	f002 0203 	and.w	r2, r2, #3
 80045e6:	0092      	lsls	r2, r2, #2
 80045e8:	4093      	lsls	r3, r2
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80045f0:	4936      	ldr	r1, [pc, #216]	; (80046cc <HAL_GPIO_Init+0x330>)
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	089b      	lsrs	r3, r3, #2
 80045f6:	3302      	adds	r3, #2
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80045fe:	4b3a      	ldr	r3, [pc, #232]	; (80046e8 <HAL_GPIO_Init+0x34c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	43db      	mvns	r3, r3
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	4013      	ands	r3, r2
 800460c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	4313      	orrs	r3, r2
 8004620:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004622:	4a31      	ldr	r2, [pc, #196]	; (80046e8 <HAL_GPIO_Init+0x34c>)
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004628:	4b2f      	ldr	r3, [pc, #188]	; (80046e8 <HAL_GPIO_Init+0x34c>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	43db      	mvns	r3, r3
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	4013      	ands	r3, r2
 8004636:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d003      	beq.n	800464c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	4313      	orrs	r3, r2
 800464a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800464c:	4a26      	ldr	r2, [pc, #152]	; (80046e8 <HAL_GPIO_Init+0x34c>)
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004652:	4b25      	ldr	r3, [pc, #148]	; (80046e8 <HAL_GPIO_Init+0x34c>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	43db      	mvns	r3, r3
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	4013      	ands	r3, r2
 8004660:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4313      	orrs	r3, r2
 8004674:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004676:	4a1c      	ldr	r2, [pc, #112]	; (80046e8 <HAL_GPIO_Init+0x34c>)
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800467c:	4b1a      	ldr	r3, [pc, #104]	; (80046e8 <HAL_GPIO_Init+0x34c>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	43db      	mvns	r3, r3
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	4013      	ands	r3, r2
 800468a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	4313      	orrs	r3, r2
 800469e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80046a0:	4a11      	ldr	r2, [pc, #68]	; (80046e8 <HAL_GPIO_Init+0x34c>)
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	3301      	adds	r3, #1
 80046aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	fa22 f303 	lsr.w	r3, r2, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f47f ae78 	bne.w	80043ac <HAL_GPIO_Init+0x10>
  }
}
 80046bc:	bf00      	nop
 80046be:	371c      	adds	r7, #28
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	40021000 	.word	0x40021000
 80046cc:	40010000 	.word	0x40010000
 80046d0:	48000400 	.word	0x48000400
 80046d4:	48000800 	.word	0x48000800
 80046d8:	48000c00 	.word	0x48000c00
 80046dc:	48001000 	.word	0x48001000
 80046e0:	48001400 	.word	0x48001400
 80046e4:	48001800 	.word	0x48001800
 80046e8:	40010400 	.word	0x40010400

080046ec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046f6:	2300      	movs	r3, #0
 80046f8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80046fa:	e0cd      	b.n	8004898 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80046fc:	2201      	movs	r2, #1
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	4013      	ands	r3, r2
 8004708:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 80c0 	beq.w	8004892 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004712:	4a68      	ldr	r2, [pc, #416]	; (80048b4 <HAL_GPIO_DeInit+0x1c8>)
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	089b      	lsrs	r3, r3, #2
 8004718:	3302      	adds	r3, #2
 800471a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800471e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f003 0303 	and.w	r3, r3, #3
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	220f      	movs	r2, #15
 800472a:	fa02 f303 	lsl.w	r3, r2, r3
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	4013      	ands	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800473a:	d025      	beq.n	8004788 <HAL_GPIO_DeInit+0x9c>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a5e      	ldr	r2, [pc, #376]	; (80048b8 <HAL_GPIO_DeInit+0x1cc>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d01f      	beq.n	8004784 <HAL_GPIO_DeInit+0x98>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a5d      	ldr	r2, [pc, #372]	; (80048bc <HAL_GPIO_DeInit+0x1d0>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d019      	beq.n	8004780 <HAL_GPIO_DeInit+0x94>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a5c      	ldr	r2, [pc, #368]	; (80048c0 <HAL_GPIO_DeInit+0x1d4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d013      	beq.n	800477c <HAL_GPIO_DeInit+0x90>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a5b      	ldr	r2, [pc, #364]	; (80048c4 <HAL_GPIO_DeInit+0x1d8>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d00d      	beq.n	8004778 <HAL_GPIO_DeInit+0x8c>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a5a      	ldr	r2, [pc, #360]	; (80048c8 <HAL_GPIO_DeInit+0x1dc>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d007      	beq.n	8004774 <HAL_GPIO_DeInit+0x88>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a59      	ldr	r2, [pc, #356]	; (80048cc <HAL_GPIO_DeInit+0x1e0>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d101      	bne.n	8004770 <HAL_GPIO_DeInit+0x84>
 800476c:	2306      	movs	r3, #6
 800476e:	e00c      	b.n	800478a <HAL_GPIO_DeInit+0x9e>
 8004770:	2307      	movs	r3, #7
 8004772:	e00a      	b.n	800478a <HAL_GPIO_DeInit+0x9e>
 8004774:	2305      	movs	r3, #5
 8004776:	e008      	b.n	800478a <HAL_GPIO_DeInit+0x9e>
 8004778:	2304      	movs	r3, #4
 800477a:	e006      	b.n	800478a <HAL_GPIO_DeInit+0x9e>
 800477c:	2303      	movs	r3, #3
 800477e:	e004      	b.n	800478a <HAL_GPIO_DeInit+0x9e>
 8004780:	2302      	movs	r3, #2
 8004782:	e002      	b.n	800478a <HAL_GPIO_DeInit+0x9e>
 8004784:	2301      	movs	r3, #1
 8004786:	e000      	b.n	800478a <HAL_GPIO_DeInit+0x9e>
 8004788:	2300      	movs	r3, #0
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	f002 0203 	and.w	r2, r2, #3
 8004790:	0092      	lsls	r2, r2, #2
 8004792:	4093      	lsls	r3, r2
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	429a      	cmp	r2, r3
 8004798:	d132      	bne.n	8004800 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800479a:	4b4d      	ldr	r3, [pc, #308]	; (80048d0 <HAL_GPIO_DeInit+0x1e4>)
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	43db      	mvns	r3, r3
 80047a2:	494b      	ldr	r1, [pc, #300]	; (80048d0 <HAL_GPIO_DeInit+0x1e4>)
 80047a4:	4013      	ands	r3, r2
 80047a6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80047a8:	4b49      	ldr	r3, [pc, #292]	; (80048d0 <HAL_GPIO_DeInit+0x1e4>)
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	43db      	mvns	r3, r3
 80047b0:	4947      	ldr	r1, [pc, #284]	; (80048d0 <HAL_GPIO_DeInit+0x1e4>)
 80047b2:	4013      	ands	r3, r2
 80047b4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80047b6:	4b46      	ldr	r3, [pc, #280]	; (80048d0 <HAL_GPIO_DeInit+0x1e4>)
 80047b8:	689a      	ldr	r2, [r3, #8]
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	43db      	mvns	r3, r3
 80047be:	4944      	ldr	r1, [pc, #272]	; (80048d0 <HAL_GPIO_DeInit+0x1e4>)
 80047c0:	4013      	ands	r3, r2
 80047c2:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80047c4:	4b42      	ldr	r3, [pc, #264]	; (80048d0 <HAL_GPIO_DeInit+0x1e4>)
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	43db      	mvns	r3, r3
 80047cc:	4940      	ldr	r1, [pc, #256]	; (80048d0 <HAL_GPIO_DeInit+0x1e4>)
 80047ce:	4013      	ands	r3, r2
 80047d0:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f003 0303 	and.w	r3, r3, #3
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	220f      	movs	r2, #15
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80047e2:	4a34      	ldr	r2, [pc, #208]	; (80048b4 <HAL_GPIO_DeInit+0x1c8>)
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	089b      	lsrs	r3, r3, #2
 80047e8:	3302      	adds	r3, #2
 80047ea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	43da      	mvns	r2, r3
 80047f2:	4830      	ldr	r0, [pc, #192]	; (80048b4 <HAL_GPIO_DeInit+0x1c8>)
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	089b      	lsrs	r3, r3, #2
 80047f8:	400a      	ands	r2, r1
 80047fa:	3302      	adds	r3, #2
 80047fc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	2103      	movs	r1, #3
 800480a:	fa01 f303 	lsl.w	r3, r1, r3
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	08da      	lsrs	r2, r3, #3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3208      	adds	r2, #8
 800481c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	f003 0307 	and.w	r3, r3, #7
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	220f      	movs	r2, #15
 800482a:	fa02 f303 	lsl.w	r3, r2, r3
 800482e:	43db      	mvns	r3, r3
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	08d2      	lsrs	r2, r2, #3
 8004834:	4019      	ands	r1, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	3208      	adds	r2, #8
 800483a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689a      	ldr	r2, [r3, #8]
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	2103      	movs	r1, #3
 8004848:	fa01 f303 	lsl.w	r3, r1, r3
 800484c:	43db      	mvns	r3, r3
 800484e:	401a      	ands	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	2101      	movs	r1, #1
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	fa01 f303 	lsl.w	r3, r1, r3
 8004860:	43db      	mvns	r3, r3
 8004862:	401a      	ands	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68da      	ldr	r2, [r3, #12]
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	2103      	movs	r1, #3
 8004872:	fa01 f303 	lsl.w	r3, r1, r3
 8004876:	43db      	mvns	r3, r3
 8004878:	401a      	ands	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004882:	2101      	movs	r1, #1
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	fa01 f303 	lsl.w	r3, r1, r3
 800488a:	43db      	mvns	r3, r3
 800488c:	401a      	ands	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	3301      	adds	r3, #1
 8004896:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	fa22 f303 	lsr.w	r3, r2, r3
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f47f af2b 	bne.w	80046fc <HAL_GPIO_DeInit+0x10>
  }
}
 80048a6:	bf00      	nop
 80048a8:	371c      	adds	r7, #28
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	40010000 	.word	0x40010000
 80048b8:	48000400 	.word	0x48000400
 80048bc:	48000800 	.word	0x48000800
 80048c0:	48000c00 	.word	0x48000c00
 80048c4:	48001000 	.word	0x48001000
 80048c8:	48001400 	.word	0x48001400
 80048cc:	48001800 	.word	0x48001800
 80048d0:	40010400 	.word	0x40010400

080048d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	460b      	mov	r3, r1
 80048de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	691a      	ldr	r2, [r3, #16]
 80048e4:	887b      	ldrh	r3, [r7, #2]
 80048e6:	4013      	ands	r3, r2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d002      	beq.n	80048f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048ec:	2301      	movs	r3, #1
 80048ee:	73fb      	strb	r3, [r7, #15]
 80048f0:	e001      	b.n	80048f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048f2:	2300      	movs	r3, #0
 80048f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	460b      	mov	r3, r1
 800490e:	807b      	strh	r3, [r7, #2]
 8004910:	4613      	mov	r3, r2
 8004912:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004914:	787b      	ldrb	r3, [r7, #1]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800491a:	887a      	ldrh	r2, [r7, #2]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004920:	e002      	b.n	8004928 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004922:	887a      	ldrh	r2, [r7, #2]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	4603      	mov	r3, r0
 800493c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800493e:	4b08      	ldr	r3, [pc, #32]	; (8004960 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004940:	695a      	ldr	r2, [r3, #20]
 8004942:	88fb      	ldrh	r3, [r7, #6]
 8004944:	4013      	ands	r3, r2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d006      	beq.n	8004958 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800494a:	4a05      	ldr	r2, [pc, #20]	; (8004960 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800494c:	88fb      	ldrh	r3, [r7, #6]
 800494e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004950:	88fb      	ldrh	r3, [r7, #6]
 8004952:	4618      	mov	r0, r3
 8004954:	f000 f806 	bl	8004964 <HAL_GPIO_EXTI_Callback>
  }
}
 8004958:	bf00      	nop
 800495a:	3708      	adds	r7, #8
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	40010400 	.word	0x40010400

08004964 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	4603      	mov	r3, r0
 800496c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b082      	sub	sp, #8
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d101      	bne.n	800498c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e081      	b.n	8004a90 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d106      	bne.n	80049a6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f7fd fa4d 	bl	8001e40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2224      	movs	r2, #36	; 0x24
 80049aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 0201 	bic.w	r2, r2, #1
 80049bc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80049ca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689a      	ldr	r2, [r3, #8]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049da:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d107      	bne.n	80049f4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049f0:	609a      	str	r2, [r3, #8]
 80049f2:	e006      	b.n	8004a02 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004a00:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d104      	bne.n	8004a14 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a12:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	6812      	ldr	r2, [r2, #0]
 8004a1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a26:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68da      	ldr	r2, [r3, #12]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a36:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	691a      	ldr	r2, [r3, #16]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	ea42 0103 	orr.w	r1, r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	021a      	lsls	r2, r3, #8
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	69d9      	ldr	r1, [r3, #28]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a1a      	ldr	r2, [r3, #32]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f042 0201 	orr.w	r2, r2, #1
 8004a70:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e021      	b.n	8004aee <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2224      	movs	r2, #36	; 0x24
 8004aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0201 	bic.w	r2, r2, #1
 8004ac0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7fd fa00 	bl	8001ec8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
	...

08004af8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b088      	sub	sp, #32
 8004afc:	af02      	add	r7, sp, #8
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	4608      	mov	r0, r1
 8004b02:	4611      	mov	r1, r2
 8004b04:	461a      	mov	r2, r3
 8004b06:	4603      	mov	r3, r0
 8004b08:	817b      	strh	r3, [r7, #10]
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	813b      	strh	r3, [r7, #8]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b20      	cmp	r3, #32
 8004b1c:	f040 80f9 	bne.w	8004d12 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <HAL_I2C_Mem_Write+0x34>
 8004b26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d105      	bne.n	8004b38 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b32:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e0ed      	b.n	8004d14 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d101      	bne.n	8004b46 <HAL_I2C_Mem_Write+0x4e>
 8004b42:	2302      	movs	r3, #2
 8004b44:	e0e6      	b.n	8004d14 <HAL_I2C_Mem_Write+0x21c>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b4e:	f7fd ff77 	bl	8002a40 <HAL_GetTick>
 8004b52:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	2319      	movs	r3, #25
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f000 fac3 	bl	80050ec <I2C_WaitOnFlagUntilTimeout>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d001      	beq.n	8004b70 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e0d1      	b.n	8004d14 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2221      	movs	r2, #33	; 0x21
 8004b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2240      	movs	r2, #64	; 0x40
 8004b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a3a      	ldr	r2, [r7, #32]
 8004b8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b98:	88f8      	ldrh	r0, [r7, #6]
 8004b9a:	893a      	ldrh	r2, [r7, #8]
 8004b9c:	8979      	ldrh	r1, [r7, #10]
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	9301      	str	r3, [sp, #4]
 8004ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 f9d3 	bl	8004f54 <I2C_RequestMemoryWrite>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d005      	beq.n	8004bc0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e0a9      	b.n	8004d14 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	2bff      	cmp	r3, #255	; 0xff
 8004bc8:	d90e      	bls.n	8004be8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	22ff      	movs	r2, #255	; 0xff
 8004bce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	8979      	ldrh	r1, [r7, #10]
 8004bd8:	2300      	movs	r3, #0
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f000 fba5 	bl	8005330 <I2C_TransferConfig>
 8004be6:	e00f      	b.n	8004c08 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	8979      	ldrh	r1, [r7, #10]
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f000 fb94 	bl	8005330 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f000 faad 	bl	800516c <I2C_WaitOnTXISFlagUntilTimeout>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d001      	beq.n	8004c1c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e07b      	b.n	8004d14 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	781a      	ldrb	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2c:	1c5a      	adds	r2, r3, #1
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c44:	3b01      	subs	r3, #1
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d034      	beq.n	8004cc0 <HAL_I2C_Mem_Write+0x1c8>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d130      	bne.n	8004cc0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c64:	2200      	movs	r2, #0
 8004c66:	2180      	movs	r1, #128	; 0x80
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f000 fa3f 	bl	80050ec <I2C_WaitOnFlagUntilTimeout>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e04d      	b.n	8004d14 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	2bff      	cmp	r3, #255	; 0xff
 8004c80:	d90e      	bls.n	8004ca0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	22ff      	movs	r2, #255	; 0xff
 8004c86:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	8979      	ldrh	r1, [r7, #10]
 8004c90:	2300      	movs	r3, #0
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f000 fb49 	bl	8005330 <I2C_TransferConfig>
 8004c9e:	e00f      	b.n	8004cc0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	8979      	ldrh	r1, [r7, #10]
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f000 fb38 	bl	8005330 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d19e      	bne.n	8004c08 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f000 fa8c 	bl	80051ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e01a      	b.n	8004d14 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	6859      	ldr	r1, [r3, #4]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	4b0a      	ldr	r3, [pc, #40]	; (8004d1c <HAL_I2C_Mem_Write+0x224>)
 8004cf2:	400b      	ands	r3, r1
 8004cf4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	e000      	b.n	8004d14 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004d12:	2302      	movs	r3, #2
  }
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3718      	adds	r7, #24
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	fe00e800 	.word	0xfe00e800

08004d20 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b088      	sub	sp, #32
 8004d24:	af02      	add	r7, sp, #8
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	4608      	mov	r0, r1
 8004d2a:	4611      	mov	r1, r2
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	4603      	mov	r3, r0
 8004d30:	817b      	strh	r3, [r7, #10]
 8004d32:	460b      	mov	r3, r1
 8004d34:	813b      	strh	r3, [r7, #8]
 8004d36:	4613      	mov	r3, r2
 8004d38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b20      	cmp	r3, #32
 8004d44:	f040 80fd 	bne.w	8004f42 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <HAL_I2C_Mem_Read+0x34>
 8004d4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d105      	bne.n	8004d60 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d5a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e0f1      	b.n	8004f44 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d101      	bne.n	8004d6e <HAL_I2C_Mem_Read+0x4e>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	e0ea      	b.n	8004f44 <HAL_I2C_Mem_Read+0x224>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d76:	f7fd fe63 	bl	8002a40 <HAL_GetTick>
 8004d7a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	2319      	movs	r3, #25
 8004d82:	2201      	movs	r2, #1
 8004d84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 f9af 	bl	80050ec <I2C_WaitOnFlagUntilTimeout>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d001      	beq.n	8004d98 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e0d5      	b.n	8004f44 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2222      	movs	r2, #34	; 0x22
 8004d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2240      	movs	r2, #64	; 0x40
 8004da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6a3a      	ldr	r2, [r7, #32]
 8004db2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004db8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004dc0:	88f8      	ldrh	r0, [r7, #6]
 8004dc2:	893a      	ldrh	r2, [r7, #8]
 8004dc4:	8979      	ldrh	r1, [r7, #10]
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	9301      	str	r3, [sp, #4]
 8004dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	4603      	mov	r3, r0
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 f913 	bl	8004ffc <I2C_RequestMemoryRead>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d005      	beq.n	8004de8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e0ad      	b.n	8004f44 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	2bff      	cmp	r3, #255	; 0xff
 8004df0:	d90e      	bls.n	8004e10 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	22ff      	movs	r2, #255	; 0xff
 8004df6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	8979      	ldrh	r1, [r7, #10]
 8004e00:	4b52      	ldr	r3, [pc, #328]	; (8004f4c <HAL_I2C_Mem_Read+0x22c>)
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 fa91 	bl	8005330 <I2C_TransferConfig>
 8004e0e:	e00f      	b.n	8004e30 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1e:	b2da      	uxtb	r2, r3
 8004e20:	8979      	ldrh	r1, [r7, #10]
 8004e22:	4b4a      	ldr	r3, [pc, #296]	; (8004f4c <HAL_I2C_Mem_Read+0x22c>)
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 fa80 	bl	8005330 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e36:	2200      	movs	r2, #0
 8004e38:	2104      	movs	r1, #4
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 f956 	bl	80050ec <I2C_WaitOnFlagUntilTimeout>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e07c      	b.n	8004f44 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	b2d2      	uxtb	r2, r2
 8004e56:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5c:	1c5a      	adds	r2, r3, #1
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e66:	3b01      	subs	r3, #1
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	3b01      	subs	r3, #1
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d034      	beq.n	8004ef0 <HAL_I2C_Mem_Read+0x1d0>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d130      	bne.n	8004ef0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	9300      	str	r3, [sp, #0]
 8004e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e94:	2200      	movs	r2, #0
 8004e96:	2180      	movs	r1, #128	; 0x80
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 f927 	bl	80050ec <I2C_WaitOnFlagUntilTimeout>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e04d      	b.n	8004f44 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	2bff      	cmp	r3, #255	; 0xff
 8004eb0:	d90e      	bls.n	8004ed0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	22ff      	movs	r2, #255	; 0xff
 8004eb6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	8979      	ldrh	r1, [r7, #10]
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f000 fa31 	bl	8005330 <I2C_TransferConfig>
 8004ece:	e00f      	b.n	8004ef0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ede:	b2da      	uxtb	r2, r3
 8004ee0:	8979      	ldrh	r1, [r7, #10]
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f000 fa20 	bl	8005330 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d19a      	bne.n	8004e30 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f000 f974 	bl	80051ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e01a      	b.n	8004f44 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2220      	movs	r2, #32
 8004f14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	6859      	ldr	r1, [r3, #4]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	4b0b      	ldr	r3, [pc, #44]	; (8004f50 <HAL_I2C_Mem_Read+0x230>)
 8004f22:	400b      	ands	r3, r1
 8004f24:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	e000      	b.n	8004f44 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004f42:	2302      	movs	r3, #2
  }
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3718      	adds	r7, #24
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	80002400 	.word	0x80002400
 8004f50:	fe00e800 	.word	0xfe00e800

08004f54 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af02      	add	r7, sp, #8
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	4608      	mov	r0, r1
 8004f5e:	4611      	mov	r1, r2
 8004f60:	461a      	mov	r2, r3
 8004f62:	4603      	mov	r3, r0
 8004f64:	817b      	strh	r3, [r7, #10]
 8004f66:	460b      	mov	r3, r1
 8004f68:	813b      	strh	r3, [r7, #8]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004f6e:	88fb      	ldrh	r3, [r7, #6]
 8004f70:	b2da      	uxtb	r2, r3
 8004f72:	8979      	ldrh	r1, [r7, #10]
 8004f74:	4b20      	ldr	r3, [pc, #128]	; (8004ff8 <I2C_RequestMemoryWrite+0xa4>)
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 f9d7 	bl	8005330 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f82:	69fa      	ldr	r2, [r7, #28]
 8004f84:	69b9      	ldr	r1, [r7, #24]
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f000 f8f0 	bl	800516c <I2C_WaitOnTXISFlagUntilTimeout>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e02c      	b.n	8004ff0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f96:	88fb      	ldrh	r3, [r7, #6]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d105      	bne.n	8004fa8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f9c:	893b      	ldrh	r3, [r7, #8]
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	629a      	str	r2, [r3, #40]	; 0x28
 8004fa6:	e015      	b.n	8004fd4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004fa8:	893b      	ldrh	r3, [r7, #8]
 8004faa:	0a1b      	lsrs	r3, r3, #8
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fb6:	69fa      	ldr	r2, [r7, #28]
 8004fb8:	69b9      	ldr	r1, [r7, #24]
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f000 f8d6 	bl	800516c <I2C_WaitOnTXISFlagUntilTimeout>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e012      	b.n	8004ff0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fca:	893b      	ldrh	r3, [r7, #8]
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	9300      	str	r3, [sp, #0]
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	2180      	movs	r1, #128	; 0x80
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f000 f884 	bl	80050ec <I2C_WaitOnFlagUntilTimeout>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e000      	b.n	8004ff0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	80002000 	.word	0x80002000

08004ffc <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af02      	add	r7, sp, #8
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	4608      	mov	r0, r1
 8005006:	4611      	mov	r1, r2
 8005008:	461a      	mov	r2, r3
 800500a:	4603      	mov	r3, r0
 800500c:	817b      	strh	r3, [r7, #10]
 800500e:	460b      	mov	r3, r1
 8005010:	813b      	strh	r3, [r7, #8]
 8005012:	4613      	mov	r3, r2
 8005014:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005016:	88fb      	ldrh	r3, [r7, #6]
 8005018:	b2da      	uxtb	r2, r3
 800501a:	8979      	ldrh	r1, [r7, #10]
 800501c:	4b20      	ldr	r3, [pc, #128]	; (80050a0 <I2C_RequestMemoryRead+0xa4>)
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	2300      	movs	r3, #0
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 f984 	bl	8005330 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005028:	69fa      	ldr	r2, [r7, #28]
 800502a:	69b9      	ldr	r1, [r7, #24]
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 f89d 	bl	800516c <I2C_WaitOnTXISFlagUntilTimeout>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d001      	beq.n	800503c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e02c      	b.n	8005096 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800503c:	88fb      	ldrh	r3, [r7, #6]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d105      	bne.n	800504e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005042:	893b      	ldrh	r3, [r7, #8]
 8005044:	b2da      	uxtb	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	629a      	str	r2, [r3, #40]	; 0x28
 800504c:	e015      	b.n	800507a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800504e:	893b      	ldrh	r3, [r7, #8]
 8005050:	0a1b      	lsrs	r3, r3, #8
 8005052:	b29b      	uxth	r3, r3
 8005054:	b2da      	uxtb	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800505c:	69fa      	ldr	r2, [r7, #28]
 800505e:	69b9      	ldr	r1, [r7, #24]
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 f883 	bl	800516c <I2C_WaitOnTXISFlagUntilTimeout>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e012      	b.n	8005096 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005070:	893b      	ldrh	r3, [r7, #8]
 8005072:	b2da      	uxtb	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	2200      	movs	r2, #0
 8005082:	2140      	movs	r1, #64	; 0x40
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f000 f831 	bl	80050ec <I2C_WaitOnFlagUntilTimeout>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e000      	b.n	8005096 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	80002000 	.word	0x80002000

080050a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d103      	bne.n	80050c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2200      	movs	r2, #0
 80050c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	f003 0301 	and.w	r3, r3, #1
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d007      	beq.n	80050e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	699a      	ldr	r2, [r3, #24]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0201 	orr.w	r2, r2, #1
 80050de:	619a      	str	r2, [r3, #24]
  }
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	603b      	str	r3, [r7, #0]
 80050f8:	4613      	mov	r3, r2
 80050fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050fc:	e022      	b.n	8005144 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005104:	d01e      	beq.n	8005144 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005106:	f7fd fc9b 	bl	8002a40 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	429a      	cmp	r2, r3
 8005114:	d302      	bcc.n	800511c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d113      	bne.n	8005144 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005120:	f043 0220 	orr.w	r2, r3, #32
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2220      	movs	r2, #32
 800512c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e00f      	b.n	8005164 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699a      	ldr	r2, [r3, #24]
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	4013      	ands	r3, r2
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	429a      	cmp	r2, r3
 8005152:	bf0c      	ite	eq
 8005154:	2301      	moveq	r3, #1
 8005156:	2300      	movne	r3, #0
 8005158:	b2db      	uxtb	r3, r3
 800515a:	461a      	mov	r2, r3
 800515c:	79fb      	ldrb	r3, [r7, #7]
 800515e:	429a      	cmp	r2, r3
 8005160:	d0cd      	beq.n	80050fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005178:	e02c      	b.n	80051d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	68b9      	ldr	r1, [r7, #8]
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 f870 	bl	8005264 <I2C_IsAcknowledgeFailed>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e02a      	b.n	80051e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005194:	d01e      	beq.n	80051d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005196:	f7fd fc53 	bl	8002a40 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d302      	bcc.n	80051ac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d113      	bne.n	80051d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b0:	f043 0220 	orr.w	r2, r3, #32
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2220      	movs	r2, #32
 80051bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e007      	b.n	80051e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d1cb      	bne.n	800517a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051f8:	e028      	b.n	800524c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	68b9      	ldr	r1, [r7, #8]
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f000 f830 	bl	8005264 <I2C_IsAcknowledgeFailed>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e026      	b.n	800525c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800520e:	f7fd fc17 	bl	8002a40 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	429a      	cmp	r2, r3
 800521c:	d302      	bcc.n	8005224 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d113      	bne.n	800524c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005228:	f043 0220 	orr.w	r2, r3, #32
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2220      	movs	r2, #32
 8005234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e007      	b.n	800525c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	f003 0320 	and.w	r3, r3, #32
 8005256:	2b20      	cmp	r3, #32
 8005258:	d1cf      	bne.n	80051fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	f003 0310 	and.w	r3, r3, #16
 800527a:	2b10      	cmp	r3, #16
 800527c:	d151      	bne.n	8005322 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800527e:	e022      	b.n	80052c6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005286:	d01e      	beq.n	80052c6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005288:	f7fd fbda 	bl	8002a40 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	429a      	cmp	r2, r3
 8005296:	d302      	bcc.n	800529e <I2C_IsAcknowledgeFailed+0x3a>
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d113      	bne.n	80052c6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a2:	f043 0220 	orr.w	r2, r3, #32
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2220      	movs	r2, #32
 80052ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e02e      	b.n	8005324 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	f003 0320 	and.w	r3, r3, #32
 80052d0:	2b20      	cmp	r3, #32
 80052d2:	d1d5      	bne.n	8005280 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2210      	movs	r2, #16
 80052da:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2220      	movs	r2, #32
 80052e2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f7ff fedd 	bl	80050a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6859      	ldr	r1, [r3, #4]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	4b0d      	ldr	r3, [pc, #52]	; (800532c <I2C_IsAcknowledgeFailed+0xc8>)
 80052f6:	400b      	ands	r3, r1
 80052f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052fe:	f043 0204 	orr.w	r2, r3, #4
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2220      	movs	r2, #32
 800530a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e000      	b.n	8005324 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	fe00e800 	.word	0xfe00e800

08005330 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	607b      	str	r3, [r7, #4]
 800533a:	460b      	mov	r3, r1
 800533c:	817b      	strh	r3, [r7, #10]
 800533e:	4613      	mov	r3, r2
 8005340:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	685a      	ldr	r2, [r3, #4]
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	0d5b      	lsrs	r3, r3, #21
 800534c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005350:	4b0d      	ldr	r3, [pc, #52]	; (8005388 <I2C_TransferConfig+0x58>)
 8005352:	430b      	orrs	r3, r1
 8005354:	43db      	mvns	r3, r3
 8005356:	ea02 0103 	and.w	r1, r2, r3
 800535a:	897b      	ldrh	r3, [r7, #10]
 800535c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005360:	7a7b      	ldrb	r3, [r7, #9]
 8005362:	041b      	lsls	r3, r3, #16
 8005364:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005368:	431a      	orrs	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	431a      	orrs	r2, r3
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	431a      	orrs	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	430a      	orrs	r2, r1
 8005378:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800537a:	bf00      	nop
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	03ff63ff 	.word	0x03ff63ff

0800538c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b20      	cmp	r3, #32
 80053a0:	d138      	bne.n	8005414 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d101      	bne.n	80053b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80053ac:	2302      	movs	r3, #2
 80053ae:	e032      	b.n	8005416 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2224      	movs	r2, #36	; 0x24
 80053bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0201 	bic.w	r2, r2, #1
 80053ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80053de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6819      	ldr	r1, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0201 	orr.w	r2, r2, #1
 80053fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2220      	movs	r2, #32
 8005404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005410:	2300      	movs	r3, #0
 8005412:	e000      	b.n	8005416 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005414:	2302      	movs	r3, #2
  }
}
 8005416:	4618      	mov	r0, r3
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005422:	b480      	push	{r7}
 8005424:	b085      	sub	sp, #20
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
 800542a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b20      	cmp	r3, #32
 8005436:	d139      	bne.n	80054ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800543e:	2b01      	cmp	r3, #1
 8005440:	d101      	bne.n	8005446 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005442:	2302      	movs	r3, #2
 8005444:	e033      	b.n	80054ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2224      	movs	r2, #36	; 0x24
 8005452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f022 0201 	bic.w	r2, r2, #1
 8005464:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005474:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	021b      	lsls	r3, r3, #8
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4313      	orrs	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f042 0201 	orr.w	r2, r2, #1
 8005496:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2220      	movs	r2, #32
 800549c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80054a8:	2300      	movs	r3, #0
 80054aa:	e000      	b.n	80054ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80054ac:	2302      	movs	r3, #2
  }
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80054ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054bc:	b08f      	sub	sp, #60	; 0x3c
 80054be:	af0a      	add	r7, sp, #40	; 0x28
 80054c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d101      	bne.n	80054cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e116      	b.n	80056fa <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d106      	bne.n	80054ec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7fc fe10 	bl	800210c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2203      	movs	r2, #3
 80054f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d102      	bne.n	8005506 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4618      	mov	r0, r3
 800550c:	f002 faca 	bl	8007aa4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	603b      	str	r3, [r7, #0]
 8005516:	687e      	ldr	r6, [r7, #4]
 8005518:	466d      	mov	r5, sp
 800551a:	f106 0410 	add.w	r4, r6, #16
 800551e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005520:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005522:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005524:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005526:	e894 0003 	ldmia.w	r4, {r0, r1}
 800552a:	e885 0003 	stmia.w	r5, {r0, r1}
 800552e:	1d33      	adds	r3, r6, #4
 8005530:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005532:	6838      	ldr	r0, [r7, #0]
 8005534:	f002 fa64 	bl	8007a00 <USB_CoreInit>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d005      	beq.n	800554a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2202      	movs	r2, #2
 8005542:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e0d7      	b.n	80056fa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2100      	movs	r1, #0
 8005550:	4618      	mov	r0, r3
 8005552:	f002 fab8 	bl	8007ac6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005556:	2300      	movs	r3, #0
 8005558:	73fb      	strb	r3, [r7, #15]
 800555a:	e04a      	b.n	80055f2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800555c:	7bfa      	ldrb	r2, [r7, #15]
 800555e:	6879      	ldr	r1, [r7, #4]
 8005560:	4613      	mov	r3, r2
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	1a9b      	subs	r3, r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	440b      	add	r3, r1
 800556a:	333d      	adds	r3, #61	; 0x3d
 800556c:	2201      	movs	r2, #1
 800556e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005570:	7bfa      	ldrb	r2, [r7, #15]
 8005572:	6879      	ldr	r1, [r7, #4]
 8005574:	4613      	mov	r3, r2
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	1a9b      	subs	r3, r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	440b      	add	r3, r1
 800557e:	333c      	adds	r3, #60	; 0x3c
 8005580:	7bfa      	ldrb	r2, [r7, #15]
 8005582:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005584:	7bfa      	ldrb	r2, [r7, #15]
 8005586:	7bfb      	ldrb	r3, [r7, #15]
 8005588:	b298      	uxth	r0, r3
 800558a:	6879      	ldr	r1, [r7, #4]
 800558c:	4613      	mov	r3, r2
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	1a9b      	subs	r3, r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	440b      	add	r3, r1
 8005596:	3342      	adds	r3, #66	; 0x42
 8005598:	4602      	mov	r2, r0
 800559a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800559c:	7bfa      	ldrb	r2, [r7, #15]
 800559e:	6879      	ldr	r1, [r7, #4]
 80055a0:	4613      	mov	r3, r2
 80055a2:	00db      	lsls	r3, r3, #3
 80055a4:	1a9b      	subs	r3, r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	440b      	add	r3, r1
 80055aa:	333f      	adds	r3, #63	; 0x3f
 80055ac:	2200      	movs	r2, #0
 80055ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80055b0:	7bfa      	ldrb	r2, [r7, #15]
 80055b2:	6879      	ldr	r1, [r7, #4]
 80055b4:	4613      	mov	r3, r2
 80055b6:	00db      	lsls	r3, r3, #3
 80055b8:	1a9b      	subs	r3, r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	440b      	add	r3, r1
 80055be:	3344      	adds	r3, #68	; 0x44
 80055c0:	2200      	movs	r2, #0
 80055c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80055c4:	7bfa      	ldrb	r2, [r7, #15]
 80055c6:	6879      	ldr	r1, [r7, #4]
 80055c8:	4613      	mov	r3, r2
 80055ca:	00db      	lsls	r3, r3, #3
 80055cc:	1a9b      	subs	r3, r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	440b      	add	r3, r1
 80055d2:	3348      	adds	r3, #72	; 0x48
 80055d4:	2200      	movs	r2, #0
 80055d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80055d8:	7bfa      	ldrb	r2, [r7, #15]
 80055da:	6879      	ldr	r1, [r7, #4]
 80055dc:	4613      	mov	r3, r2
 80055de:	00db      	lsls	r3, r3, #3
 80055e0:	1a9b      	subs	r3, r3, r2
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	440b      	add	r3, r1
 80055e6:	3350      	adds	r3, #80	; 0x50
 80055e8:	2200      	movs	r2, #0
 80055ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
 80055ee:	3301      	adds	r3, #1
 80055f0:	73fb      	strb	r3, [r7, #15]
 80055f2:	7bfa      	ldrb	r2, [r7, #15]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d3af      	bcc.n	800555c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055fc:	2300      	movs	r3, #0
 80055fe:	73fb      	strb	r3, [r7, #15]
 8005600:	e044      	b.n	800568c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005602:	7bfa      	ldrb	r2, [r7, #15]
 8005604:	6879      	ldr	r1, [r7, #4]
 8005606:	4613      	mov	r3, r2
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	1a9b      	subs	r3, r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	440b      	add	r3, r1
 8005610:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005614:	2200      	movs	r2, #0
 8005616:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005618:	7bfa      	ldrb	r2, [r7, #15]
 800561a:	6879      	ldr	r1, [r7, #4]
 800561c:	4613      	mov	r3, r2
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	1a9b      	subs	r3, r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	440b      	add	r3, r1
 8005626:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800562a:	7bfa      	ldrb	r2, [r7, #15]
 800562c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800562e:	7bfa      	ldrb	r2, [r7, #15]
 8005630:	6879      	ldr	r1, [r7, #4]
 8005632:	4613      	mov	r3, r2
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	1a9b      	subs	r3, r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	440b      	add	r3, r1
 800563c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005640:	2200      	movs	r2, #0
 8005642:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005644:	7bfa      	ldrb	r2, [r7, #15]
 8005646:	6879      	ldr	r1, [r7, #4]
 8005648:	4613      	mov	r3, r2
 800564a:	00db      	lsls	r3, r3, #3
 800564c:	1a9b      	subs	r3, r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	440b      	add	r3, r1
 8005652:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005656:	2200      	movs	r2, #0
 8005658:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800565a:	7bfa      	ldrb	r2, [r7, #15]
 800565c:	6879      	ldr	r1, [r7, #4]
 800565e:	4613      	mov	r3, r2
 8005660:	00db      	lsls	r3, r3, #3
 8005662:	1a9b      	subs	r3, r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	440b      	add	r3, r1
 8005668:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800566c:	2200      	movs	r2, #0
 800566e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005670:	7bfa      	ldrb	r2, [r7, #15]
 8005672:	6879      	ldr	r1, [r7, #4]
 8005674:	4613      	mov	r3, r2
 8005676:	00db      	lsls	r3, r3, #3
 8005678:	1a9b      	subs	r3, r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	440b      	add	r3, r1
 800567e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005682:	2200      	movs	r2, #0
 8005684:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005686:	7bfb      	ldrb	r3, [r7, #15]
 8005688:	3301      	adds	r3, #1
 800568a:	73fb      	strb	r3, [r7, #15]
 800568c:	7bfa      	ldrb	r2, [r7, #15]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	429a      	cmp	r2, r3
 8005694:	d3b5      	bcc.n	8005602 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	603b      	str	r3, [r7, #0]
 800569c:	687e      	ldr	r6, [r7, #4]
 800569e:	466d      	mov	r5, sp
 80056a0:	f106 0410 	add.w	r4, r6, #16
 80056a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80056b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80056b4:	1d33      	adds	r3, r6, #4
 80056b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056b8:	6838      	ldr	r0, [r7, #0]
 80056ba:	f002 fa2f 	bl	8007b1c <USB_DevInit>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d005      	beq.n	80056d0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2202      	movs	r2, #2
 80056c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e014      	b.n	80056fa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d102      	bne.n	80056ee <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f80a 	bl	8005702 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f002 fbbf 	bl	8007e76 <USB_DevDisconnect>

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005702 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005702:	b480      	push	{r7}
 8005704:	b085      	sub	sp, #20
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005734:	f043 0303 	orr.w	r3, r3, #3
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
	...

0800574c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005750:	4b05      	ldr	r3, [pc, #20]	; (8005768 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a04      	ldr	r2, [pc, #16]	; (8005768 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800575a:	6013      	str	r3, [r2, #0]
}
 800575c:	bf00      	nop
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	40007000 	.word	0x40007000

0800576c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800576c:	b480      	push	{r7}
 800576e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005770:	4b04      	ldr	r3, [pc, #16]	; (8005784 <HAL_PWREx_GetVoltageRange+0x18>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005778:	4618      	mov	r0, r3
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	40007000 	.word	0x40007000

08005788 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005796:	d130      	bne.n	80057fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005798:	4b23      	ldr	r3, [pc, #140]	; (8005828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80057a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057a4:	d038      	beq.n	8005818 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80057a6:	4b20      	ldr	r3, [pc, #128]	; (8005828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80057ae:	4a1e      	ldr	r2, [pc, #120]	; (8005828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80057b6:	4b1d      	ldr	r3, [pc, #116]	; (800582c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2232      	movs	r2, #50	; 0x32
 80057bc:	fb02 f303 	mul.w	r3, r2, r3
 80057c0:	4a1b      	ldr	r2, [pc, #108]	; (8005830 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80057c2:	fba2 2303 	umull	r2, r3, r2, r3
 80057c6:	0c9b      	lsrs	r3, r3, #18
 80057c8:	3301      	adds	r3, #1
 80057ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057cc:	e002      	b.n	80057d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	3b01      	subs	r3, #1
 80057d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057d4:	4b14      	ldr	r3, [pc, #80]	; (8005828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057e0:	d102      	bne.n	80057e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1f2      	bne.n	80057ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80057e8:	4b0f      	ldr	r3, [pc, #60]	; (8005828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057f4:	d110      	bne.n	8005818 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e00f      	b.n	800581a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80057fa:	4b0b      	ldr	r3, [pc, #44]	; (8005828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005806:	d007      	beq.n	8005818 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005808:	4b07      	ldr	r3, [pc, #28]	; (8005828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005810:	4a05      	ldr	r2, [pc, #20]	; (8005828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005812:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005816:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	40007000 	.word	0x40007000
 800582c:	20000000 	.word	0x20000000
 8005830:	431bde83 	.word	0x431bde83

08005834 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005838:	4b05      	ldr	r3, [pc, #20]	; (8005850 <HAL_PWREx_EnableVddUSB+0x1c>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	4a04      	ldr	r2, [pc, #16]	; (8005850 <HAL_PWREx_EnableVddUSB+0x1c>)
 800583e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005842:	6053      	str	r3, [r2, #4]
}
 8005844:	bf00      	nop
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	40007000 	.word	0x40007000

08005854 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af02      	add	r7, sp, #8
 800585a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800585c:	f7fd f8f0 	bl	8002a40 <HAL_GetTick>
 8005860:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e063      	b.n	8005934 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10b      	bne.n	8005890 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f7fc fb45 	bl	8001f10 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005886:	f241 3188 	movw	r1, #5000	; 0x1388
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 f858 	bl	8005940 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	3b01      	subs	r3, #1
 80058a0:	021a      	lsls	r2, r3, #8
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	2120      	movs	r1, #32
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f850 	bl	800595c <QSPI_WaitFlagStateUntilTimeout>
 80058bc:	4603      	mov	r3, r0
 80058be:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80058c0:	7afb      	ldrb	r3, [r7, #11]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d131      	bne.n	800592a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80058d0:	f023 0310 	bic.w	r3, r3, #16
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	6852      	ldr	r2, [r2, #4]
 80058d8:	0611      	lsls	r1, r2, #24
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	68d2      	ldr	r2, [r2, #12]
 80058de:	4311      	orrs	r1, r2
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6812      	ldr	r2, [r2, #0]
 80058e4:	430b      	orrs	r3, r1
 80058e6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	685a      	ldr	r2, [r3, #4]
 80058ee:	4b13      	ldr	r3, [pc, #76]	; (800593c <HAL_QSPI_Init+0xe8>)
 80058f0:	4013      	ands	r3, r2
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	6912      	ldr	r2, [r2, #16]
 80058f6:	0411      	lsls	r1, r2, #16
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	6952      	ldr	r2, [r2, #20]
 80058fc:	4311      	orrs	r1, r2
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	6992      	ldr	r2, [r2, #24]
 8005902:	4311      	orrs	r1, r2
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	6812      	ldr	r2, [r2, #0]
 8005908:	430b      	orrs	r3, r1
 800590a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f042 0201 	orr.w	r2, r2, #1
 800591a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8005932:	7afb      	ldrb	r3, [r7, #11]
}
 8005934:	4618      	mov	r0, r3
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	ffe0f8fe 	.word	0xffe0f8fe

08005940 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	603b      	str	r3, [r7, #0]
 8005968:	4613      	mov	r3, r2
 800596a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800596c:	e01a      	b.n	80059a4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005974:	d016      	beq.n	80059a4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005976:	f7fd f863 	bl	8002a40 <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	429a      	cmp	r2, r3
 8005984:	d302      	bcc.n	800598c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10b      	bne.n	80059a4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2204      	movs	r2, #4
 8005990:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005998:	f043 0201 	orr.w	r2, r3, #1
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e00e      	b.n	80059c2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689a      	ldr	r2, [r3, #8]
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	4013      	ands	r3, r2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	bf14      	ite	ne
 80059b2:	2301      	movne	r3, #1
 80059b4:	2300      	moveq	r3, #0
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	461a      	mov	r2, r3
 80059ba:	79fb      	ldrb	r3, [r7, #7]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d1d6      	bne.n	800596e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
	...

080059cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b088      	sub	sp, #32
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d101      	bne.n	80059de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e3d4      	b.n	8006188 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059de:	4ba1      	ldr	r3, [pc, #644]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f003 030c 	and.w	r3, r3, #12
 80059e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059e8:	4b9e      	ldr	r3, [pc, #632]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	f003 0303 	and.w	r3, r3, #3
 80059f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0310 	and.w	r3, r3, #16
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f000 80e4 	beq.w	8005bc8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d007      	beq.n	8005a16 <HAL_RCC_OscConfig+0x4a>
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	2b0c      	cmp	r3, #12
 8005a0a:	f040 808b 	bne.w	8005b24 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	f040 8087 	bne.w	8005b24 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005a16:	4b93      	ldr	r3, [pc, #588]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0302 	and.w	r3, r3, #2
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d005      	beq.n	8005a2e <HAL_RCC_OscConfig+0x62>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e3ac      	b.n	8006188 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a1a      	ldr	r2, [r3, #32]
 8005a32:	4b8c      	ldr	r3, [pc, #560]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0308 	and.w	r3, r3, #8
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d004      	beq.n	8005a48 <HAL_RCC_OscConfig+0x7c>
 8005a3e:	4b89      	ldr	r3, [pc, #548]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a46:	e005      	b.n	8005a54 <HAL_RCC_OscConfig+0x88>
 8005a48:	4b86      	ldr	r3, [pc, #536]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a4e:	091b      	lsrs	r3, r3, #4
 8005a50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d223      	bcs.n	8005aa0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f000 fd3f 	bl	80064e0 <RCC_SetFlashLatencyFromMSIRange>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d001      	beq.n	8005a6c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e38d      	b.n	8006188 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a6c:	4b7d      	ldr	r3, [pc, #500]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a7c      	ldr	r2, [pc, #496]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005a72:	f043 0308 	orr.w	r3, r3, #8
 8005a76:	6013      	str	r3, [r2, #0]
 8005a78:	4b7a      	ldr	r3, [pc, #488]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	4977      	ldr	r1, [pc, #476]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a8a:	4b76      	ldr	r3, [pc, #472]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	69db      	ldr	r3, [r3, #28]
 8005a96:	021b      	lsls	r3, r3, #8
 8005a98:	4972      	ldr	r1, [pc, #456]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	604b      	str	r3, [r1, #4]
 8005a9e:	e025      	b.n	8005aec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005aa0:	4b70      	ldr	r3, [pc, #448]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a6f      	ldr	r2, [pc, #444]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005aa6:	f043 0308 	orr.w	r3, r3, #8
 8005aaa:	6013      	str	r3, [r2, #0]
 8005aac:	4b6d      	ldr	r3, [pc, #436]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	496a      	ldr	r1, [pc, #424]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005abe:	4b69      	ldr	r3, [pc, #420]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	021b      	lsls	r3, r3, #8
 8005acc:	4965      	ldr	r1, [pc, #404]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d109      	bne.n	8005aec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	4618      	mov	r0, r3
 8005ade:	f000 fcff 	bl	80064e0 <RCC_SetFlashLatencyFromMSIRange>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e34d      	b.n	8006188 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005aec:	f000 fc36 	bl	800635c <HAL_RCC_GetSysClockFreq>
 8005af0:	4601      	mov	r1, r0
 8005af2:	4b5c      	ldr	r3, [pc, #368]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	091b      	lsrs	r3, r3, #4
 8005af8:	f003 030f 	and.w	r3, r3, #15
 8005afc:	4a5a      	ldr	r2, [pc, #360]	; (8005c68 <HAL_RCC_OscConfig+0x29c>)
 8005afe:	5cd3      	ldrb	r3, [r2, r3]
 8005b00:	f003 031f 	and.w	r3, r3, #31
 8005b04:	fa21 f303 	lsr.w	r3, r1, r3
 8005b08:	4a58      	ldr	r2, [pc, #352]	; (8005c6c <HAL_RCC_OscConfig+0x2a0>)
 8005b0a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005b0c:	4b58      	ldr	r3, [pc, #352]	; (8005c70 <HAL_RCC_OscConfig+0x2a4>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7fc ff45 	bl	80029a0 <HAL_InitTick>
 8005b16:	4603      	mov	r3, r0
 8005b18:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005b1a:	7bfb      	ldrb	r3, [r7, #15]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d052      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005b20:	7bfb      	ldrb	r3, [r7, #15]
 8005b22:	e331      	b.n	8006188 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d032      	beq.n	8005b92 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005b2c:	4b4d      	ldr	r3, [pc, #308]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a4c      	ldr	r2, [pc, #304]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005b32:	f043 0301 	orr.w	r3, r3, #1
 8005b36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b38:	f7fc ff82 	bl	8002a40 <HAL_GetTick>
 8005b3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b3e:	e008      	b.n	8005b52 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b40:	f7fc ff7e 	bl	8002a40 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d901      	bls.n	8005b52 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e31a      	b.n	8006188 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b52:	4b44      	ldr	r3, [pc, #272]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d0f0      	beq.n	8005b40 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b5e:	4b41      	ldr	r3, [pc, #260]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a40      	ldr	r2, [pc, #256]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005b64:	f043 0308 	orr.w	r3, r3, #8
 8005b68:	6013      	str	r3, [r2, #0]
 8005b6a:	4b3e      	ldr	r3, [pc, #248]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	493b      	ldr	r1, [pc, #236]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b7c:	4b39      	ldr	r3, [pc, #228]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	69db      	ldr	r3, [r3, #28]
 8005b88:	021b      	lsls	r3, r3, #8
 8005b8a:	4936      	ldr	r1, [pc, #216]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	604b      	str	r3, [r1, #4]
 8005b90:	e01a      	b.n	8005bc8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005b92:	4b34      	ldr	r3, [pc, #208]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a33      	ldr	r2, [pc, #204]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005b98:	f023 0301 	bic.w	r3, r3, #1
 8005b9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b9e:	f7fc ff4f 	bl	8002a40 <HAL_GetTick>
 8005ba2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005ba4:	e008      	b.n	8005bb8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ba6:	f7fc ff4b 	bl	8002a40 <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d901      	bls.n	8005bb8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e2e7      	b.n	8006188 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005bb8:	4b2a      	ldr	r3, [pc, #168]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0302 	and.w	r3, r3, #2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1f0      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x1da>
 8005bc4:	e000      	b.n	8005bc8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005bc6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d074      	beq.n	8005cbe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	2b08      	cmp	r3, #8
 8005bd8:	d005      	beq.n	8005be6 <HAL_RCC_OscConfig+0x21a>
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	2b0c      	cmp	r3, #12
 8005bde:	d10e      	bne.n	8005bfe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	2b03      	cmp	r3, #3
 8005be4:	d10b      	bne.n	8005bfe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005be6:	4b1f      	ldr	r3, [pc, #124]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d064      	beq.n	8005cbc <HAL_RCC_OscConfig+0x2f0>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d160      	bne.n	8005cbc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e2c4      	b.n	8006188 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c06:	d106      	bne.n	8005c16 <HAL_RCC_OscConfig+0x24a>
 8005c08:	4b16      	ldr	r3, [pc, #88]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a15      	ldr	r2, [pc, #84]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c12:	6013      	str	r3, [r2, #0]
 8005c14:	e01d      	b.n	8005c52 <HAL_RCC_OscConfig+0x286>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c1e:	d10c      	bne.n	8005c3a <HAL_RCC_OscConfig+0x26e>
 8005c20:	4b10      	ldr	r3, [pc, #64]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a0f      	ldr	r2, [pc, #60]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005c26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c2a:	6013      	str	r3, [r2, #0]
 8005c2c:	4b0d      	ldr	r3, [pc, #52]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a0c      	ldr	r2, [pc, #48]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c36:	6013      	str	r3, [r2, #0]
 8005c38:	e00b      	b.n	8005c52 <HAL_RCC_OscConfig+0x286>
 8005c3a:	4b0a      	ldr	r3, [pc, #40]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a09      	ldr	r2, [pc, #36]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c44:	6013      	str	r3, [r2, #0]
 8005c46:	4b07      	ldr	r3, [pc, #28]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a06      	ldr	r2, [pc, #24]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005c4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c50:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d01c      	beq.n	8005c94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c5a:	f7fc fef1 	bl	8002a40 <HAL_GetTick>
 8005c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c60:	e011      	b.n	8005c86 <HAL_RCC_OscConfig+0x2ba>
 8005c62:	bf00      	nop
 8005c64:	40021000 	.word	0x40021000
 8005c68:	0800c3c4 	.word	0x0800c3c4
 8005c6c:	20000000 	.word	0x20000000
 8005c70:	2000001c 	.word	0x2000001c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c74:	f7fc fee4 	bl	8002a40 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2b64      	cmp	r3, #100	; 0x64
 8005c80:	d901      	bls.n	8005c86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e280      	b.n	8006188 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c86:	4baf      	ldr	r3, [pc, #700]	; (8005f44 <HAL_RCC_OscConfig+0x578>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d0f0      	beq.n	8005c74 <HAL_RCC_OscConfig+0x2a8>
 8005c92:	e014      	b.n	8005cbe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c94:	f7fc fed4 	bl	8002a40 <HAL_GetTick>
 8005c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c9a:	e008      	b.n	8005cae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c9c:	f7fc fed0 	bl	8002a40 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	2b64      	cmp	r3, #100	; 0x64
 8005ca8:	d901      	bls.n	8005cae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e26c      	b.n	8006188 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005cae:	4ba5      	ldr	r3, [pc, #660]	; (8005f44 <HAL_RCC_OscConfig+0x578>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1f0      	bne.n	8005c9c <HAL_RCC_OscConfig+0x2d0>
 8005cba:	e000      	b.n	8005cbe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d060      	beq.n	8005d8c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	2b04      	cmp	r3, #4
 8005cce:	d005      	beq.n	8005cdc <HAL_RCC_OscConfig+0x310>
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	2b0c      	cmp	r3, #12
 8005cd4:	d119      	bne.n	8005d0a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d116      	bne.n	8005d0a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cdc:	4b99      	ldr	r3, [pc, #612]	; (8005f44 <HAL_RCC_OscConfig+0x578>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d005      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x328>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d101      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e249      	b.n	8006188 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cf4:	4b93      	ldr	r3, [pc, #588]	; (8005f44 <HAL_RCC_OscConfig+0x578>)
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	061b      	lsls	r3, r3, #24
 8005d02:	4990      	ldr	r1, [pc, #576]	; (8005f44 <HAL_RCC_OscConfig+0x578>)
 8005d04:	4313      	orrs	r3, r2
 8005d06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d08:	e040      	b.n	8005d8c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d023      	beq.n	8005d5a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d12:	4b8c      	ldr	r3, [pc, #560]	; (8005f44 <HAL_RCC_OscConfig+0x578>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a8b      	ldr	r2, [pc, #556]	; (8005f44 <HAL_RCC_OscConfig+0x578>)
 8005d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d1e:	f7fc fe8f 	bl	8002a40 <HAL_GetTick>
 8005d22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d24:	e008      	b.n	8005d38 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d26:	f7fc fe8b 	bl	8002a40 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d901      	bls.n	8005d38 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e227      	b.n	8006188 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d38:	4b82      	ldr	r3, [pc, #520]	; (8005f44 <HAL_RCC_OscConfig+0x578>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d0f0      	beq.n	8005d26 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d44:	4b7f      	ldr	r3, [pc, #508]	; (8005f44 <HAL_RCC_OscConfig+0x578>)
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	061b      	lsls	r3, r3, #24
 8005d52:	497c      	ldr	r1, [pc, #496]	; (8005f44 <HAL_RCC_OscConfig+0x578>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	604b      	str	r3, [r1, #4]
 8005d58:	e018      	b.n	8005d8c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d5a:	4b7a      	ldr	r3, [pc, #488]	; (8005f44 <HAL_RCC_OscConfig+0x578>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a79      	ldr	r2, [pc, #484]	; (8005f44 <HAL_RCC_OscConfig+0x578>)
 8005d60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d66:	f7fc fe6b 	bl	8002a40 <HAL_GetTick>
 8005d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d6c:	e008      	b.n	8005d80 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d6e:	f7fc fe67 	bl	8002a40 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d901      	bls.n	8005d80 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e203      	b.n	8006188 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d80:	4b70      	ldr	r3, [pc, #448]	; (8005f44 <HAL_RCC_OscConfig+0x578>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1f0      	bne.n	8005d6e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0308 	and.w	r3, r3, #8
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d03c      	beq.n	8005e12 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	695b      	ldr	r3, [r3, #20]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d01c      	beq.n	8005dda <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005da0:	4b68      	ldr	r3, [pc, #416]	; (8005f44 <HAL_RCC_OscConfig+0x578>)
 8005da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005da6:	4a67      	ldr	r2, [pc, #412]	; (8005f44 <HAL_RCC_OscConfig+0x578>)
 8005da8:	f043 0301 	orr.w	r3, r3, #1
 8005dac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005db0:	f7fc fe46 	bl	8002a40 <HAL_GetTick>
 8005db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005db6:	e008      	b.n	8005dca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005db8:	f7fc fe42 	bl	8002a40 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e1de      	b.n	8006188 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005dca:	4b5e      	ldr	r3, [pc, #376]	; (8005f44 <HAL_RCC_OscConfig+0x578>)
 8005dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dd0:	f003 0302 	and.w	r3, r3, #2
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d0ef      	beq.n	8005db8 <HAL_RCC_OscConfig+0x3ec>
 8005dd8:	e01b      	b.n	8005e12 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dda:	4b5a      	ldr	r3, [pc, #360]	; (8005f44 <HAL_RCC_OscConfig+0x578>)
 8005ddc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005de0:	4a58      	ldr	r2, [pc, #352]	; (8005f44 <HAL_RCC_OscConfig+0x578>)
 8005de2:	f023 0301 	bic.w	r3, r3, #1
 8005de6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dea:	f7fc fe29 	bl	8002a40 <HAL_GetTick>
 8005dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005df0:	e008      	b.n	8005e04 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005df2:	f7fc fe25 	bl	8002a40 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d901      	bls.n	8005e04 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e1c1      	b.n	8006188 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e04:	4b4f      	ldr	r3, [pc, #316]	; (8005f44 <HAL_RCC_OscConfig+0x578>)
 8005e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1ef      	bne.n	8005df2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0304 	and.w	r3, r3, #4
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 80a6 	beq.w	8005f6c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e20:	2300      	movs	r3, #0
 8005e22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005e24:	4b47      	ldr	r3, [pc, #284]	; (8005f44 <HAL_RCC_OscConfig+0x578>)
 8005e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10d      	bne.n	8005e4c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e30:	4b44      	ldr	r3, [pc, #272]	; (8005f44 <HAL_RCC_OscConfig+0x578>)
 8005e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e34:	4a43      	ldr	r2, [pc, #268]	; (8005f44 <HAL_RCC_OscConfig+0x578>)
 8005e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e3a:	6593      	str	r3, [r2, #88]	; 0x58
 8005e3c:	4b41      	ldr	r3, [pc, #260]	; (8005f44 <HAL_RCC_OscConfig+0x578>)
 8005e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e44:	60bb      	str	r3, [r7, #8]
 8005e46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e4c:	4b3e      	ldr	r3, [pc, #248]	; (8005f48 <HAL_RCC_OscConfig+0x57c>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d118      	bne.n	8005e8a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e58:	4b3b      	ldr	r3, [pc, #236]	; (8005f48 <HAL_RCC_OscConfig+0x57c>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a3a      	ldr	r2, [pc, #232]	; (8005f48 <HAL_RCC_OscConfig+0x57c>)
 8005e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e64:	f7fc fdec 	bl	8002a40 <HAL_GetTick>
 8005e68:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e6a:	e008      	b.n	8005e7e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e6c:	f7fc fde8 	bl	8002a40 <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d901      	bls.n	8005e7e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e184      	b.n	8006188 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e7e:	4b32      	ldr	r3, [pc, #200]	; (8005f48 <HAL_RCC_OscConfig+0x57c>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d0f0      	beq.n	8005e6c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d108      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x4d8>
 8005e92:	4b2c      	ldr	r3, [pc, #176]	; (8005f44 <HAL_RCC_OscConfig+0x578>)
 8005e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e98:	4a2a      	ldr	r2, [pc, #168]	; (8005f44 <HAL_RCC_OscConfig+0x578>)
 8005e9a:	f043 0301 	orr.w	r3, r3, #1
 8005e9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ea2:	e024      	b.n	8005eee <HAL_RCC_OscConfig+0x522>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	2b05      	cmp	r3, #5
 8005eaa:	d110      	bne.n	8005ece <HAL_RCC_OscConfig+0x502>
 8005eac:	4b25      	ldr	r3, [pc, #148]	; (8005f44 <HAL_RCC_OscConfig+0x578>)
 8005eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb2:	4a24      	ldr	r2, [pc, #144]	; (8005f44 <HAL_RCC_OscConfig+0x578>)
 8005eb4:	f043 0304 	orr.w	r3, r3, #4
 8005eb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ebc:	4b21      	ldr	r3, [pc, #132]	; (8005f44 <HAL_RCC_OscConfig+0x578>)
 8005ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec2:	4a20      	ldr	r2, [pc, #128]	; (8005f44 <HAL_RCC_OscConfig+0x578>)
 8005ec4:	f043 0301 	orr.w	r3, r3, #1
 8005ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ecc:	e00f      	b.n	8005eee <HAL_RCC_OscConfig+0x522>
 8005ece:	4b1d      	ldr	r3, [pc, #116]	; (8005f44 <HAL_RCC_OscConfig+0x578>)
 8005ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ed4:	4a1b      	ldr	r2, [pc, #108]	; (8005f44 <HAL_RCC_OscConfig+0x578>)
 8005ed6:	f023 0301 	bic.w	r3, r3, #1
 8005eda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ede:	4b19      	ldr	r3, [pc, #100]	; (8005f44 <HAL_RCC_OscConfig+0x578>)
 8005ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee4:	4a17      	ldr	r2, [pc, #92]	; (8005f44 <HAL_RCC_OscConfig+0x578>)
 8005ee6:	f023 0304 	bic.w	r3, r3, #4
 8005eea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d016      	beq.n	8005f24 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ef6:	f7fc fda3 	bl	8002a40 <HAL_GetTick>
 8005efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005efc:	e00a      	b.n	8005f14 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005efe:	f7fc fd9f 	bl	8002a40 <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d901      	bls.n	8005f14 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e139      	b.n	8006188 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f14:	4b0b      	ldr	r3, [pc, #44]	; (8005f44 <HAL_RCC_OscConfig+0x578>)
 8005f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d0ed      	beq.n	8005efe <HAL_RCC_OscConfig+0x532>
 8005f22:	e01a      	b.n	8005f5a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f24:	f7fc fd8c 	bl	8002a40 <HAL_GetTick>
 8005f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f2a:	e00f      	b.n	8005f4c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f2c:	f7fc fd88 	bl	8002a40 <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d906      	bls.n	8005f4c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e122      	b.n	8006188 <HAL_RCC_OscConfig+0x7bc>
 8005f42:	bf00      	nop
 8005f44:	40021000 	.word	0x40021000
 8005f48:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f4c:	4b90      	ldr	r3, [pc, #576]	; (8006190 <HAL_RCC_OscConfig+0x7c4>)
 8005f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1e8      	bne.n	8005f2c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f5a:	7ffb      	ldrb	r3, [r7, #31]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d105      	bne.n	8005f6c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f60:	4b8b      	ldr	r3, [pc, #556]	; (8006190 <HAL_RCC_OscConfig+0x7c4>)
 8005f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f64:	4a8a      	ldr	r2, [pc, #552]	; (8006190 <HAL_RCC_OscConfig+0x7c4>)
 8005f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f6a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f000 8108 	beq.w	8006186 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	f040 80d0 	bne.w	8006120 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005f80:	4b83      	ldr	r3, [pc, #524]	; (8006190 <HAL_RCC_OscConfig+0x7c4>)
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f003 0203 	and.w	r2, r3, #3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d130      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d127      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d11f      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fc0:	2a07      	cmp	r2, #7
 8005fc2:	bf14      	ite	ne
 8005fc4:	2201      	movne	r2, #1
 8005fc6:	2200      	moveq	r2, #0
 8005fc8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d113      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd8:	085b      	lsrs	r3, r3, #1
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d109      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fec:	085b      	lsrs	r3, r3, #1
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d06e      	beq.n	80060d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	2b0c      	cmp	r3, #12
 8005ffa:	d069      	beq.n	80060d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005ffc:	4b64      	ldr	r3, [pc, #400]	; (8006190 <HAL_RCC_OscConfig+0x7c4>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d105      	bne.n	8006014 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006008:	4b61      	ldr	r3, [pc, #388]	; (8006190 <HAL_RCC_OscConfig+0x7c4>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d001      	beq.n	8006018 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e0b7      	b.n	8006188 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006018:	4b5d      	ldr	r3, [pc, #372]	; (8006190 <HAL_RCC_OscConfig+0x7c4>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a5c      	ldr	r2, [pc, #368]	; (8006190 <HAL_RCC_OscConfig+0x7c4>)
 800601e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006022:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006024:	f7fc fd0c 	bl	8002a40 <HAL_GetTick>
 8006028:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800602a:	e008      	b.n	800603e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800602c:	f7fc fd08 	bl	8002a40 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b02      	cmp	r3, #2
 8006038:	d901      	bls.n	800603e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e0a4      	b.n	8006188 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800603e:	4b54      	ldr	r3, [pc, #336]	; (8006190 <HAL_RCC_OscConfig+0x7c4>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1f0      	bne.n	800602c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800604a:	4b51      	ldr	r3, [pc, #324]	; (8006190 <HAL_RCC_OscConfig+0x7c4>)
 800604c:	68da      	ldr	r2, [r3, #12]
 800604e:	4b51      	ldr	r3, [pc, #324]	; (8006194 <HAL_RCC_OscConfig+0x7c8>)
 8006050:	4013      	ands	r3, r2
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800605a:	3a01      	subs	r2, #1
 800605c:	0112      	lsls	r2, r2, #4
 800605e:	4311      	orrs	r1, r2
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006064:	0212      	lsls	r2, r2, #8
 8006066:	4311      	orrs	r1, r2
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800606c:	0852      	lsrs	r2, r2, #1
 800606e:	3a01      	subs	r2, #1
 8006070:	0552      	lsls	r2, r2, #21
 8006072:	4311      	orrs	r1, r2
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006078:	0852      	lsrs	r2, r2, #1
 800607a:	3a01      	subs	r2, #1
 800607c:	0652      	lsls	r2, r2, #25
 800607e:	4311      	orrs	r1, r2
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006084:	0912      	lsrs	r2, r2, #4
 8006086:	0452      	lsls	r2, r2, #17
 8006088:	430a      	orrs	r2, r1
 800608a:	4941      	ldr	r1, [pc, #260]	; (8006190 <HAL_RCC_OscConfig+0x7c4>)
 800608c:	4313      	orrs	r3, r2
 800608e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006090:	4b3f      	ldr	r3, [pc, #252]	; (8006190 <HAL_RCC_OscConfig+0x7c4>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a3e      	ldr	r2, [pc, #248]	; (8006190 <HAL_RCC_OscConfig+0x7c4>)
 8006096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800609a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800609c:	4b3c      	ldr	r3, [pc, #240]	; (8006190 <HAL_RCC_OscConfig+0x7c4>)
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	4a3b      	ldr	r2, [pc, #236]	; (8006190 <HAL_RCC_OscConfig+0x7c4>)
 80060a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80060a8:	f7fc fcca 	bl	8002a40 <HAL_GetTick>
 80060ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060ae:	e008      	b.n	80060c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060b0:	f7fc fcc6 	bl	8002a40 <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d901      	bls.n	80060c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e062      	b.n	8006188 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060c2:	4b33      	ldr	r3, [pc, #204]	; (8006190 <HAL_RCC_OscConfig+0x7c4>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d0f0      	beq.n	80060b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80060ce:	e05a      	b.n	8006186 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e059      	b.n	8006188 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060d4:	4b2e      	ldr	r3, [pc, #184]	; (8006190 <HAL_RCC_OscConfig+0x7c4>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d152      	bne.n	8006186 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80060e0:	4b2b      	ldr	r3, [pc, #172]	; (8006190 <HAL_RCC_OscConfig+0x7c4>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a2a      	ldr	r2, [pc, #168]	; (8006190 <HAL_RCC_OscConfig+0x7c4>)
 80060e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80060ec:	4b28      	ldr	r3, [pc, #160]	; (8006190 <HAL_RCC_OscConfig+0x7c4>)
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	4a27      	ldr	r2, [pc, #156]	; (8006190 <HAL_RCC_OscConfig+0x7c4>)
 80060f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80060f8:	f7fc fca2 	bl	8002a40 <HAL_GetTick>
 80060fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060fe:	e008      	b.n	8006112 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006100:	f7fc fc9e 	bl	8002a40 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b02      	cmp	r3, #2
 800610c:	d901      	bls.n	8006112 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e03a      	b.n	8006188 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006112:	4b1f      	ldr	r3, [pc, #124]	; (8006190 <HAL_RCC_OscConfig+0x7c4>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0f0      	beq.n	8006100 <HAL_RCC_OscConfig+0x734>
 800611e:	e032      	b.n	8006186 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	2b0c      	cmp	r3, #12
 8006124:	d02d      	beq.n	8006182 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006126:	4b1a      	ldr	r3, [pc, #104]	; (8006190 <HAL_RCC_OscConfig+0x7c4>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a19      	ldr	r2, [pc, #100]	; (8006190 <HAL_RCC_OscConfig+0x7c4>)
 800612c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006130:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8006132:	4b17      	ldr	r3, [pc, #92]	; (8006190 <HAL_RCC_OscConfig+0x7c4>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d105      	bne.n	800614a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800613e:	4b14      	ldr	r3, [pc, #80]	; (8006190 <HAL_RCC_OscConfig+0x7c4>)
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	4a13      	ldr	r2, [pc, #76]	; (8006190 <HAL_RCC_OscConfig+0x7c4>)
 8006144:	f023 0303 	bic.w	r3, r3, #3
 8006148:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800614a:	4b11      	ldr	r3, [pc, #68]	; (8006190 <HAL_RCC_OscConfig+0x7c4>)
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	4a10      	ldr	r2, [pc, #64]	; (8006190 <HAL_RCC_OscConfig+0x7c4>)
 8006150:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006158:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800615a:	f7fc fc71 	bl	8002a40 <HAL_GetTick>
 800615e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006160:	e008      	b.n	8006174 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006162:	f7fc fc6d 	bl	8002a40 <HAL_GetTick>
 8006166:	4602      	mov	r2, r0
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	2b02      	cmp	r3, #2
 800616e:	d901      	bls.n	8006174 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e009      	b.n	8006188 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006174:	4b06      	ldr	r3, [pc, #24]	; (8006190 <HAL_RCC_OscConfig+0x7c4>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d1f0      	bne.n	8006162 <HAL_RCC_OscConfig+0x796>
 8006180:	e001      	b.n	8006186 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e000      	b.n	8006188 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3720      	adds	r7, #32
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	40021000 	.word	0x40021000
 8006194:	f99d808c 	.word	0xf99d808c

08006198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d101      	bne.n	80061ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e0c8      	b.n	800633e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061ac:	4b66      	ldr	r3, [pc, #408]	; (8006348 <HAL_RCC_ClockConfig+0x1b0>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0307 	and.w	r3, r3, #7
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d910      	bls.n	80061dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061ba:	4b63      	ldr	r3, [pc, #396]	; (8006348 <HAL_RCC_ClockConfig+0x1b0>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f023 0207 	bic.w	r2, r3, #7
 80061c2:	4961      	ldr	r1, [pc, #388]	; (8006348 <HAL_RCC_ClockConfig+0x1b0>)
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ca:	4b5f      	ldr	r3, [pc, #380]	; (8006348 <HAL_RCC_ClockConfig+0x1b0>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0307 	and.w	r3, r3, #7
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d001      	beq.n	80061dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e0b0      	b.n	800633e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d04c      	beq.n	8006282 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	2b03      	cmp	r3, #3
 80061ee:	d107      	bne.n	8006200 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061f0:	4b56      	ldr	r3, [pc, #344]	; (800634c <HAL_RCC_ClockConfig+0x1b4>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d121      	bne.n	8006240 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e09e      	b.n	800633e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	2b02      	cmp	r3, #2
 8006206:	d107      	bne.n	8006218 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006208:	4b50      	ldr	r3, [pc, #320]	; (800634c <HAL_RCC_ClockConfig+0x1b4>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d115      	bne.n	8006240 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e092      	b.n	800633e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d107      	bne.n	8006230 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006220:	4b4a      	ldr	r3, [pc, #296]	; (800634c <HAL_RCC_ClockConfig+0x1b4>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0302 	and.w	r3, r3, #2
 8006228:	2b00      	cmp	r3, #0
 800622a:	d109      	bne.n	8006240 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e086      	b.n	800633e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006230:	4b46      	ldr	r3, [pc, #280]	; (800634c <HAL_RCC_ClockConfig+0x1b4>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006238:	2b00      	cmp	r3, #0
 800623a:	d101      	bne.n	8006240 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e07e      	b.n	800633e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006240:	4b42      	ldr	r3, [pc, #264]	; (800634c <HAL_RCC_ClockConfig+0x1b4>)
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f023 0203 	bic.w	r2, r3, #3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	493f      	ldr	r1, [pc, #252]	; (800634c <HAL_RCC_ClockConfig+0x1b4>)
 800624e:	4313      	orrs	r3, r2
 8006250:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006252:	f7fc fbf5 	bl	8002a40 <HAL_GetTick>
 8006256:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006258:	e00a      	b.n	8006270 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800625a:	f7fc fbf1 	bl	8002a40 <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	f241 3288 	movw	r2, #5000	; 0x1388
 8006268:	4293      	cmp	r3, r2
 800626a:	d901      	bls.n	8006270 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	e066      	b.n	800633e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006270:	4b36      	ldr	r3, [pc, #216]	; (800634c <HAL_RCC_ClockConfig+0x1b4>)
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f003 020c 	and.w	r2, r3, #12
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	429a      	cmp	r2, r3
 8006280:	d1eb      	bne.n	800625a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0302 	and.w	r3, r3, #2
 800628a:	2b00      	cmp	r3, #0
 800628c:	d008      	beq.n	80062a0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800628e:	4b2f      	ldr	r3, [pc, #188]	; (800634c <HAL_RCC_ClockConfig+0x1b4>)
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	492c      	ldr	r1, [pc, #176]	; (800634c <HAL_RCC_ClockConfig+0x1b4>)
 800629c:	4313      	orrs	r3, r2
 800629e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062a0:	4b29      	ldr	r3, [pc, #164]	; (8006348 <HAL_RCC_ClockConfig+0x1b0>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0307 	and.w	r3, r3, #7
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d210      	bcs.n	80062d0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ae:	4b26      	ldr	r3, [pc, #152]	; (8006348 <HAL_RCC_ClockConfig+0x1b0>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f023 0207 	bic.w	r2, r3, #7
 80062b6:	4924      	ldr	r1, [pc, #144]	; (8006348 <HAL_RCC_ClockConfig+0x1b0>)
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062be:	4b22      	ldr	r3, [pc, #136]	; (8006348 <HAL_RCC_ClockConfig+0x1b0>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0307 	and.w	r3, r3, #7
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d001      	beq.n	80062d0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e036      	b.n	800633e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0304 	and.w	r3, r3, #4
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d008      	beq.n	80062ee <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062dc:	4b1b      	ldr	r3, [pc, #108]	; (800634c <HAL_RCC_ClockConfig+0x1b4>)
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	4918      	ldr	r1, [pc, #96]	; (800634c <HAL_RCC_ClockConfig+0x1b4>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0308 	and.w	r3, r3, #8
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d009      	beq.n	800630e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062fa:	4b14      	ldr	r3, [pc, #80]	; (800634c <HAL_RCC_ClockConfig+0x1b4>)
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	00db      	lsls	r3, r3, #3
 8006308:	4910      	ldr	r1, [pc, #64]	; (800634c <HAL_RCC_ClockConfig+0x1b4>)
 800630a:	4313      	orrs	r3, r2
 800630c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800630e:	f000 f825 	bl	800635c <HAL_RCC_GetSysClockFreq>
 8006312:	4601      	mov	r1, r0
 8006314:	4b0d      	ldr	r3, [pc, #52]	; (800634c <HAL_RCC_ClockConfig+0x1b4>)
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	091b      	lsrs	r3, r3, #4
 800631a:	f003 030f 	and.w	r3, r3, #15
 800631e:	4a0c      	ldr	r2, [pc, #48]	; (8006350 <HAL_RCC_ClockConfig+0x1b8>)
 8006320:	5cd3      	ldrb	r3, [r2, r3]
 8006322:	f003 031f 	and.w	r3, r3, #31
 8006326:	fa21 f303 	lsr.w	r3, r1, r3
 800632a:	4a0a      	ldr	r2, [pc, #40]	; (8006354 <HAL_RCC_ClockConfig+0x1bc>)
 800632c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800632e:	4b0a      	ldr	r3, [pc, #40]	; (8006358 <HAL_RCC_ClockConfig+0x1c0>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4618      	mov	r0, r3
 8006334:	f7fc fb34 	bl	80029a0 <HAL_InitTick>
 8006338:	4603      	mov	r3, r0
 800633a:	72fb      	strb	r3, [r7, #11]

  return status;
 800633c:	7afb      	ldrb	r3, [r7, #11]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	40022000 	.word	0x40022000
 800634c:	40021000 	.word	0x40021000
 8006350:	0800c3c4 	.word	0x0800c3c4
 8006354:	20000000 	.word	0x20000000
 8006358:	2000001c 	.word	0x2000001c

0800635c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800635c:	b480      	push	{r7}
 800635e:	b089      	sub	sp, #36	; 0x24
 8006360:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006362:	2300      	movs	r3, #0
 8006364:	61fb      	str	r3, [r7, #28]
 8006366:	2300      	movs	r3, #0
 8006368:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800636a:	4b3d      	ldr	r3, [pc, #244]	; (8006460 <HAL_RCC_GetSysClockFreq+0x104>)
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f003 030c 	and.w	r3, r3, #12
 8006372:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006374:	4b3a      	ldr	r3, [pc, #232]	; (8006460 <HAL_RCC_GetSysClockFreq+0x104>)
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	f003 0303 	and.w	r3, r3, #3
 800637c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d005      	beq.n	8006390 <HAL_RCC_GetSysClockFreq+0x34>
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	2b0c      	cmp	r3, #12
 8006388:	d121      	bne.n	80063ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d11e      	bne.n	80063ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006390:	4b33      	ldr	r3, [pc, #204]	; (8006460 <HAL_RCC_GetSysClockFreq+0x104>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0308 	and.w	r3, r3, #8
 8006398:	2b00      	cmp	r3, #0
 800639a:	d107      	bne.n	80063ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800639c:	4b30      	ldr	r3, [pc, #192]	; (8006460 <HAL_RCC_GetSysClockFreq+0x104>)
 800639e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063a2:	0a1b      	lsrs	r3, r3, #8
 80063a4:	f003 030f 	and.w	r3, r3, #15
 80063a8:	61fb      	str	r3, [r7, #28]
 80063aa:	e005      	b.n	80063b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80063ac:	4b2c      	ldr	r3, [pc, #176]	; (8006460 <HAL_RCC_GetSysClockFreq+0x104>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	091b      	lsrs	r3, r3, #4
 80063b2:	f003 030f 	and.w	r3, r3, #15
 80063b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80063b8:	4a2a      	ldr	r2, [pc, #168]	; (8006464 <HAL_RCC_GetSysClockFreq+0x108>)
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10d      	bne.n	80063e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80063cc:	e00a      	b.n	80063e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	2b04      	cmp	r3, #4
 80063d2:	d102      	bne.n	80063da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80063d4:	4b24      	ldr	r3, [pc, #144]	; (8006468 <HAL_RCC_GetSysClockFreq+0x10c>)
 80063d6:	61bb      	str	r3, [r7, #24]
 80063d8:	e004      	b.n	80063e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	2b08      	cmp	r3, #8
 80063de:	d101      	bne.n	80063e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80063e0:	4b22      	ldr	r3, [pc, #136]	; (800646c <HAL_RCC_GetSysClockFreq+0x110>)
 80063e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	2b0c      	cmp	r3, #12
 80063e8:	d133      	bne.n	8006452 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80063ea:	4b1d      	ldr	r3, [pc, #116]	; (8006460 <HAL_RCC_GetSysClockFreq+0x104>)
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	f003 0303 	and.w	r3, r3, #3
 80063f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d002      	beq.n	8006400 <HAL_RCC_GetSysClockFreq+0xa4>
 80063fa:	2b03      	cmp	r3, #3
 80063fc:	d003      	beq.n	8006406 <HAL_RCC_GetSysClockFreq+0xaa>
 80063fe:	e005      	b.n	800640c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006400:	4b19      	ldr	r3, [pc, #100]	; (8006468 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006402:	617b      	str	r3, [r7, #20]
      break;
 8006404:	e005      	b.n	8006412 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006406:	4b19      	ldr	r3, [pc, #100]	; (800646c <HAL_RCC_GetSysClockFreq+0x110>)
 8006408:	617b      	str	r3, [r7, #20]
      break;
 800640a:	e002      	b.n	8006412 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	617b      	str	r3, [r7, #20]
      break;
 8006410:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006412:	4b13      	ldr	r3, [pc, #76]	; (8006460 <HAL_RCC_GetSysClockFreq+0x104>)
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	091b      	lsrs	r3, r3, #4
 8006418:	f003 0307 	and.w	r3, r3, #7
 800641c:	3301      	adds	r3, #1
 800641e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006420:	4b0f      	ldr	r3, [pc, #60]	; (8006460 <HAL_RCC_GetSysClockFreq+0x104>)
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	0a1b      	lsrs	r3, r3, #8
 8006426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	fb02 f203 	mul.w	r2, r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	fbb2 f3f3 	udiv	r3, r2, r3
 8006436:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006438:	4b09      	ldr	r3, [pc, #36]	; (8006460 <HAL_RCC_GetSysClockFreq+0x104>)
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	0e5b      	lsrs	r3, r3, #25
 800643e:	f003 0303 	and.w	r3, r3, #3
 8006442:	3301      	adds	r3, #1
 8006444:	005b      	lsls	r3, r3, #1
 8006446:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006450:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006452:	69bb      	ldr	r3, [r7, #24]
}
 8006454:	4618      	mov	r0, r3
 8006456:	3724      	adds	r7, #36	; 0x24
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr
 8006460:	40021000 	.word	0x40021000
 8006464:	0800c3dc 	.word	0x0800c3dc
 8006468:	00f42400 	.word	0x00f42400
 800646c:	007a1200 	.word	0x007a1200

08006470 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006470:	b480      	push	{r7}
 8006472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006474:	4b03      	ldr	r3, [pc, #12]	; (8006484 <HAL_RCC_GetHCLKFreq+0x14>)
 8006476:	681b      	ldr	r3, [r3, #0]
}
 8006478:	4618      	mov	r0, r3
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	20000000 	.word	0x20000000

08006488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800648c:	f7ff fff0 	bl	8006470 <HAL_RCC_GetHCLKFreq>
 8006490:	4601      	mov	r1, r0
 8006492:	4b06      	ldr	r3, [pc, #24]	; (80064ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	0a1b      	lsrs	r3, r3, #8
 8006498:	f003 0307 	and.w	r3, r3, #7
 800649c:	4a04      	ldr	r2, [pc, #16]	; (80064b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800649e:	5cd3      	ldrb	r3, [r2, r3]
 80064a0:	f003 031f 	and.w	r3, r3, #31
 80064a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	40021000 	.word	0x40021000
 80064b0:	0800c3d4 	.word	0x0800c3d4

080064b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80064b8:	f7ff ffda 	bl	8006470 <HAL_RCC_GetHCLKFreq>
 80064bc:	4601      	mov	r1, r0
 80064be:	4b06      	ldr	r3, [pc, #24]	; (80064d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	0adb      	lsrs	r3, r3, #11
 80064c4:	f003 0307 	and.w	r3, r3, #7
 80064c8:	4a04      	ldr	r2, [pc, #16]	; (80064dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80064ca:	5cd3      	ldrb	r3, [r2, r3]
 80064cc:	f003 031f 	and.w	r3, r3, #31
 80064d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	40021000 	.word	0x40021000
 80064dc:	0800c3d4 	.word	0x0800c3d4

080064e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80064e8:	2300      	movs	r3, #0
 80064ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80064ec:	4b2a      	ldr	r3, [pc, #168]	; (8006598 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d003      	beq.n	8006500 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80064f8:	f7ff f938 	bl	800576c <HAL_PWREx_GetVoltageRange>
 80064fc:	6178      	str	r0, [r7, #20]
 80064fe:	e014      	b.n	800652a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006500:	4b25      	ldr	r3, [pc, #148]	; (8006598 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006504:	4a24      	ldr	r2, [pc, #144]	; (8006598 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800650a:	6593      	str	r3, [r2, #88]	; 0x58
 800650c:	4b22      	ldr	r3, [pc, #136]	; (8006598 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800650e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006514:	60fb      	str	r3, [r7, #12]
 8006516:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006518:	f7ff f928 	bl	800576c <HAL_PWREx_GetVoltageRange>
 800651c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800651e:	4b1e      	ldr	r3, [pc, #120]	; (8006598 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006522:	4a1d      	ldr	r2, [pc, #116]	; (8006598 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006528:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006530:	d10b      	bne.n	800654a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2b80      	cmp	r3, #128	; 0x80
 8006536:	d919      	bls.n	800656c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2ba0      	cmp	r3, #160	; 0xa0
 800653c:	d902      	bls.n	8006544 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800653e:	2302      	movs	r3, #2
 8006540:	613b      	str	r3, [r7, #16]
 8006542:	e013      	b.n	800656c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006544:	2301      	movs	r3, #1
 8006546:	613b      	str	r3, [r7, #16]
 8006548:	e010      	b.n	800656c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2b80      	cmp	r3, #128	; 0x80
 800654e:	d902      	bls.n	8006556 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006550:	2303      	movs	r3, #3
 8006552:	613b      	str	r3, [r7, #16]
 8006554:	e00a      	b.n	800656c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2b80      	cmp	r3, #128	; 0x80
 800655a:	d102      	bne.n	8006562 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800655c:	2302      	movs	r3, #2
 800655e:	613b      	str	r3, [r7, #16]
 8006560:	e004      	b.n	800656c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2b70      	cmp	r3, #112	; 0x70
 8006566:	d101      	bne.n	800656c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006568:	2301      	movs	r3, #1
 800656a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800656c:	4b0b      	ldr	r3, [pc, #44]	; (800659c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f023 0207 	bic.w	r2, r3, #7
 8006574:	4909      	ldr	r1, [pc, #36]	; (800659c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	4313      	orrs	r3, r2
 800657a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800657c:	4b07      	ldr	r3, [pc, #28]	; (800659c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0307 	and.w	r3, r3, #7
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	429a      	cmp	r2, r3
 8006588:	d001      	beq.n	800658e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e000      	b.n	8006590 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3718      	adds	r7, #24
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	40021000 	.word	0x40021000
 800659c:	40022000 	.word	0x40022000

080065a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80065a8:	2300      	movs	r3, #0
 80065aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80065ac:	2300      	movs	r3, #0
 80065ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d03f      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065c4:	d01c      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80065c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065ca:	d802      	bhi.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00e      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80065d0:	e01f      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80065d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065d6:	d003      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80065d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80065dc:	d01c      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80065de:	e018      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80065e0:	4b85      	ldr	r3, [pc, #532]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	4a84      	ldr	r2, [pc, #528]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80065e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065ea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80065ec:	e015      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	3304      	adds	r3, #4
 80065f2:	2100      	movs	r1, #0
 80065f4:	4618      	mov	r0, r3
 80065f6:	f000 fac9 	bl	8006b8c <RCCEx_PLLSAI1_Config>
 80065fa:	4603      	mov	r3, r0
 80065fc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80065fe:	e00c      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	3320      	adds	r3, #32
 8006604:	2100      	movs	r1, #0
 8006606:	4618      	mov	r0, r3
 8006608:	f000 fbb0 	bl	8006d6c <RCCEx_PLLSAI2_Config>
 800660c:	4603      	mov	r3, r0
 800660e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006610:	e003      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	74fb      	strb	r3, [r7, #19]
      break;
 8006616:	e000      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006618:	bf00      	nop
    }

    if(ret == HAL_OK)
 800661a:	7cfb      	ldrb	r3, [r7, #19]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d10b      	bne.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006620:	4b75      	ldr	r3, [pc, #468]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006626:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800662e:	4972      	ldr	r1, [pc, #456]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006630:	4313      	orrs	r3, r2
 8006632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006636:	e001      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006638:	7cfb      	ldrb	r3, [r7, #19]
 800663a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d03f      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800664c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006650:	d01c      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006652:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006656:	d802      	bhi.n	800665e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00e      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800665c:	e01f      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800665e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006662:	d003      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8006664:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006668:	d01c      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800666a:	e018      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800666c:	4b62      	ldr	r3, [pc, #392]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	4a61      	ldr	r2, [pc, #388]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006676:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006678:	e015      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	3304      	adds	r3, #4
 800667e:	2100      	movs	r1, #0
 8006680:	4618      	mov	r0, r3
 8006682:	f000 fa83 	bl	8006b8c <RCCEx_PLLSAI1_Config>
 8006686:	4603      	mov	r3, r0
 8006688:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800668a:	e00c      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	3320      	adds	r3, #32
 8006690:	2100      	movs	r1, #0
 8006692:	4618      	mov	r0, r3
 8006694:	f000 fb6a 	bl	8006d6c <RCCEx_PLLSAI2_Config>
 8006698:	4603      	mov	r3, r0
 800669a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800669c:	e003      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	74fb      	strb	r3, [r7, #19]
      break;
 80066a2:	e000      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80066a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066a6:	7cfb      	ldrb	r3, [r7, #19]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10b      	bne.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80066ac:	4b52      	ldr	r3, [pc, #328]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80066ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066ba:	494f      	ldr	r1, [pc, #316]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80066c2:	e001      	b.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c4:	7cfb      	ldrb	r3, [r7, #19]
 80066c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 80a0 	beq.w	8006816 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066d6:	2300      	movs	r3, #0
 80066d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80066da:	4b47      	ldr	r3, [pc, #284]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80066dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80066e6:	2301      	movs	r3, #1
 80066e8:	e000      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80066ea:	2300      	movs	r3, #0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00d      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066f0:	4b41      	ldr	r3, [pc, #260]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80066f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066f4:	4a40      	ldr	r2, [pc, #256]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80066f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066fa:	6593      	str	r3, [r2, #88]	; 0x58
 80066fc:	4b3e      	ldr	r3, [pc, #248]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80066fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006704:	60bb      	str	r3, [r7, #8]
 8006706:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006708:	2301      	movs	r3, #1
 800670a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800670c:	4b3b      	ldr	r3, [pc, #236]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a3a      	ldr	r2, [pc, #232]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006716:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006718:	f7fc f992 	bl	8002a40 <HAL_GetTick>
 800671c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800671e:	e009      	b.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006720:	f7fc f98e 	bl	8002a40 <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	2b02      	cmp	r3, #2
 800672c:	d902      	bls.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	74fb      	strb	r3, [r7, #19]
        break;
 8006732:	e005      	b.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006734:	4b31      	ldr	r3, [pc, #196]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800673c:	2b00      	cmp	r3, #0
 800673e:	d0ef      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8006740:	7cfb      	ldrb	r3, [r7, #19]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d15c      	bne.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006746:	4b2c      	ldr	r3, [pc, #176]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800674c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006750:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d01f      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	429a      	cmp	r2, r3
 8006762:	d019      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006764:	4b24      	ldr	r3, [pc, #144]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800676a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800676e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006770:	4b21      	ldr	r3, [pc, #132]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006776:	4a20      	ldr	r2, [pc, #128]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800677c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006780:	4b1d      	ldr	r3, [pc, #116]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006786:	4a1c      	ldr	r2, [pc, #112]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800678c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006790:	4a19      	ldr	r2, [pc, #100]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d016      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a2:	f7fc f94d 	bl	8002a40 <HAL_GetTick>
 80067a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067a8:	e00b      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067aa:	f7fc f949 	bl	8002a40 <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d902      	bls.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	74fb      	strb	r3, [r7, #19]
            break;
 80067c0:	e006      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067c2:	4b0d      	ldr	r3, [pc, #52]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80067c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d0ec      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80067d0:	7cfb      	ldrb	r3, [r7, #19]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10c      	bne.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067d6:	4b08      	ldr	r3, [pc, #32]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80067d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067e6:	4904      	ldr	r1, [pc, #16]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80067ee:	e009      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067f0:	7cfb      	ldrb	r3, [r7, #19]
 80067f2:	74bb      	strb	r3, [r7, #18]
 80067f4:	e006      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80067f6:	bf00      	nop
 80067f8:	40021000 	.word	0x40021000
 80067fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006800:	7cfb      	ldrb	r3, [r7, #19]
 8006802:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006804:	7c7b      	ldrb	r3, [r7, #17]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d105      	bne.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800680a:	4b9e      	ldr	r3, [pc, #632]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800680c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800680e:	4a9d      	ldr	r2, [pc, #628]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006814:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00a      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006822:	4b98      	ldr	r3, [pc, #608]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006828:	f023 0203 	bic.w	r2, r3, #3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006830:	4994      	ldr	r1, [pc, #592]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006832:	4313      	orrs	r3, r2
 8006834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00a      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006844:	4b8f      	ldr	r3, [pc, #572]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800684a:	f023 020c 	bic.w	r2, r3, #12
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006852:	498c      	ldr	r1, [pc, #560]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006854:	4313      	orrs	r3, r2
 8006856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0304 	and.w	r3, r3, #4
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00a      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006866:	4b87      	ldr	r3, [pc, #540]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800686c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006874:	4983      	ldr	r1, [pc, #524]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006876:	4313      	orrs	r3, r2
 8006878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0308 	and.w	r3, r3, #8
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00a      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006888:	4b7e      	ldr	r3, [pc, #504]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800688a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800688e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006896:	497b      	ldr	r1, [pc, #492]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006898:	4313      	orrs	r3, r2
 800689a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0310 	and.w	r3, r3, #16
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00a      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80068aa:	4b76      	ldr	r3, [pc, #472]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80068ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068b8:	4972      	ldr	r1, [pc, #456]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0320 	and.w	r3, r3, #32
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00a      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80068cc:	4b6d      	ldr	r3, [pc, #436]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80068ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068da:	496a      	ldr	r1, [pc, #424]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80068dc:	4313      	orrs	r3, r2
 80068de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00a      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80068ee:	4b65      	ldr	r3, [pc, #404]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80068f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068fc:	4961      	ldr	r1, [pc, #388]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80068fe:	4313      	orrs	r3, r2
 8006900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00a      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006910:	4b5c      	ldr	r3, [pc, #368]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006916:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800691e:	4959      	ldr	r1, [pc, #356]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006920:	4313      	orrs	r3, r2
 8006922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00a      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006932:	4b54      	ldr	r3, [pc, #336]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006938:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006940:	4950      	ldr	r1, [pc, #320]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006942:	4313      	orrs	r3, r2
 8006944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00a      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006954:	4b4b      	ldr	r3, [pc, #300]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800695a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006962:	4948      	ldr	r1, [pc, #288]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006964:	4313      	orrs	r3, r2
 8006966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00a      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006976:	4b43      	ldr	r3, [pc, #268]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800697c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006984:	493f      	ldr	r1, [pc, #252]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006986:	4313      	orrs	r3, r2
 8006988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d028      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006998:	4b3a      	ldr	r3, [pc, #232]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800699a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800699e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069a6:	4937      	ldr	r1, [pc, #220]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80069a8:	4313      	orrs	r3, r2
 80069aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069b6:	d106      	bne.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069b8:	4b32      	ldr	r3, [pc, #200]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	4a31      	ldr	r2, [pc, #196]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80069be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069c2:	60d3      	str	r3, [r2, #12]
 80069c4:	e011      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069ce:	d10c      	bne.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	3304      	adds	r3, #4
 80069d4:	2101      	movs	r1, #1
 80069d6:	4618      	mov	r0, r3
 80069d8:	f000 f8d8 	bl	8006b8c <RCCEx_PLLSAI1_Config>
 80069dc:	4603      	mov	r3, r0
 80069de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80069e0:	7cfb      	ldrb	r3, [r7, #19]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d001      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80069e6:	7cfb      	ldrb	r3, [r7, #19]
 80069e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d028      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80069f6:	4b23      	ldr	r3, [pc, #140]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80069f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a04:	491f      	ldr	r1, [pc, #124]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006a06:	4313      	orrs	r3, r2
 8006a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a14:	d106      	bne.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a16:	4b1b      	ldr	r3, [pc, #108]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	4a1a      	ldr	r2, [pc, #104]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006a1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a20:	60d3      	str	r3, [r2, #12]
 8006a22:	e011      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a2c:	d10c      	bne.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	3304      	adds	r3, #4
 8006a32:	2101      	movs	r1, #1
 8006a34:	4618      	mov	r0, r3
 8006a36:	f000 f8a9 	bl	8006b8c <RCCEx_PLLSAI1_Config>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a3e:	7cfb      	ldrb	r3, [r7, #19]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d001      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8006a44:	7cfb      	ldrb	r3, [r7, #19]
 8006a46:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d02b      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a54:	4b0b      	ldr	r3, [pc, #44]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a62:	4908      	ldr	r1, [pc, #32]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006a64:	4313      	orrs	r3, r2
 8006a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a72:	d109      	bne.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a74:	4b03      	ldr	r3, [pc, #12]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	4a02      	ldr	r2, [pc, #8]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006a7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a7e:	60d3      	str	r3, [r2, #12]
 8006a80:	e014      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8006a82:	bf00      	nop
 8006a84:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a90:	d10c      	bne.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	3304      	adds	r3, #4
 8006a96:	2101      	movs	r1, #1
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f000 f877 	bl	8006b8c <RCCEx_PLLSAI1_Config>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006aa2:	7cfb      	ldrb	r3, [r7, #19]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d001      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8006aa8:	7cfb      	ldrb	r3, [r7, #19]
 8006aaa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d02f      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ab8:	4b2b      	ldr	r3, [pc, #172]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006abe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ac6:	4928      	ldr	r1, [pc, #160]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ad2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ad6:	d10d      	bne.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	3304      	adds	r3, #4
 8006adc:	2102      	movs	r1, #2
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f000 f854 	bl	8006b8c <RCCEx_PLLSAI1_Config>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006ae8:	7cfb      	ldrb	r3, [r7, #19]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d014      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8006aee:	7cfb      	ldrb	r3, [r7, #19]
 8006af0:	74bb      	strb	r3, [r7, #18]
 8006af2:	e011      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006af8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006afc:	d10c      	bne.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	3320      	adds	r3, #32
 8006b02:	2102      	movs	r1, #2
 8006b04:	4618      	mov	r0, r3
 8006b06:	f000 f931 	bl	8006d6c <RCCEx_PLLSAI2_Config>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006b0e:	7cfb      	ldrb	r3, [r7, #19]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d001      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8006b14:	7cfb      	ldrb	r3, [r7, #19]
 8006b16:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00a      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b24:	4b10      	ldr	r3, [pc, #64]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b2a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b32:	490d      	ldr	r1, [pc, #52]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b34:	4313      	orrs	r3, r2
 8006b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00b      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006b46:	4b08      	ldr	r3, [pc, #32]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b4c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b56:	4904      	ldr	r1, [pc, #16]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006b5e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3718      	adds	r7, #24
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	40021000 	.word	0x40021000

08006b6c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006b70:	4b05      	ldr	r3, [pc, #20]	; (8006b88 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a04      	ldr	r2, [pc, #16]	; (8006b88 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006b76:	f043 0304 	orr.w	r3, r3, #4
 8006b7a:	6013      	str	r3, [r2, #0]
}
 8006b7c:	bf00      	nop
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	40021000 	.word	0x40021000

08006b8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b96:	2300      	movs	r3, #0
 8006b98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006b9a:	4b73      	ldr	r3, [pc, #460]	; (8006d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	f003 0303 	and.w	r3, r3, #3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d018      	beq.n	8006bd8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006ba6:	4b70      	ldr	r3, [pc, #448]	; (8006d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	f003 0203 	and.w	r2, r3, #3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d10d      	bne.n	8006bd2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
       ||
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d009      	beq.n	8006bd2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006bbe:	4b6a      	ldr	r3, [pc, #424]	; (8006d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	091b      	lsrs	r3, r3, #4
 8006bc4:	f003 0307 	and.w	r3, r3, #7
 8006bc8:	1c5a      	adds	r2, r3, #1
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685b      	ldr	r3, [r3, #4]
       ||
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d044      	beq.n	8006c5c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	73fb      	strb	r3, [r7, #15]
 8006bd6:	e041      	b.n	8006c5c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d00c      	beq.n	8006bfa <RCCEx_PLLSAI1_Config+0x6e>
 8006be0:	2b03      	cmp	r3, #3
 8006be2:	d013      	beq.n	8006c0c <RCCEx_PLLSAI1_Config+0x80>
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d120      	bne.n	8006c2a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006be8:	4b5f      	ldr	r3, [pc, #380]	; (8006d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0302 	and.w	r3, r3, #2
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d11d      	bne.n	8006c30 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bf8:	e01a      	b.n	8006c30 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006bfa:	4b5b      	ldr	r3, [pc, #364]	; (8006d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d116      	bne.n	8006c34 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c0a:	e013      	b.n	8006c34 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006c0c:	4b56      	ldr	r3, [pc, #344]	; (8006d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10f      	bne.n	8006c38 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006c18:	4b53      	ldr	r3, [pc, #332]	; (8006d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d109      	bne.n	8006c38 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006c28:	e006      	b.n	8006c38 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	73fb      	strb	r3, [r7, #15]
      break;
 8006c2e:	e004      	b.n	8006c3a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006c30:	bf00      	nop
 8006c32:	e002      	b.n	8006c3a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006c34:	bf00      	nop
 8006c36:	e000      	b.n	8006c3a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006c38:	bf00      	nop
    }

    if(status == HAL_OK)
 8006c3a:	7bfb      	ldrb	r3, [r7, #15]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10d      	bne.n	8006c5c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006c40:	4b49      	ldr	r3, [pc, #292]	; (8006d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6819      	ldr	r1, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	3b01      	subs	r3, #1
 8006c52:	011b      	lsls	r3, r3, #4
 8006c54:	430b      	orrs	r3, r1
 8006c56:	4944      	ldr	r1, [pc, #272]	; (8006d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006c5c:	7bfb      	ldrb	r3, [r7, #15]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d17d      	bne.n	8006d5e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006c62:	4b41      	ldr	r3, [pc, #260]	; (8006d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a40      	ldr	r2, [pc, #256]	; (8006d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006c68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c6e:	f7fb fee7 	bl	8002a40 <HAL_GetTick>
 8006c72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c74:	e009      	b.n	8006c8a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c76:	f7fb fee3 	bl	8002a40 <HAL_GetTick>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d902      	bls.n	8006c8a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8006c84:	2303      	movs	r3, #3
 8006c86:	73fb      	strb	r3, [r7, #15]
        break;
 8006c88:	e005      	b.n	8006c96 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c8a:	4b37      	ldr	r3, [pc, #220]	; (8006d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1ef      	bne.n	8006c76 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8006c96:	7bfb      	ldrb	r3, [r7, #15]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d160      	bne.n	8006d5e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d111      	bne.n	8006cc6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ca2:	4b31      	ldr	r3, [pc, #196]	; (8006d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	6892      	ldr	r2, [r2, #8]
 8006cb2:	0211      	lsls	r1, r2, #8
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	68d2      	ldr	r2, [r2, #12]
 8006cb8:	0912      	lsrs	r2, r2, #4
 8006cba:	0452      	lsls	r2, r2, #17
 8006cbc:	430a      	orrs	r2, r1
 8006cbe:	492a      	ldr	r1, [pc, #168]	; (8006d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	610b      	str	r3, [r1, #16]
 8006cc4:	e027      	b.n	8006d16 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d112      	bne.n	8006cf2 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ccc:	4b26      	ldr	r3, [pc, #152]	; (8006d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006cd4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	6892      	ldr	r2, [r2, #8]
 8006cdc:	0211      	lsls	r1, r2, #8
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	6912      	ldr	r2, [r2, #16]
 8006ce2:	0852      	lsrs	r2, r2, #1
 8006ce4:	3a01      	subs	r2, #1
 8006ce6:	0552      	lsls	r2, r2, #21
 8006ce8:	430a      	orrs	r2, r1
 8006cea:	491f      	ldr	r1, [pc, #124]	; (8006d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006cec:	4313      	orrs	r3, r2
 8006cee:	610b      	str	r3, [r1, #16]
 8006cf0:	e011      	b.n	8006d16 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006cf2:	4b1d      	ldr	r3, [pc, #116]	; (8006d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006cfa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	6892      	ldr	r2, [r2, #8]
 8006d02:	0211      	lsls	r1, r2, #8
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	6952      	ldr	r2, [r2, #20]
 8006d08:	0852      	lsrs	r2, r2, #1
 8006d0a:	3a01      	subs	r2, #1
 8006d0c:	0652      	lsls	r2, r2, #25
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	4915      	ldr	r1, [pc, #84]	; (8006d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006d12:	4313      	orrs	r3, r2
 8006d14:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006d16:	4b14      	ldr	r3, [pc, #80]	; (8006d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a13      	ldr	r2, [pc, #76]	; (8006d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006d1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d20:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d22:	f7fb fe8d 	bl	8002a40 <HAL_GetTick>
 8006d26:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006d28:	e009      	b.n	8006d3e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d2a:	f7fb fe89 	bl	8002a40 <HAL_GetTick>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d902      	bls.n	8006d3e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	73fb      	strb	r3, [r7, #15]
          break;
 8006d3c:	e005      	b.n	8006d4a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006d3e:	4b0a      	ldr	r3, [pc, #40]	; (8006d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d0ef      	beq.n	8006d2a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8006d4a:	7bfb      	ldrb	r3, [r7, #15]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d106      	bne.n	8006d5e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006d50:	4b05      	ldr	r3, [pc, #20]	; (8006d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006d52:	691a      	ldr	r2, [r3, #16]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	4903      	ldr	r1, [pc, #12]	; (8006d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	40021000 	.word	0x40021000

08006d6c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d76:	2300      	movs	r3, #0
 8006d78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006d7a:	4b68      	ldr	r3, [pc, #416]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	f003 0303 	and.w	r3, r3, #3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d018      	beq.n	8006db8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006d86:	4b65      	ldr	r3, [pc, #404]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	f003 0203 	and.w	r2, r3, #3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d10d      	bne.n	8006db2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
       ||
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d009      	beq.n	8006db2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006d9e:	4b5f      	ldr	r3, [pc, #380]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	091b      	lsrs	r3, r3, #4
 8006da4:	f003 0307 	and.w	r3, r3, #7
 8006da8:	1c5a      	adds	r2, r3, #1
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	685b      	ldr	r3, [r3, #4]
       ||
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d044      	beq.n	8006e3c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	73fb      	strb	r3, [r7, #15]
 8006db6:	e041      	b.n	8006e3c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d00c      	beq.n	8006dda <RCCEx_PLLSAI2_Config+0x6e>
 8006dc0:	2b03      	cmp	r3, #3
 8006dc2:	d013      	beq.n	8006dec <RCCEx_PLLSAI2_Config+0x80>
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d120      	bne.n	8006e0a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006dc8:	4b54      	ldr	r3, [pc, #336]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0302 	and.w	r3, r3, #2
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d11d      	bne.n	8006e10 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006dd8:	e01a      	b.n	8006e10 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006dda:	4b50      	ldr	r3, [pc, #320]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d116      	bne.n	8006e14 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006dea:	e013      	b.n	8006e14 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006dec:	4b4b      	ldr	r3, [pc, #300]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10f      	bne.n	8006e18 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006df8:	4b48      	ldr	r3, [pc, #288]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d109      	bne.n	8006e18 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006e08:	e006      	b.n	8006e18 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	73fb      	strb	r3, [r7, #15]
      break;
 8006e0e:	e004      	b.n	8006e1a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8006e10:	bf00      	nop
 8006e12:	e002      	b.n	8006e1a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8006e14:	bf00      	nop
 8006e16:	e000      	b.n	8006e1a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8006e18:	bf00      	nop
    }

    if(status == HAL_OK)
 8006e1a:	7bfb      	ldrb	r3, [r7, #15]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10d      	bne.n	8006e3c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006e20:	4b3e      	ldr	r3, [pc, #248]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6819      	ldr	r1, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	3b01      	subs	r3, #1
 8006e32:	011b      	lsls	r3, r3, #4
 8006e34:	430b      	orrs	r3, r1
 8006e36:	4939      	ldr	r1, [pc, #228]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006e3c:	7bfb      	ldrb	r3, [r7, #15]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d167      	bne.n	8006f12 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006e42:	4b36      	ldr	r3, [pc, #216]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a35      	ldr	r2, [pc, #212]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8006e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e4e:	f7fb fdf7 	bl	8002a40 <HAL_GetTick>
 8006e52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006e54:	e009      	b.n	8006e6a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006e56:	f7fb fdf3 	bl	8002a40 <HAL_GetTick>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d902      	bls.n	8006e6a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	73fb      	strb	r3, [r7, #15]
        break;
 8006e68:	e005      	b.n	8006e76 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006e6a:	4b2c      	ldr	r3, [pc, #176]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1ef      	bne.n	8006e56 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8006e76:	7bfb      	ldrb	r3, [r7, #15]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d14a      	bne.n	8006f12 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d111      	bne.n	8006ea6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006e82:	4b26      	ldr	r3, [pc, #152]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8006e84:	695b      	ldr	r3, [r3, #20]
 8006e86:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006e8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	6892      	ldr	r2, [r2, #8]
 8006e92:	0211      	lsls	r1, r2, #8
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	68d2      	ldr	r2, [r2, #12]
 8006e98:	0912      	lsrs	r2, r2, #4
 8006e9a:	0452      	lsls	r2, r2, #17
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	491f      	ldr	r1, [pc, #124]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	614b      	str	r3, [r1, #20]
 8006ea4:	e011      	b.n	8006eca <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006ea6:	4b1d      	ldr	r3, [pc, #116]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006eae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	6892      	ldr	r2, [r2, #8]
 8006eb6:	0211      	lsls	r1, r2, #8
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	6912      	ldr	r2, [r2, #16]
 8006ebc:	0852      	lsrs	r2, r2, #1
 8006ebe:	3a01      	subs	r2, #1
 8006ec0:	0652      	lsls	r2, r2, #25
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	4915      	ldr	r1, [pc, #84]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006eca:	4b14      	ldr	r3, [pc, #80]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a13      	ldr	r2, [pc, #76]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8006ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ed4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ed6:	f7fb fdb3 	bl	8002a40 <HAL_GetTick>
 8006eda:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006edc:	e009      	b.n	8006ef2 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006ede:	f7fb fdaf 	bl	8002a40 <HAL_GetTick>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d902      	bls.n	8006ef2 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	73fb      	strb	r3, [r7, #15]
          break;
 8006ef0:	e005      	b.n	8006efe <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006ef2:	4b0a      	ldr	r3, [pc, #40]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d0ef      	beq.n	8006ede <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8006efe:	7bfb      	ldrb	r3, [r7, #15]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d106      	bne.n	8006f12 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006f04:	4b05      	ldr	r3, [pc, #20]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8006f06:	695a      	ldr	r2, [r3, #20]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	695b      	ldr	r3, [r3, #20]
 8006f0c:	4903      	ldr	r1, [pc, #12]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	40021000 	.word	0x40021000

08006f20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e095      	b.n	800705e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d108      	bne.n	8006f4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f42:	d009      	beq.n	8006f58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	61da      	str	r2, [r3, #28]
 8006f4a:	e005      	b.n	8006f58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d106      	bne.n	8006f78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7fb f810 	bl	8001f98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f98:	d902      	bls.n	8006fa0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60fb      	str	r3, [r7, #12]
 8006f9e:	e002      	b.n	8006fa6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006fa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006fa4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006fae:	d007      	beq.n	8006fc0 <HAL_SPI_Init+0xa0>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006fb8:	d002      	beq.n	8006fc0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006fd0:	431a      	orrs	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	f003 0302 	and.w	r3, r3, #2
 8006fda:	431a      	orrs	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	695b      	ldr	r3, [r3, #20]
 8006fe0:	f003 0301 	and.w	r3, r3, #1
 8006fe4:	431a      	orrs	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fee:	431a      	orrs	r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	69db      	ldr	r3, [r3, #28]
 8006ff4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ff8:	431a      	orrs	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007002:	ea42 0103 	orr.w	r1, r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	0c1b      	lsrs	r3, r3, #16
 800701c:	f003 0204 	and.w	r2, r3, #4
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007024:	f003 0310 	and.w	r3, r3, #16
 8007028:	431a      	orrs	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800702e:	f003 0308 	and.w	r3, r3, #8
 8007032:	431a      	orrs	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800703c:	ea42 0103 	orr.w	r1, r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	430a      	orrs	r2, r1
 800704c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b082      	sub	sp, #8
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d101      	bne.n	8007078 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e040      	b.n	80070fa <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800707c:	2b00      	cmp	r3, #0
 800707e:	d106      	bne.n	800708e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f7fa ffc9 	bl	8002020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2224      	movs	r2, #36	; 0x24
 8007092:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f022 0201 	bic.w	r2, r2, #1
 80070a2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 f8bf 	bl	8007228 <UART_SetConfig>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d101      	bne.n	80070b4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e022      	b.n	80070fa <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d002      	beq.n	80070c2 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 fb3d 	bl	800773c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	685a      	ldr	r2, [r3, #4]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	689a      	ldr	r2, [r3, #8]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070e0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f042 0201 	orr.w	r2, r2, #1
 80070f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 fbc4 	bl	8007880 <UART_CheckIdleState>
 80070f8:	4603      	mov	r3, r0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b08a      	sub	sp, #40	; 0x28
 8007106:	af02      	add	r7, sp, #8
 8007108:	60f8      	str	r0, [r7, #12]
 800710a:	60b9      	str	r1, [r7, #8]
 800710c:	603b      	str	r3, [r7, #0]
 800710e:	4613      	mov	r3, r2
 8007110:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007116:	2b20      	cmp	r3, #32
 8007118:	f040 8081 	bne.w	800721e <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d002      	beq.n	8007128 <HAL_UART_Transmit+0x26>
 8007122:	88fb      	ldrh	r3, [r7, #6]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d101      	bne.n	800712c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e079      	b.n	8007220 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007132:	2b01      	cmp	r3, #1
 8007134:	d101      	bne.n	800713a <HAL_UART_Transmit+0x38>
 8007136:	2302      	movs	r3, #2
 8007138:	e072      	b.n	8007220 <HAL_UART_Transmit+0x11e>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2200      	movs	r2, #0
 8007146:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2221      	movs	r2, #33	; 0x21
 800714c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800714e:	f7fb fc77 	bl	8002a40 <HAL_GetTick>
 8007152:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	88fa      	ldrh	r2, [r7, #6]
 8007158:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	88fa      	ldrh	r2, [r7, #6]
 8007160:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800716c:	d108      	bne.n	8007180 <HAL_UART_Transmit+0x7e>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d104      	bne.n	8007180 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8007176:	2300      	movs	r3, #0
 8007178:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	61bb      	str	r3, [r7, #24]
 800717e:	e003      	b.n	8007188 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007184:	2300      	movs	r3, #0
 8007186:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2200      	movs	r2, #0
 800718c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8007190:	e02d      	b.n	80071ee <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	9300      	str	r3, [sp, #0]
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	2200      	movs	r2, #0
 800719a:	2180      	movs	r1, #128	; 0x80
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f000 fbb4 	bl	800790a <UART_WaitOnFlagUntilTimeout>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d001      	beq.n	80071ac <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e039      	b.n	8007220 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d10b      	bne.n	80071ca <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	881a      	ldrh	r2, [r3, #0]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071be:	b292      	uxth	r2, r2
 80071c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	3302      	adds	r3, #2
 80071c6:	61bb      	str	r3, [r7, #24]
 80071c8:	e008      	b.n	80071dc <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	781a      	ldrb	r2, [r3, #0]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	b292      	uxth	r2, r2
 80071d4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	3301      	adds	r3, #1
 80071da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	3b01      	subs	r3, #1
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1cb      	bne.n	8007192 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	9300      	str	r3, [sp, #0]
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	2200      	movs	r2, #0
 8007202:	2140      	movs	r1, #64	; 0x40
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f000 fb80 	bl	800790a <UART_WaitOnFlagUntilTimeout>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d001      	beq.n	8007214 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	e005      	b.n	8007220 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2220      	movs	r2, #32
 8007218:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800721a:	2300      	movs	r3, #0
 800721c:	e000      	b.n	8007220 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800721e:	2302      	movs	r3, #2
  }
}
 8007220:	4618      	mov	r0, r3
 8007222:	3720      	adds	r7, #32
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007228:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800722c:	b088      	sub	sp, #32
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007232:	2300      	movs	r3, #0
 8007234:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	689a      	ldr	r2, [r3, #8]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	431a      	orrs	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	695b      	ldr	r3, [r3, #20]
 8007244:	431a      	orrs	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	69db      	ldr	r3, [r3, #28]
 800724a:	4313      	orrs	r3, r2
 800724c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	4bac      	ldr	r3, [pc, #688]	; (8007508 <UART_SetConfig+0x2e0>)
 8007256:	4013      	ands	r3, r2
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	6812      	ldr	r2, [r2, #0]
 800725c:	69f9      	ldr	r1, [r7, #28]
 800725e:	430b      	orrs	r3, r1
 8007260:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	68da      	ldr	r2, [r3, #12]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	430a      	orrs	r2, r1
 8007276:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4aa2      	ldr	r2, [pc, #648]	; (800750c <UART_SetConfig+0x2e4>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d004      	beq.n	8007292 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a1b      	ldr	r3, [r3, #32]
 800728c:	69fa      	ldr	r2, [r7, #28]
 800728e:	4313      	orrs	r3, r2
 8007290:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	69fa      	ldr	r2, [r7, #28]
 80072a2:	430a      	orrs	r2, r1
 80072a4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a99      	ldr	r2, [pc, #612]	; (8007510 <UART_SetConfig+0x2e8>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d121      	bne.n	80072f4 <UART_SetConfig+0xcc>
 80072b0:	4b98      	ldr	r3, [pc, #608]	; (8007514 <UART_SetConfig+0x2ec>)
 80072b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072b6:	f003 0303 	and.w	r3, r3, #3
 80072ba:	2b03      	cmp	r3, #3
 80072bc:	d816      	bhi.n	80072ec <UART_SetConfig+0xc4>
 80072be:	a201      	add	r2, pc, #4	; (adr r2, 80072c4 <UART_SetConfig+0x9c>)
 80072c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c4:	080072d5 	.word	0x080072d5
 80072c8:	080072e1 	.word	0x080072e1
 80072cc:	080072db 	.word	0x080072db
 80072d0:	080072e7 	.word	0x080072e7
 80072d4:	2301      	movs	r3, #1
 80072d6:	76fb      	strb	r3, [r7, #27]
 80072d8:	e0e8      	b.n	80074ac <UART_SetConfig+0x284>
 80072da:	2302      	movs	r3, #2
 80072dc:	76fb      	strb	r3, [r7, #27]
 80072de:	e0e5      	b.n	80074ac <UART_SetConfig+0x284>
 80072e0:	2304      	movs	r3, #4
 80072e2:	76fb      	strb	r3, [r7, #27]
 80072e4:	e0e2      	b.n	80074ac <UART_SetConfig+0x284>
 80072e6:	2308      	movs	r3, #8
 80072e8:	76fb      	strb	r3, [r7, #27]
 80072ea:	e0df      	b.n	80074ac <UART_SetConfig+0x284>
 80072ec:	2310      	movs	r3, #16
 80072ee:	76fb      	strb	r3, [r7, #27]
 80072f0:	bf00      	nop
 80072f2:	e0db      	b.n	80074ac <UART_SetConfig+0x284>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a87      	ldr	r2, [pc, #540]	; (8007518 <UART_SetConfig+0x2f0>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d134      	bne.n	8007368 <UART_SetConfig+0x140>
 80072fe:	4b85      	ldr	r3, [pc, #532]	; (8007514 <UART_SetConfig+0x2ec>)
 8007300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007304:	f003 030c 	and.w	r3, r3, #12
 8007308:	2b0c      	cmp	r3, #12
 800730a:	d829      	bhi.n	8007360 <UART_SetConfig+0x138>
 800730c:	a201      	add	r2, pc, #4	; (adr r2, 8007314 <UART_SetConfig+0xec>)
 800730e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007312:	bf00      	nop
 8007314:	08007349 	.word	0x08007349
 8007318:	08007361 	.word	0x08007361
 800731c:	08007361 	.word	0x08007361
 8007320:	08007361 	.word	0x08007361
 8007324:	08007355 	.word	0x08007355
 8007328:	08007361 	.word	0x08007361
 800732c:	08007361 	.word	0x08007361
 8007330:	08007361 	.word	0x08007361
 8007334:	0800734f 	.word	0x0800734f
 8007338:	08007361 	.word	0x08007361
 800733c:	08007361 	.word	0x08007361
 8007340:	08007361 	.word	0x08007361
 8007344:	0800735b 	.word	0x0800735b
 8007348:	2300      	movs	r3, #0
 800734a:	76fb      	strb	r3, [r7, #27]
 800734c:	e0ae      	b.n	80074ac <UART_SetConfig+0x284>
 800734e:	2302      	movs	r3, #2
 8007350:	76fb      	strb	r3, [r7, #27]
 8007352:	e0ab      	b.n	80074ac <UART_SetConfig+0x284>
 8007354:	2304      	movs	r3, #4
 8007356:	76fb      	strb	r3, [r7, #27]
 8007358:	e0a8      	b.n	80074ac <UART_SetConfig+0x284>
 800735a:	2308      	movs	r3, #8
 800735c:	76fb      	strb	r3, [r7, #27]
 800735e:	e0a5      	b.n	80074ac <UART_SetConfig+0x284>
 8007360:	2310      	movs	r3, #16
 8007362:	76fb      	strb	r3, [r7, #27]
 8007364:	bf00      	nop
 8007366:	e0a1      	b.n	80074ac <UART_SetConfig+0x284>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a6b      	ldr	r2, [pc, #428]	; (800751c <UART_SetConfig+0x2f4>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d120      	bne.n	80073b4 <UART_SetConfig+0x18c>
 8007372:	4b68      	ldr	r3, [pc, #416]	; (8007514 <UART_SetConfig+0x2ec>)
 8007374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007378:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800737c:	2b10      	cmp	r3, #16
 800737e:	d00f      	beq.n	80073a0 <UART_SetConfig+0x178>
 8007380:	2b10      	cmp	r3, #16
 8007382:	d802      	bhi.n	800738a <UART_SetConfig+0x162>
 8007384:	2b00      	cmp	r3, #0
 8007386:	d005      	beq.n	8007394 <UART_SetConfig+0x16c>
 8007388:	e010      	b.n	80073ac <UART_SetConfig+0x184>
 800738a:	2b20      	cmp	r3, #32
 800738c:	d005      	beq.n	800739a <UART_SetConfig+0x172>
 800738e:	2b30      	cmp	r3, #48	; 0x30
 8007390:	d009      	beq.n	80073a6 <UART_SetConfig+0x17e>
 8007392:	e00b      	b.n	80073ac <UART_SetConfig+0x184>
 8007394:	2300      	movs	r3, #0
 8007396:	76fb      	strb	r3, [r7, #27]
 8007398:	e088      	b.n	80074ac <UART_SetConfig+0x284>
 800739a:	2302      	movs	r3, #2
 800739c:	76fb      	strb	r3, [r7, #27]
 800739e:	e085      	b.n	80074ac <UART_SetConfig+0x284>
 80073a0:	2304      	movs	r3, #4
 80073a2:	76fb      	strb	r3, [r7, #27]
 80073a4:	e082      	b.n	80074ac <UART_SetConfig+0x284>
 80073a6:	2308      	movs	r3, #8
 80073a8:	76fb      	strb	r3, [r7, #27]
 80073aa:	e07f      	b.n	80074ac <UART_SetConfig+0x284>
 80073ac:	2310      	movs	r3, #16
 80073ae:	76fb      	strb	r3, [r7, #27]
 80073b0:	bf00      	nop
 80073b2:	e07b      	b.n	80074ac <UART_SetConfig+0x284>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a59      	ldr	r2, [pc, #356]	; (8007520 <UART_SetConfig+0x2f8>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d120      	bne.n	8007400 <UART_SetConfig+0x1d8>
 80073be:	4b55      	ldr	r3, [pc, #340]	; (8007514 <UART_SetConfig+0x2ec>)
 80073c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80073c8:	2b40      	cmp	r3, #64	; 0x40
 80073ca:	d00f      	beq.n	80073ec <UART_SetConfig+0x1c4>
 80073cc:	2b40      	cmp	r3, #64	; 0x40
 80073ce:	d802      	bhi.n	80073d6 <UART_SetConfig+0x1ae>
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d005      	beq.n	80073e0 <UART_SetConfig+0x1b8>
 80073d4:	e010      	b.n	80073f8 <UART_SetConfig+0x1d0>
 80073d6:	2b80      	cmp	r3, #128	; 0x80
 80073d8:	d005      	beq.n	80073e6 <UART_SetConfig+0x1be>
 80073da:	2bc0      	cmp	r3, #192	; 0xc0
 80073dc:	d009      	beq.n	80073f2 <UART_SetConfig+0x1ca>
 80073de:	e00b      	b.n	80073f8 <UART_SetConfig+0x1d0>
 80073e0:	2300      	movs	r3, #0
 80073e2:	76fb      	strb	r3, [r7, #27]
 80073e4:	e062      	b.n	80074ac <UART_SetConfig+0x284>
 80073e6:	2302      	movs	r3, #2
 80073e8:	76fb      	strb	r3, [r7, #27]
 80073ea:	e05f      	b.n	80074ac <UART_SetConfig+0x284>
 80073ec:	2304      	movs	r3, #4
 80073ee:	76fb      	strb	r3, [r7, #27]
 80073f0:	e05c      	b.n	80074ac <UART_SetConfig+0x284>
 80073f2:	2308      	movs	r3, #8
 80073f4:	76fb      	strb	r3, [r7, #27]
 80073f6:	e059      	b.n	80074ac <UART_SetConfig+0x284>
 80073f8:	2310      	movs	r3, #16
 80073fa:	76fb      	strb	r3, [r7, #27]
 80073fc:	bf00      	nop
 80073fe:	e055      	b.n	80074ac <UART_SetConfig+0x284>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a47      	ldr	r2, [pc, #284]	; (8007524 <UART_SetConfig+0x2fc>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d124      	bne.n	8007454 <UART_SetConfig+0x22c>
 800740a:	4b42      	ldr	r3, [pc, #264]	; (8007514 <UART_SetConfig+0x2ec>)
 800740c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007410:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007418:	d012      	beq.n	8007440 <UART_SetConfig+0x218>
 800741a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800741e:	d802      	bhi.n	8007426 <UART_SetConfig+0x1fe>
 8007420:	2b00      	cmp	r3, #0
 8007422:	d007      	beq.n	8007434 <UART_SetConfig+0x20c>
 8007424:	e012      	b.n	800744c <UART_SetConfig+0x224>
 8007426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800742a:	d006      	beq.n	800743a <UART_SetConfig+0x212>
 800742c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007430:	d009      	beq.n	8007446 <UART_SetConfig+0x21e>
 8007432:	e00b      	b.n	800744c <UART_SetConfig+0x224>
 8007434:	2300      	movs	r3, #0
 8007436:	76fb      	strb	r3, [r7, #27]
 8007438:	e038      	b.n	80074ac <UART_SetConfig+0x284>
 800743a:	2302      	movs	r3, #2
 800743c:	76fb      	strb	r3, [r7, #27]
 800743e:	e035      	b.n	80074ac <UART_SetConfig+0x284>
 8007440:	2304      	movs	r3, #4
 8007442:	76fb      	strb	r3, [r7, #27]
 8007444:	e032      	b.n	80074ac <UART_SetConfig+0x284>
 8007446:	2308      	movs	r3, #8
 8007448:	76fb      	strb	r3, [r7, #27]
 800744a:	e02f      	b.n	80074ac <UART_SetConfig+0x284>
 800744c:	2310      	movs	r3, #16
 800744e:	76fb      	strb	r3, [r7, #27]
 8007450:	bf00      	nop
 8007452:	e02b      	b.n	80074ac <UART_SetConfig+0x284>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a2c      	ldr	r2, [pc, #176]	; (800750c <UART_SetConfig+0x2e4>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d124      	bne.n	80074a8 <UART_SetConfig+0x280>
 800745e:	4b2d      	ldr	r3, [pc, #180]	; (8007514 <UART_SetConfig+0x2ec>)
 8007460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007464:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800746c:	d012      	beq.n	8007494 <UART_SetConfig+0x26c>
 800746e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007472:	d802      	bhi.n	800747a <UART_SetConfig+0x252>
 8007474:	2b00      	cmp	r3, #0
 8007476:	d007      	beq.n	8007488 <UART_SetConfig+0x260>
 8007478:	e012      	b.n	80074a0 <UART_SetConfig+0x278>
 800747a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800747e:	d006      	beq.n	800748e <UART_SetConfig+0x266>
 8007480:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007484:	d009      	beq.n	800749a <UART_SetConfig+0x272>
 8007486:	e00b      	b.n	80074a0 <UART_SetConfig+0x278>
 8007488:	2300      	movs	r3, #0
 800748a:	76fb      	strb	r3, [r7, #27]
 800748c:	e00e      	b.n	80074ac <UART_SetConfig+0x284>
 800748e:	2302      	movs	r3, #2
 8007490:	76fb      	strb	r3, [r7, #27]
 8007492:	e00b      	b.n	80074ac <UART_SetConfig+0x284>
 8007494:	2304      	movs	r3, #4
 8007496:	76fb      	strb	r3, [r7, #27]
 8007498:	e008      	b.n	80074ac <UART_SetConfig+0x284>
 800749a:	2308      	movs	r3, #8
 800749c:	76fb      	strb	r3, [r7, #27]
 800749e:	e005      	b.n	80074ac <UART_SetConfig+0x284>
 80074a0:	2310      	movs	r3, #16
 80074a2:	76fb      	strb	r3, [r7, #27]
 80074a4:	bf00      	nop
 80074a6:	e001      	b.n	80074ac <UART_SetConfig+0x284>
 80074a8:	2310      	movs	r3, #16
 80074aa:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a16      	ldr	r2, [pc, #88]	; (800750c <UART_SetConfig+0x2e4>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	f040 8087 	bne.w	80075c6 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074b8:	7efb      	ldrb	r3, [r7, #27]
 80074ba:	2b08      	cmp	r3, #8
 80074bc:	d836      	bhi.n	800752c <UART_SetConfig+0x304>
 80074be:	a201      	add	r2, pc, #4	; (adr r2, 80074c4 <UART_SetConfig+0x29c>)
 80074c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c4:	080074e9 	.word	0x080074e9
 80074c8:	0800752d 	.word	0x0800752d
 80074cc:	080074f1 	.word	0x080074f1
 80074d0:	0800752d 	.word	0x0800752d
 80074d4:	080074f7 	.word	0x080074f7
 80074d8:	0800752d 	.word	0x0800752d
 80074dc:	0800752d 	.word	0x0800752d
 80074e0:	0800752d 	.word	0x0800752d
 80074e4:	080074ff 	.word	0x080074ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074e8:	f7fe ffce 	bl	8006488 <HAL_RCC_GetPCLK1Freq>
 80074ec:	6178      	str	r0, [r7, #20]
        break;
 80074ee:	e022      	b.n	8007536 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074f0:	4b0d      	ldr	r3, [pc, #52]	; (8007528 <UART_SetConfig+0x300>)
 80074f2:	617b      	str	r3, [r7, #20]
        break;
 80074f4:	e01f      	b.n	8007536 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074f6:	f7fe ff31 	bl	800635c <HAL_RCC_GetSysClockFreq>
 80074fa:	6178      	str	r0, [r7, #20]
        break;
 80074fc:	e01b      	b.n	8007536 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007502:	617b      	str	r3, [r7, #20]
        break;
 8007504:	e017      	b.n	8007536 <UART_SetConfig+0x30e>
 8007506:	bf00      	nop
 8007508:	efff69f3 	.word	0xefff69f3
 800750c:	40008000 	.word	0x40008000
 8007510:	40013800 	.word	0x40013800
 8007514:	40021000 	.word	0x40021000
 8007518:	40004400 	.word	0x40004400
 800751c:	40004800 	.word	0x40004800
 8007520:	40004c00 	.word	0x40004c00
 8007524:	40005000 	.word	0x40005000
 8007528:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800752c:	2300      	movs	r3, #0
 800752e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	76bb      	strb	r3, [r7, #26]
        break;
 8007534:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	2b00      	cmp	r3, #0
 800753a:	f000 80f1 	beq.w	8007720 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	685a      	ldr	r2, [r3, #4]
 8007542:	4613      	mov	r3, r2
 8007544:	005b      	lsls	r3, r3, #1
 8007546:	4413      	add	r3, r2
 8007548:	697a      	ldr	r2, [r7, #20]
 800754a:	429a      	cmp	r2, r3
 800754c:	d305      	bcc.n	800755a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007554:	697a      	ldr	r2, [r7, #20]
 8007556:	429a      	cmp	r2, r3
 8007558:	d902      	bls.n	8007560 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	76bb      	strb	r3, [r7, #26]
 800755e:	e0df      	b.n	8007720 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	4619      	mov	r1, r3
 8007564:	f04f 0200 	mov.w	r2, #0
 8007568:	f04f 0300 	mov.w	r3, #0
 800756c:	f04f 0400 	mov.w	r4, #0
 8007570:	0214      	lsls	r4, r2, #8
 8007572:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007576:	020b      	lsls	r3, r1, #8
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	6852      	ldr	r2, [r2, #4]
 800757c:	0852      	lsrs	r2, r2, #1
 800757e:	4611      	mov	r1, r2
 8007580:	f04f 0200 	mov.w	r2, #0
 8007584:	eb13 0b01 	adds.w	fp, r3, r1
 8007588:	eb44 0c02 	adc.w	ip, r4, r2
 800758c:	4658      	mov	r0, fp
 800758e:	4661      	mov	r1, ip
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	f04f 0400 	mov.w	r4, #0
 8007598:	461a      	mov	r2, r3
 800759a:	4623      	mov	r3, r4
 800759c:	f7f9 fb74 	bl	8000c88 <__aeabi_uldivmod>
 80075a0:	4603      	mov	r3, r0
 80075a2:	460c      	mov	r4, r1
 80075a4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075ac:	d308      	bcc.n	80075c0 <UART_SetConfig+0x398>
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075b4:	d204      	bcs.n	80075c0 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	693a      	ldr	r2, [r7, #16]
 80075bc:	60da      	str	r2, [r3, #12]
 80075be:	e0af      	b.n	8007720 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	76bb      	strb	r3, [r7, #26]
 80075c4:	e0ac      	b.n	8007720 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	69db      	ldr	r3, [r3, #28]
 80075ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075ce:	d15b      	bne.n	8007688 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80075d0:	7efb      	ldrb	r3, [r7, #27]
 80075d2:	2b08      	cmp	r3, #8
 80075d4:	d827      	bhi.n	8007626 <UART_SetConfig+0x3fe>
 80075d6:	a201      	add	r2, pc, #4	; (adr r2, 80075dc <UART_SetConfig+0x3b4>)
 80075d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075dc:	08007601 	.word	0x08007601
 80075e0:	08007609 	.word	0x08007609
 80075e4:	08007611 	.word	0x08007611
 80075e8:	08007627 	.word	0x08007627
 80075ec:	08007617 	.word	0x08007617
 80075f0:	08007627 	.word	0x08007627
 80075f4:	08007627 	.word	0x08007627
 80075f8:	08007627 	.word	0x08007627
 80075fc:	0800761f 	.word	0x0800761f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007600:	f7fe ff42 	bl	8006488 <HAL_RCC_GetPCLK1Freq>
 8007604:	6178      	str	r0, [r7, #20]
        break;
 8007606:	e013      	b.n	8007630 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007608:	f7fe ff54 	bl	80064b4 <HAL_RCC_GetPCLK2Freq>
 800760c:	6178      	str	r0, [r7, #20]
        break;
 800760e:	e00f      	b.n	8007630 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007610:	4b49      	ldr	r3, [pc, #292]	; (8007738 <UART_SetConfig+0x510>)
 8007612:	617b      	str	r3, [r7, #20]
        break;
 8007614:	e00c      	b.n	8007630 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007616:	f7fe fea1 	bl	800635c <HAL_RCC_GetSysClockFreq>
 800761a:	6178      	str	r0, [r7, #20]
        break;
 800761c:	e008      	b.n	8007630 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800761e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007622:	617b      	str	r3, [r7, #20]
        break;
 8007624:	e004      	b.n	8007630 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8007626:	2300      	movs	r3, #0
 8007628:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	76bb      	strb	r3, [r7, #26]
        break;
 800762e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d074      	beq.n	8007720 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	005a      	lsls	r2, r3, #1
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	085b      	lsrs	r3, r3, #1
 8007640:	441a      	add	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	fbb2 f3f3 	udiv	r3, r2, r3
 800764a:	b29b      	uxth	r3, r3
 800764c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	2b0f      	cmp	r3, #15
 8007652:	d916      	bls.n	8007682 <UART_SetConfig+0x45a>
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800765a:	d212      	bcs.n	8007682 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	b29b      	uxth	r3, r3
 8007660:	f023 030f 	bic.w	r3, r3, #15
 8007664:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	085b      	lsrs	r3, r3, #1
 800766a:	b29b      	uxth	r3, r3
 800766c:	f003 0307 	and.w	r3, r3, #7
 8007670:	b29a      	uxth	r2, r3
 8007672:	89fb      	ldrh	r3, [r7, #14]
 8007674:	4313      	orrs	r3, r2
 8007676:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	89fa      	ldrh	r2, [r7, #14]
 800767e:	60da      	str	r2, [r3, #12]
 8007680:	e04e      	b.n	8007720 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	76bb      	strb	r3, [r7, #26]
 8007686:	e04b      	b.n	8007720 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007688:	7efb      	ldrb	r3, [r7, #27]
 800768a:	2b08      	cmp	r3, #8
 800768c:	d827      	bhi.n	80076de <UART_SetConfig+0x4b6>
 800768e:	a201      	add	r2, pc, #4	; (adr r2, 8007694 <UART_SetConfig+0x46c>)
 8007690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007694:	080076b9 	.word	0x080076b9
 8007698:	080076c1 	.word	0x080076c1
 800769c:	080076c9 	.word	0x080076c9
 80076a0:	080076df 	.word	0x080076df
 80076a4:	080076cf 	.word	0x080076cf
 80076a8:	080076df 	.word	0x080076df
 80076ac:	080076df 	.word	0x080076df
 80076b0:	080076df 	.word	0x080076df
 80076b4:	080076d7 	.word	0x080076d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076b8:	f7fe fee6 	bl	8006488 <HAL_RCC_GetPCLK1Freq>
 80076bc:	6178      	str	r0, [r7, #20]
        break;
 80076be:	e013      	b.n	80076e8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076c0:	f7fe fef8 	bl	80064b4 <HAL_RCC_GetPCLK2Freq>
 80076c4:	6178      	str	r0, [r7, #20]
        break;
 80076c6:	e00f      	b.n	80076e8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076c8:	4b1b      	ldr	r3, [pc, #108]	; (8007738 <UART_SetConfig+0x510>)
 80076ca:	617b      	str	r3, [r7, #20]
        break;
 80076cc:	e00c      	b.n	80076e8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076ce:	f7fe fe45 	bl	800635c <HAL_RCC_GetSysClockFreq>
 80076d2:	6178      	str	r0, [r7, #20]
        break;
 80076d4:	e008      	b.n	80076e8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076da:	617b      	str	r3, [r7, #20]
        break;
 80076dc:	e004      	b.n	80076e8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80076de:	2300      	movs	r3, #0
 80076e0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	76bb      	strb	r3, [r7, #26]
        break;
 80076e6:	bf00      	nop
    }

    if (pclk != 0U)
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d018      	beq.n	8007720 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	085a      	lsrs	r2, r3, #1
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	441a      	add	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007700:	b29b      	uxth	r3, r3
 8007702:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	2b0f      	cmp	r3, #15
 8007708:	d908      	bls.n	800771c <UART_SetConfig+0x4f4>
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007710:	d204      	bcs.n	800771c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	60da      	str	r2, [r3, #12]
 800771a:	e001      	b.n	8007720 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800772c:	7ebb      	ldrb	r3, [r7, #26]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3720      	adds	r7, #32
 8007732:	46bd      	mov	sp, r7
 8007734:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007738:	00f42400 	.word	0x00f42400

0800773c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007748:	f003 0301 	and.w	r3, r3, #1
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00a      	beq.n	8007766 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	430a      	orrs	r2, r1
 8007764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776a:	f003 0302 	and.w	r3, r3, #2
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00a      	beq.n	8007788 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	430a      	orrs	r2, r1
 8007786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778c:	f003 0304 	and.w	r3, r3, #4
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00a      	beq.n	80077aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	430a      	orrs	r2, r1
 80077a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ae:	f003 0308 	and.w	r3, r3, #8
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00a      	beq.n	80077cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	430a      	orrs	r2, r1
 80077ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d0:	f003 0310 	and.w	r3, r3, #16
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00a      	beq.n	80077ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	430a      	orrs	r2, r1
 80077ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f2:	f003 0320 	and.w	r3, r3, #32
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00a      	beq.n	8007810 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	430a      	orrs	r2, r1
 800780e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007818:	2b00      	cmp	r3, #0
 800781a:	d01a      	beq.n	8007852 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	430a      	orrs	r2, r1
 8007830:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800783a:	d10a      	bne.n	8007852 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	430a      	orrs	r2, r1
 8007850:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00a      	beq.n	8007874 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	430a      	orrs	r2, r1
 8007872:	605a      	str	r2, [r3, #4]
  }
}
 8007874:	bf00      	nop
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af02      	add	r7, sp, #8
 8007886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800788e:	f7fb f8d7 	bl	8002a40 <HAL_GetTick>
 8007892:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 0308 	and.w	r3, r3, #8
 800789e:	2b08      	cmp	r3, #8
 80078a0:	d10e      	bne.n	80078c0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078a6:	9300      	str	r3, [sp, #0]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f82a 	bl	800790a <UART_WaitOnFlagUntilTimeout>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d001      	beq.n	80078c0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078bc:	2303      	movs	r3, #3
 80078be:	e020      	b.n	8007902 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 0304 	and.w	r3, r3, #4
 80078ca:	2b04      	cmp	r3, #4
 80078cc:	d10e      	bne.n	80078ec <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 f814 	bl	800790a <UART_WaitOnFlagUntilTimeout>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d001      	beq.n	80078ec <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e00a      	b.n	8007902 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2220      	movs	r2, #32
 80078f0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2220      	movs	r2, #32
 80078f6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b084      	sub	sp, #16
 800790e:	af00      	add	r7, sp, #0
 8007910:	60f8      	str	r0, [r7, #12]
 8007912:	60b9      	str	r1, [r7, #8]
 8007914:	603b      	str	r3, [r7, #0]
 8007916:	4613      	mov	r3, r2
 8007918:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800791a:	e05d      	b.n	80079d8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007922:	d059      	beq.n	80079d8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007924:	f7fb f88c 	bl	8002a40 <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	69ba      	ldr	r2, [r7, #24]
 8007930:	429a      	cmp	r2, r3
 8007932:	d302      	bcc.n	800793a <UART_WaitOnFlagUntilTimeout+0x30>
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d11b      	bne.n	8007972 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007948:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	689a      	ldr	r2, [r3, #8]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f022 0201 	bic.w	r2, r2, #1
 8007958:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2220      	movs	r2, #32
 800795e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2220      	movs	r2, #32
 8007964:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2200      	movs	r2, #0
 800796a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800796e:	2303      	movs	r3, #3
 8007970:	e042      	b.n	80079f8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 0304 	and.w	r3, r3, #4
 800797c:	2b00      	cmp	r3, #0
 800797e:	d02b      	beq.n	80079d8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	69db      	ldr	r3, [r3, #28]
 8007986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800798a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800798e:	d123      	bne.n	80079d8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007998:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80079a8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	689a      	ldr	r2, [r3, #8]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f022 0201 	bic.w	r2, r2, #1
 80079b8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2220      	movs	r2, #32
 80079be:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2220      	movs	r2, #32
 80079c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2220      	movs	r2, #32
 80079ca:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e00f      	b.n	80079f8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	69da      	ldr	r2, [r3, #28]
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	4013      	ands	r3, r2
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	bf0c      	ite	eq
 80079e8:	2301      	moveq	r3, #1
 80079ea:	2300      	movne	r3, #0
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	461a      	mov	r2, r3
 80079f0:	79fb      	ldrb	r3, [r7, #7]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d092      	beq.n	800791c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a00:	b084      	sub	sp, #16
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b084      	sub	sp, #16
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
 8007a0a:	f107 001c 	add.w	r0, r7, #28
 8007a0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d122      	bne.n	8007a5e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007a2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d105      	bne.n	8007a52 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 fa30 	bl	8007eb8 <USB_CoreReset>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	73fb      	strb	r3, [r7, #15]
 8007a5c:	e01a      	b.n	8007a94 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 fa24 	bl	8007eb8 <USB_CoreReset>
 8007a70:	4603      	mov	r3, r0
 8007a72:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007a74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d106      	bne.n	8007a88 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	639a      	str	r2, [r3, #56]	; 0x38
 8007a86:	e005      	b.n	8007a94 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007aa0:	b004      	add	sp, #16
 8007aa2:	4770      	bx	lr

08007aa4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	f023 0201 	bic.w	r2, r3, #1
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	370c      	adds	r7, #12
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr

08007ac6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b082      	sub	sp, #8
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	460b      	mov	r3, r1
 8007ad0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007ade:	78fb      	ldrb	r3, [r7, #3]
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d106      	bne.n	8007af2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	60da      	str	r2, [r3, #12]
 8007af0:	e00b      	b.n	8007b0a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007af2:	78fb      	ldrb	r3, [r7, #3]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d106      	bne.n	8007b06 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	60da      	str	r2, [r3, #12]
 8007b04:	e001      	b.n	8007b0a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e003      	b.n	8007b12 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007b0a:	2032      	movs	r0, #50	; 0x32
 8007b0c:	f7fa ffa4 	bl	8002a58 <HAL_Delay>

  return HAL_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3708      	adds	r7, #8
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
	...

08007b1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b1c:	b084      	sub	sp, #16
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b086      	sub	sp, #24
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
 8007b26:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007b2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007b36:	2300      	movs	r3, #0
 8007b38:	613b      	str	r3, [r7, #16]
 8007b3a:	e009      	b.n	8007b50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	3340      	adds	r3, #64	; 0x40
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	4413      	add	r3, r2
 8007b46:	2200      	movs	r2, #0
 8007b48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	613b      	str	r3, [r7, #16]
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	2b0e      	cmp	r3, #14
 8007b54:	d9f2      	bls.n	8007b3c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d11c      	bne.n	8007b96 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b6a:	f043 0302 	orr.w	r3, r3, #2
 8007b6e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b74:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	601a      	str	r2, [r3, #0]
 8007b94:	e005      	b.n	8007ba2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ba8:	461a      	mov	r2, r3
 8007baa:	2300      	movs	r3, #0
 8007bac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	680b      	ldr	r3, [r1, #0]
 8007bc0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007bc2:	2103      	movs	r1, #3
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 f93d 	bl	8007e44 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007bca:	2110      	movs	r1, #16
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 f8f1 	bl	8007db4 <USB_FlushTxFifo>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d001      	beq.n	8007bdc <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 f90f 	bl	8007e00 <USB_FlushRxFifo>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d001      	beq.n	8007bec <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bfe:	461a      	mov	r2, r3
 8007c00:	2300      	movs	r3, #0
 8007c02:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c10:	2300      	movs	r3, #0
 8007c12:	613b      	str	r3, [r7, #16]
 8007c14:	e043      	b.n	8007c9e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	015a      	lsls	r2, r3, #5
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c2c:	d118      	bne.n	8007c60 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d10a      	bne.n	8007c4a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	015a      	lsls	r2, r3, #5
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c40:	461a      	mov	r2, r3
 8007c42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c46:	6013      	str	r3, [r2, #0]
 8007c48:	e013      	b.n	8007c72 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	015a      	lsls	r2, r3, #5
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	4413      	add	r3, r2
 8007c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c56:	461a      	mov	r2, r3
 8007c58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c5c:	6013      	str	r3, [r2, #0]
 8007c5e:	e008      	b.n	8007c72 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	015a      	lsls	r2, r3, #5
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	4413      	add	r3, r2
 8007c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	2300      	movs	r3, #0
 8007c70:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	015a      	lsls	r2, r3, #5
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	4413      	add	r3, r2
 8007c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c7e:	461a      	mov	r2, r3
 8007c80:	2300      	movs	r3, #0
 8007c82:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	015a      	lsls	r2, r3, #5
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c90:	461a      	mov	r2, r3
 8007c92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	613b      	str	r3, [r7, #16]
 8007c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca0:	693a      	ldr	r2, [r7, #16]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d3b7      	bcc.n	8007c16 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	613b      	str	r3, [r7, #16]
 8007caa:	e043      	b.n	8007d34 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	015a      	lsls	r2, r3, #5
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cc2:	d118      	bne.n	8007cf6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d10a      	bne.n	8007ce0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	015a      	lsls	r2, r3, #5
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007cdc:	6013      	str	r3, [r2, #0]
 8007cde:	e013      	b.n	8007d08 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	015a      	lsls	r2, r3, #5
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cec:	461a      	mov	r2, r3
 8007cee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007cf2:	6013      	str	r3, [r2, #0]
 8007cf4:	e008      	b.n	8007d08 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	015a      	lsls	r2, r3, #5
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d02:	461a      	mov	r2, r3
 8007d04:	2300      	movs	r3, #0
 8007d06:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	015a      	lsls	r2, r3, #5
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	4413      	add	r3, r2
 8007d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d14:	461a      	mov	r2, r3
 8007d16:	2300      	movs	r3, #0
 8007d18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	015a      	lsls	r2, r3, #5
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	4413      	add	r3, r2
 8007d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d26:	461a      	mov	r2, r3
 8007d28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	3301      	adds	r3, #1
 8007d32:	613b      	str	r3, [r7, #16]
 8007d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d36:	693a      	ldr	r2, [r7, #16]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d3b7      	bcc.n	8007cac <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d4e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007d5c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	699b      	ldr	r3, [r3, #24]
 8007d62:	f043 0210 	orr.w	r2, r3, #16
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	699a      	ldr	r2, [r3, #24]
 8007d6e:	4b10      	ldr	r3, [pc, #64]	; (8007db0 <USB_DevInit+0x294>)
 8007d70:	4313      	orrs	r3, r2
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d005      	beq.n	8007d88 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	699b      	ldr	r3, [r3, #24]
 8007d80:	f043 0208 	orr.w	r2, r3, #8
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d107      	bne.n	8007d9e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d96:	f043 0304 	orr.w	r3, r3, #4
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3718      	adds	r7, #24
 8007da4:	46bd      	mov	sp, r7
 8007da6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007daa:	b004      	add	sp, #16
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	803c3800 	.word	0x803c3800

08007db4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	019b      	lsls	r3, r3, #6
 8007dc6:	f043 0220 	orr.w	r2, r3, #32
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	60fb      	str	r3, [r7, #12]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	4a09      	ldr	r2, [pc, #36]	; (8007dfc <USB_FlushTxFifo+0x48>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d901      	bls.n	8007de0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007ddc:	2303      	movs	r3, #3
 8007dde:	e006      	b.n	8007dee <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	f003 0320 	and.w	r3, r3, #32
 8007de8:	2b20      	cmp	r3, #32
 8007dea:	d0f0      	beq.n	8007dce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3714      	adds	r7, #20
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	00030d40 	.word	0x00030d40

08007e00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2210      	movs	r2, #16
 8007e10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	3301      	adds	r3, #1
 8007e16:	60fb      	str	r3, [r7, #12]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	4a09      	ldr	r2, [pc, #36]	; (8007e40 <USB_FlushRxFifo+0x40>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d901      	bls.n	8007e24 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007e20:	2303      	movs	r3, #3
 8007e22:	e006      	b.n	8007e32 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	f003 0310 	and.w	r3, r3, #16
 8007e2c:	2b10      	cmp	r3, #16
 8007e2e:	d0f0      	beq.n	8007e12 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3714      	adds	r7, #20
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	00030d40 	.word	0x00030d40

08007e44 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	78fb      	ldrb	r3, [r7, #3]
 8007e5e:	68f9      	ldr	r1, [r7, #12]
 8007e60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e64:	4313      	orrs	r3, r2
 8007e66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3714      	adds	r7, #20
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr

08007e76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007e76:	b480      	push	{r7}
 8007e78:	b085      	sub	sp, #20
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e90:	f023 0303 	bic.w	r3, r3, #3
 8007e94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ea4:	f043 0302 	orr.w	r3, r3, #2
 8007ea8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3714      	adds	r7, #20
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	60fb      	str	r3, [r7, #12]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	4a13      	ldr	r2, [pc, #76]	; (8007f1c <USB_CoreReset+0x64>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d901      	bls.n	8007ed6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e01b      	b.n	8007f0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	daf2      	bge.n	8007ec4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	f043 0201 	orr.w	r2, r3, #1
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	60fb      	str	r3, [r7, #12]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	4a09      	ldr	r2, [pc, #36]	; (8007f1c <USB_CoreReset+0x64>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d901      	bls.n	8007f00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007efc:	2303      	movs	r3, #3
 8007efe:	e006      	b.n	8007f0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	691b      	ldr	r3, [r3, #16]
 8007f04:	f003 0301 	and.w	r3, r3, #1
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d0f0      	beq.n	8007eee <USB_CoreReset+0x36>

  return HAL_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3714      	adds	r7, #20
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	00030d40 	.word	0x00030d40

08007f20 <__errno>:
 8007f20:	4b01      	ldr	r3, [pc, #4]	; (8007f28 <__errno+0x8>)
 8007f22:	6818      	ldr	r0, [r3, #0]
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop
 8007f28:	20000024 	.word	0x20000024

08007f2c <__libc_init_array>:
 8007f2c:	b570      	push	{r4, r5, r6, lr}
 8007f2e:	4e0d      	ldr	r6, [pc, #52]	; (8007f64 <__libc_init_array+0x38>)
 8007f30:	4c0d      	ldr	r4, [pc, #52]	; (8007f68 <__libc_init_array+0x3c>)
 8007f32:	1ba4      	subs	r4, r4, r6
 8007f34:	10a4      	asrs	r4, r4, #2
 8007f36:	2500      	movs	r5, #0
 8007f38:	42a5      	cmp	r5, r4
 8007f3a:	d109      	bne.n	8007f50 <__libc_init_array+0x24>
 8007f3c:	4e0b      	ldr	r6, [pc, #44]	; (8007f6c <__libc_init_array+0x40>)
 8007f3e:	4c0c      	ldr	r4, [pc, #48]	; (8007f70 <__libc_init_array+0x44>)
 8007f40:	f004 f9fe 	bl	800c340 <_init>
 8007f44:	1ba4      	subs	r4, r4, r6
 8007f46:	10a4      	asrs	r4, r4, #2
 8007f48:	2500      	movs	r5, #0
 8007f4a:	42a5      	cmp	r5, r4
 8007f4c:	d105      	bne.n	8007f5a <__libc_init_array+0x2e>
 8007f4e:	bd70      	pop	{r4, r5, r6, pc}
 8007f50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f54:	4798      	blx	r3
 8007f56:	3501      	adds	r5, #1
 8007f58:	e7ee      	b.n	8007f38 <__libc_init_array+0xc>
 8007f5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f5e:	4798      	blx	r3
 8007f60:	3501      	adds	r5, #1
 8007f62:	e7f2      	b.n	8007f4a <__libc_init_array+0x1e>
 8007f64:	0800c738 	.word	0x0800c738
 8007f68:	0800c738 	.word	0x0800c738
 8007f6c:	0800c738 	.word	0x0800c738
 8007f70:	0800c73c 	.word	0x0800c73c

08007f74 <memcpy>:
 8007f74:	b510      	push	{r4, lr}
 8007f76:	1e43      	subs	r3, r0, #1
 8007f78:	440a      	add	r2, r1
 8007f7a:	4291      	cmp	r1, r2
 8007f7c:	d100      	bne.n	8007f80 <memcpy+0xc>
 8007f7e:	bd10      	pop	{r4, pc}
 8007f80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f88:	e7f7      	b.n	8007f7a <memcpy+0x6>

08007f8a <memset>:
 8007f8a:	4402      	add	r2, r0
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d100      	bne.n	8007f94 <memset+0xa>
 8007f92:	4770      	bx	lr
 8007f94:	f803 1b01 	strb.w	r1, [r3], #1
 8007f98:	e7f9      	b.n	8007f8e <memset+0x4>

08007f9a <__cvt>:
 8007f9a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f9e:	ec55 4b10 	vmov	r4, r5, d0
 8007fa2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007fa4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007fa8:	2d00      	cmp	r5, #0
 8007faa:	460e      	mov	r6, r1
 8007fac:	4691      	mov	r9, r2
 8007fae:	4619      	mov	r1, r3
 8007fb0:	bfb8      	it	lt
 8007fb2:	4622      	movlt	r2, r4
 8007fb4:	462b      	mov	r3, r5
 8007fb6:	f027 0720 	bic.w	r7, r7, #32
 8007fba:	bfbb      	ittet	lt
 8007fbc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007fc0:	461d      	movlt	r5, r3
 8007fc2:	2300      	movge	r3, #0
 8007fc4:	232d      	movlt	r3, #45	; 0x2d
 8007fc6:	bfb8      	it	lt
 8007fc8:	4614      	movlt	r4, r2
 8007fca:	2f46      	cmp	r7, #70	; 0x46
 8007fcc:	700b      	strb	r3, [r1, #0]
 8007fce:	d004      	beq.n	8007fda <__cvt+0x40>
 8007fd0:	2f45      	cmp	r7, #69	; 0x45
 8007fd2:	d100      	bne.n	8007fd6 <__cvt+0x3c>
 8007fd4:	3601      	adds	r6, #1
 8007fd6:	2102      	movs	r1, #2
 8007fd8:	e000      	b.n	8007fdc <__cvt+0x42>
 8007fda:	2103      	movs	r1, #3
 8007fdc:	ab03      	add	r3, sp, #12
 8007fde:	9301      	str	r3, [sp, #4]
 8007fe0:	ab02      	add	r3, sp, #8
 8007fe2:	9300      	str	r3, [sp, #0]
 8007fe4:	4632      	mov	r2, r6
 8007fe6:	4653      	mov	r3, sl
 8007fe8:	ec45 4b10 	vmov	d0, r4, r5
 8007fec:	f001 fd90 	bl	8009b10 <_dtoa_r>
 8007ff0:	2f47      	cmp	r7, #71	; 0x47
 8007ff2:	4680      	mov	r8, r0
 8007ff4:	d102      	bne.n	8007ffc <__cvt+0x62>
 8007ff6:	f019 0f01 	tst.w	r9, #1
 8007ffa:	d026      	beq.n	800804a <__cvt+0xb0>
 8007ffc:	2f46      	cmp	r7, #70	; 0x46
 8007ffe:	eb08 0906 	add.w	r9, r8, r6
 8008002:	d111      	bne.n	8008028 <__cvt+0x8e>
 8008004:	f898 3000 	ldrb.w	r3, [r8]
 8008008:	2b30      	cmp	r3, #48	; 0x30
 800800a:	d10a      	bne.n	8008022 <__cvt+0x88>
 800800c:	2200      	movs	r2, #0
 800800e:	2300      	movs	r3, #0
 8008010:	4620      	mov	r0, r4
 8008012:	4629      	mov	r1, r5
 8008014:	f7f8 fd58 	bl	8000ac8 <__aeabi_dcmpeq>
 8008018:	b918      	cbnz	r0, 8008022 <__cvt+0x88>
 800801a:	f1c6 0601 	rsb	r6, r6, #1
 800801e:	f8ca 6000 	str.w	r6, [sl]
 8008022:	f8da 3000 	ldr.w	r3, [sl]
 8008026:	4499      	add	r9, r3
 8008028:	2200      	movs	r2, #0
 800802a:	2300      	movs	r3, #0
 800802c:	4620      	mov	r0, r4
 800802e:	4629      	mov	r1, r5
 8008030:	f7f8 fd4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008034:	b938      	cbnz	r0, 8008046 <__cvt+0xac>
 8008036:	2230      	movs	r2, #48	; 0x30
 8008038:	9b03      	ldr	r3, [sp, #12]
 800803a:	454b      	cmp	r3, r9
 800803c:	d205      	bcs.n	800804a <__cvt+0xb0>
 800803e:	1c59      	adds	r1, r3, #1
 8008040:	9103      	str	r1, [sp, #12]
 8008042:	701a      	strb	r2, [r3, #0]
 8008044:	e7f8      	b.n	8008038 <__cvt+0x9e>
 8008046:	f8cd 900c 	str.w	r9, [sp, #12]
 800804a:	9b03      	ldr	r3, [sp, #12]
 800804c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800804e:	eba3 0308 	sub.w	r3, r3, r8
 8008052:	4640      	mov	r0, r8
 8008054:	6013      	str	r3, [r2, #0]
 8008056:	b004      	add	sp, #16
 8008058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800805c <__exponent>:
 800805c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800805e:	2900      	cmp	r1, #0
 8008060:	4604      	mov	r4, r0
 8008062:	bfba      	itte	lt
 8008064:	4249      	neglt	r1, r1
 8008066:	232d      	movlt	r3, #45	; 0x2d
 8008068:	232b      	movge	r3, #43	; 0x2b
 800806a:	2909      	cmp	r1, #9
 800806c:	f804 2b02 	strb.w	r2, [r4], #2
 8008070:	7043      	strb	r3, [r0, #1]
 8008072:	dd20      	ble.n	80080b6 <__exponent+0x5a>
 8008074:	f10d 0307 	add.w	r3, sp, #7
 8008078:	461f      	mov	r7, r3
 800807a:	260a      	movs	r6, #10
 800807c:	fb91 f5f6 	sdiv	r5, r1, r6
 8008080:	fb06 1115 	mls	r1, r6, r5, r1
 8008084:	3130      	adds	r1, #48	; 0x30
 8008086:	2d09      	cmp	r5, #9
 8008088:	f803 1c01 	strb.w	r1, [r3, #-1]
 800808c:	f103 32ff 	add.w	r2, r3, #4294967295
 8008090:	4629      	mov	r1, r5
 8008092:	dc09      	bgt.n	80080a8 <__exponent+0x4c>
 8008094:	3130      	adds	r1, #48	; 0x30
 8008096:	3b02      	subs	r3, #2
 8008098:	f802 1c01 	strb.w	r1, [r2, #-1]
 800809c:	42bb      	cmp	r3, r7
 800809e:	4622      	mov	r2, r4
 80080a0:	d304      	bcc.n	80080ac <__exponent+0x50>
 80080a2:	1a10      	subs	r0, r2, r0
 80080a4:	b003      	add	sp, #12
 80080a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080a8:	4613      	mov	r3, r2
 80080aa:	e7e7      	b.n	800807c <__exponent+0x20>
 80080ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080b0:	f804 2b01 	strb.w	r2, [r4], #1
 80080b4:	e7f2      	b.n	800809c <__exponent+0x40>
 80080b6:	2330      	movs	r3, #48	; 0x30
 80080b8:	4419      	add	r1, r3
 80080ba:	7083      	strb	r3, [r0, #2]
 80080bc:	1d02      	adds	r2, r0, #4
 80080be:	70c1      	strb	r1, [r0, #3]
 80080c0:	e7ef      	b.n	80080a2 <__exponent+0x46>
	...

080080c4 <_printf_float>:
 80080c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c8:	b08d      	sub	sp, #52	; 0x34
 80080ca:	460c      	mov	r4, r1
 80080cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80080d0:	4616      	mov	r6, r2
 80080d2:	461f      	mov	r7, r3
 80080d4:	4605      	mov	r5, r0
 80080d6:	f002 fec9 	bl	800ae6c <_localeconv_r>
 80080da:	6803      	ldr	r3, [r0, #0]
 80080dc:	9304      	str	r3, [sp, #16]
 80080de:	4618      	mov	r0, r3
 80080e0:	f7f8 f876 	bl	80001d0 <strlen>
 80080e4:	2300      	movs	r3, #0
 80080e6:	930a      	str	r3, [sp, #40]	; 0x28
 80080e8:	f8d8 3000 	ldr.w	r3, [r8]
 80080ec:	9005      	str	r0, [sp, #20]
 80080ee:	3307      	adds	r3, #7
 80080f0:	f023 0307 	bic.w	r3, r3, #7
 80080f4:	f103 0208 	add.w	r2, r3, #8
 80080f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80080fc:	f8d4 b000 	ldr.w	fp, [r4]
 8008100:	f8c8 2000 	str.w	r2, [r8]
 8008104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008108:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800810c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008110:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008114:	9307      	str	r3, [sp, #28]
 8008116:	f8cd 8018 	str.w	r8, [sp, #24]
 800811a:	f04f 32ff 	mov.w	r2, #4294967295
 800811e:	4ba7      	ldr	r3, [pc, #668]	; (80083bc <_printf_float+0x2f8>)
 8008120:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008124:	f7f8 fd02 	bl	8000b2c <__aeabi_dcmpun>
 8008128:	bb70      	cbnz	r0, 8008188 <_printf_float+0xc4>
 800812a:	f04f 32ff 	mov.w	r2, #4294967295
 800812e:	4ba3      	ldr	r3, [pc, #652]	; (80083bc <_printf_float+0x2f8>)
 8008130:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008134:	f7f8 fcdc 	bl	8000af0 <__aeabi_dcmple>
 8008138:	bb30      	cbnz	r0, 8008188 <_printf_float+0xc4>
 800813a:	2200      	movs	r2, #0
 800813c:	2300      	movs	r3, #0
 800813e:	4640      	mov	r0, r8
 8008140:	4649      	mov	r1, r9
 8008142:	f7f8 fccb 	bl	8000adc <__aeabi_dcmplt>
 8008146:	b110      	cbz	r0, 800814e <_printf_float+0x8a>
 8008148:	232d      	movs	r3, #45	; 0x2d
 800814a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800814e:	4a9c      	ldr	r2, [pc, #624]	; (80083c0 <_printf_float+0x2fc>)
 8008150:	4b9c      	ldr	r3, [pc, #624]	; (80083c4 <_printf_float+0x300>)
 8008152:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008156:	bf8c      	ite	hi
 8008158:	4690      	movhi	r8, r2
 800815a:	4698      	movls	r8, r3
 800815c:	2303      	movs	r3, #3
 800815e:	f02b 0204 	bic.w	r2, fp, #4
 8008162:	6123      	str	r3, [r4, #16]
 8008164:	6022      	str	r2, [r4, #0]
 8008166:	f04f 0900 	mov.w	r9, #0
 800816a:	9700      	str	r7, [sp, #0]
 800816c:	4633      	mov	r3, r6
 800816e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008170:	4621      	mov	r1, r4
 8008172:	4628      	mov	r0, r5
 8008174:	f000 f9e6 	bl	8008544 <_printf_common>
 8008178:	3001      	adds	r0, #1
 800817a:	f040 808d 	bne.w	8008298 <_printf_float+0x1d4>
 800817e:	f04f 30ff 	mov.w	r0, #4294967295
 8008182:	b00d      	add	sp, #52	; 0x34
 8008184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008188:	4642      	mov	r2, r8
 800818a:	464b      	mov	r3, r9
 800818c:	4640      	mov	r0, r8
 800818e:	4649      	mov	r1, r9
 8008190:	f7f8 fccc 	bl	8000b2c <__aeabi_dcmpun>
 8008194:	b110      	cbz	r0, 800819c <_printf_float+0xd8>
 8008196:	4a8c      	ldr	r2, [pc, #560]	; (80083c8 <_printf_float+0x304>)
 8008198:	4b8c      	ldr	r3, [pc, #560]	; (80083cc <_printf_float+0x308>)
 800819a:	e7da      	b.n	8008152 <_printf_float+0x8e>
 800819c:	6861      	ldr	r1, [r4, #4]
 800819e:	1c4b      	adds	r3, r1, #1
 80081a0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80081a4:	a80a      	add	r0, sp, #40	; 0x28
 80081a6:	d13e      	bne.n	8008226 <_printf_float+0x162>
 80081a8:	2306      	movs	r3, #6
 80081aa:	6063      	str	r3, [r4, #4]
 80081ac:	2300      	movs	r3, #0
 80081ae:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80081b2:	ab09      	add	r3, sp, #36	; 0x24
 80081b4:	9300      	str	r3, [sp, #0]
 80081b6:	ec49 8b10 	vmov	d0, r8, r9
 80081ba:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80081be:	6022      	str	r2, [r4, #0]
 80081c0:	f8cd a004 	str.w	sl, [sp, #4]
 80081c4:	6861      	ldr	r1, [r4, #4]
 80081c6:	4628      	mov	r0, r5
 80081c8:	f7ff fee7 	bl	8007f9a <__cvt>
 80081cc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80081d0:	2b47      	cmp	r3, #71	; 0x47
 80081d2:	4680      	mov	r8, r0
 80081d4:	d109      	bne.n	80081ea <_printf_float+0x126>
 80081d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081d8:	1cd8      	adds	r0, r3, #3
 80081da:	db02      	blt.n	80081e2 <_printf_float+0x11e>
 80081dc:	6862      	ldr	r2, [r4, #4]
 80081de:	4293      	cmp	r3, r2
 80081e0:	dd47      	ble.n	8008272 <_printf_float+0x1ae>
 80081e2:	f1aa 0a02 	sub.w	sl, sl, #2
 80081e6:	fa5f fa8a 	uxtb.w	sl, sl
 80081ea:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80081ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081f0:	d824      	bhi.n	800823c <_printf_float+0x178>
 80081f2:	3901      	subs	r1, #1
 80081f4:	4652      	mov	r2, sl
 80081f6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80081fa:	9109      	str	r1, [sp, #36]	; 0x24
 80081fc:	f7ff ff2e 	bl	800805c <__exponent>
 8008200:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008202:	1813      	adds	r3, r2, r0
 8008204:	2a01      	cmp	r2, #1
 8008206:	4681      	mov	r9, r0
 8008208:	6123      	str	r3, [r4, #16]
 800820a:	dc02      	bgt.n	8008212 <_printf_float+0x14e>
 800820c:	6822      	ldr	r2, [r4, #0]
 800820e:	07d1      	lsls	r1, r2, #31
 8008210:	d501      	bpl.n	8008216 <_printf_float+0x152>
 8008212:	3301      	adds	r3, #1
 8008214:	6123      	str	r3, [r4, #16]
 8008216:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800821a:	2b00      	cmp	r3, #0
 800821c:	d0a5      	beq.n	800816a <_printf_float+0xa6>
 800821e:	232d      	movs	r3, #45	; 0x2d
 8008220:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008224:	e7a1      	b.n	800816a <_printf_float+0xa6>
 8008226:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800822a:	f000 8177 	beq.w	800851c <_printf_float+0x458>
 800822e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008232:	d1bb      	bne.n	80081ac <_printf_float+0xe8>
 8008234:	2900      	cmp	r1, #0
 8008236:	d1b9      	bne.n	80081ac <_printf_float+0xe8>
 8008238:	2301      	movs	r3, #1
 800823a:	e7b6      	b.n	80081aa <_printf_float+0xe6>
 800823c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008240:	d119      	bne.n	8008276 <_printf_float+0x1b2>
 8008242:	2900      	cmp	r1, #0
 8008244:	6863      	ldr	r3, [r4, #4]
 8008246:	dd0c      	ble.n	8008262 <_printf_float+0x19e>
 8008248:	6121      	str	r1, [r4, #16]
 800824a:	b913      	cbnz	r3, 8008252 <_printf_float+0x18e>
 800824c:	6822      	ldr	r2, [r4, #0]
 800824e:	07d2      	lsls	r2, r2, #31
 8008250:	d502      	bpl.n	8008258 <_printf_float+0x194>
 8008252:	3301      	adds	r3, #1
 8008254:	440b      	add	r3, r1
 8008256:	6123      	str	r3, [r4, #16]
 8008258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800825a:	65a3      	str	r3, [r4, #88]	; 0x58
 800825c:	f04f 0900 	mov.w	r9, #0
 8008260:	e7d9      	b.n	8008216 <_printf_float+0x152>
 8008262:	b913      	cbnz	r3, 800826a <_printf_float+0x1a6>
 8008264:	6822      	ldr	r2, [r4, #0]
 8008266:	07d0      	lsls	r0, r2, #31
 8008268:	d501      	bpl.n	800826e <_printf_float+0x1aa>
 800826a:	3302      	adds	r3, #2
 800826c:	e7f3      	b.n	8008256 <_printf_float+0x192>
 800826e:	2301      	movs	r3, #1
 8008270:	e7f1      	b.n	8008256 <_printf_float+0x192>
 8008272:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008276:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800827a:	4293      	cmp	r3, r2
 800827c:	db05      	blt.n	800828a <_printf_float+0x1c6>
 800827e:	6822      	ldr	r2, [r4, #0]
 8008280:	6123      	str	r3, [r4, #16]
 8008282:	07d1      	lsls	r1, r2, #31
 8008284:	d5e8      	bpl.n	8008258 <_printf_float+0x194>
 8008286:	3301      	adds	r3, #1
 8008288:	e7e5      	b.n	8008256 <_printf_float+0x192>
 800828a:	2b00      	cmp	r3, #0
 800828c:	bfd4      	ite	le
 800828e:	f1c3 0302 	rsble	r3, r3, #2
 8008292:	2301      	movgt	r3, #1
 8008294:	4413      	add	r3, r2
 8008296:	e7de      	b.n	8008256 <_printf_float+0x192>
 8008298:	6823      	ldr	r3, [r4, #0]
 800829a:	055a      	lsls	r2, r3, #21
 800829c:	d407      	bmi.n	80082ae <_printf_float+0x1ea>
 800829e:	6923      	ldr	r3, [r4, #16]
 80082a0:	4642      	mov	r2, r8
 80082a2:	4631      	mov	r1, r6
 80082a4:	4628      	mov	r0, r5
 80082a6:	47b8      	blx	r7
 80082a8:	3001      	adds	r0, #1
 80082aa:	d12b      	bne.n	8008304 <_printf_float+0x240>
 80082ac:	e767      	b.n	800817e <_printf_float+0xba>
 80082ae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80082b2:	f240 80dc 	bls.w	800846e <_printf_float+0x3aa>
 80082b6:	2200      	movs	r2, #0
 80082b8:	2300      	movs	r3, #0
 80082ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082be:	f7f8 fc03 	bl	8000ac8 <__aeabi_dcmpeq>
 80082c2:	2800      	cmp	r0, #0
 80082c4:	d033      	beq.n	800832e <_printf_float+0x26a>
 80082c6:	2301      	movs	r3, #1
 80082c8:	4a41      	ldr	r2, [pc, #260]	; (80083d0 <_printf_float+0x30c>)
 80082ca:	4631      	mov	r1, r6
 80082cc:	4628      	mov	r0, r5
 80082ce:	47b8      	blx	r7
 80082d0:	3001      	adds	r0, #1
 80082d2:	f43f af54 	beq.w	800817e <_printf_float+0xba>
 80082d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082da:	429a      	cmp	r2, r3
 80082dc:	db02      	blt.n	80082e4 <_printf_float+0x220>
 80082de:	6823      	ldr	r3, [r4, #0]
 80082e0:	07d8      	lsls	r0, r3, #31
 80082e2:	d50f      	bpl.n	8008304 <_printf_float+0x240>
 80082e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082e8:	4631      	mov	r1, r6
 80082ea:	4628      	mov	r0, r5
 80082ec:	47b8      	blx	r7
 80082ee:	3001      	adds	r0, #1
 80082f0:	f43f af45 	beq.w	800817e <_printf_float+0xba>
 80082f4:	f04f 0800 	mov.w	r8, #0
 80082f8:	f104 091a 	add.w	r9, r4, #26
 80082fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082fe:	3b01      	subs	r3, #1
 8008300:	4543      	cmp	r3, r8
 8008302:	dc09      	bgt.n	8008318 <_printf_float+0x254>
 8008304:	6823      	ldr	r3, [r4, #0]
 8008306:	079b      	lsls	r3, r3, #30
 8008308:	f100 8103 	bmi.w	8008512 <_printf_float+0x44e>
 800830c:	68e0      	ldr	r0, [r4, #12]
 800830e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008310:	4298      	cmp	r0, r3
 8008312:	bfb8      	it	lt
 8008314:	4618      	movlt	r0, r3
 8008316:	e734      	b.n	8008182 <_printf_float+0xbe>
 8008318:	2301      	movs	r3, #1
 800831a:	464a      	mov	r2, r9
 800831c:	4631      	mov	r1, r6
 800831e:	4628      	mov	r0, r5
 8008320:	47b8      	blx	r7
 8008322:	3001      	adds	r0, #1
 8008324:	f43f af2b 	beq.w	800817e <_printf_float+0xba>
 8008328:	f108 0801 	add.w	r8, r8, #1
 800832c:	e7e6      	b.n	80082fc <_printf_float+0x238>
 800832e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008330:	2b00      	cmp	r3, #0
 8008332:	dc2b      	bgt.n	800838c <_printf_float+0x2c8>
 8008334:	2301      	movs	r3, #1
 8008336:	4a26      	ldr	r2, [pc, #152]	; (80083d0 <_printf_float+0x30c>)
 8008338:	4631      	mov	r1, r6
 800833a:	4628      	mov	r0, r5
 800833c:	47b8      	blx	r7
 800833e:	3001      	adds	r0, #1
 8008340:	f43f af1d 	beq.w	800817e <_printf_float+0xba>
 8008344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008346:	b923      	cbnz	r3, 8008352 <_printf_float+0x28e>
 8008348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800834a:	b913      	cbnz	r3, 8008352 <_printf_float+0x28e>
 800834c:	6823      	ldr	r3, [r4, #0]
 800834e:	07d9      	lsls	r1, r3, #31
 8008350:	d5d8      	bpl.n	8008304 <_printf_float+0x240>
 8008352:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008356:	4631      	mov	r1, r6
 8008358:	4628      	mov	r0, r5
 800835a:	47b8      	blx	r7
 800835c:	3001      	adds	r0, #1
 800835e:	f43f af0e 	beq.w	800817e <_printf_float+0xba>
 8008362:	f04f 0900 	mov.w	r9, #0
 8008366:	f104 0a1a 	add.w	sl, r4, #26
 800836a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800836c:	425b      	negs	r3, r3
 800836e:	454b      	cmp	r3, r9
 8008370:	dc01      	bgt.n	8008376 <_printf_float+0x2b2>
 8008372:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008374:	e794      	b.n	80082a0 <_printf_float+0x1dc>
 8008376:	2301      	movs	r3, #1
 8008378:	4652      	mov	r2, sl
 800837a:	4631      	mov	r1, r6
 800837c:	4628      	mov	r0, r5
 800837e:	47b8      	blx	r7
 8008380:	3001      	adds	r0, #1
 8008382:	f43f aefc 	beq.w	800817e <_printf_float+0xba>
 8008386:	f109 0901 	add.w	r9, r9, #1
 800838a:	e7ee      	b.n	800836a <_printf_float+0x2a6>
 800838c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800838e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008390:	429a      	cmp	r2, r3
 8008392:	bfa8      	it	ge
 8008394:	461a      	movge	r2, r3
 8008396:	2a00      	cmp	r2, #0
 8008398:	4691      	mov	r9, r2
 800839a:	dd07      	ble.n	80083ac <_printf_float+0x2e8>
 800839c:	4613      	mov	r3, r2
 800839e:	4631      	mov	r1, r6
 80083a0:	4642      	mov	r2, r8
 80083a2:	4628      	mov	r0, r5
 80083a4:	47b8      	blx	r7
 80083a6:	3001      	adds	r0, #1
 80083a8:	f43f aee9 	beq.w	800817e <_printf_float+0xba>
 80083ac:	f104 031a 	add.w	r3, r4, #26
 80083b0:	f04f 0b00 	mov.w	fp, #0
 80083b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083b8:	9306      	str	r3, [sp, #24]
 80083ba:	e015      	b.n	80083e8 <_printf_float+0x324>
 80083bc:	7fefffff 	.word	0x7fefffff
 80083c0:	0800c414 	.word	0x0800c414
 80083c4:	0800c410 	.word	0x0800c410
 80083c8:	0800c41c 	.word	0x0800c41c
 80083cc:	0800c418 	.word	0x0800c418
 80083d0:	0800c420 	.word	0x0800c420
 80083d4:	2301      	movs	r3, #1
 80083d6:	9a06      	ldr	r2, [sp, #24]
 80083d8:	4631      	mov	r1, r6
 80083da:	4628      	mov	r0, r5
 80083dc:	47b8      	blx	r7
 80083de:	3001      	adds	r0, #1
 80083e0:	f43f aecd 	beq.w	800817e <_printf_float+0xba>
 80083e4:	f10b 0b01 	add.w	fp, fp, #1
 80083e8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80083ec:	ebaa 0309 	sub.w	r3, sl, r9
 80083f0:	455b      	cmp	r3, fp
 80083f2:	dcef      	bgt.n	80083d4 <_printf_float+0x310>
 80083f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083f8:	429a      	cmp	r2, r3
 80083fa:	44d0      	add	r8, sl
 80083fc:	db15      	blt.n	800842a <_printf_float+0x366>
 80083fe:	6823      	ldr	r3, [r4, #0]
 8008400:	07da      	lsls	r2, r3, #31
 8008402:	d412      	bmi.n	800842a <_printf_float+0x366>
 8008404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008406:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008408:	eba3 020a 	sub.w	r2, r3, sl
 800840c:	eba3 0a01 	sub.w	sl, r3, r1
 8008410:	4592      	cmp	sl, r2
 8008412:	bfa8      	it	ge
 8008414:	4692      	movge	sl, r2
 8008416:	f1ba 0f00 	cmp.w	sl, #0
 800841a:	dc0e      	bgt.n	800843a <_printf_float+0x376>
 800841c:	f04f 0800 	mov.w	r8, #0
 8008420:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008424:	f104 091a 	add.w	r9, r4, #26
 8008428:	e019      	b.n	800845e <_printf_float+0x39a>
 800842a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800842e:	4631      	mov	r1, r6
 8008430:	4628      	mov	r0, r5
 8008432:	47b8      	blx	r7
 8008434:	3001      	adds	r0, #1
 8008436:	d1e5      	bne.n	8008404 <_printf_float+0x340>
 8008438:	e6a1      	b.n	800817e <_printf_float+0xba>
 800843a:	4653      	mov	r3, sl
 800843c:	4642      	mov	r2, r8
 800843e:	4631      	mov	r1, r6
 8008440:	4628      	mov	r0, r5
 8008442:	47b8      	blx	r7
 8008444:	3001      	adds	r0, #1
 8008446:	d1e9      	bne.n	800841c <_printf_float+0x358>
 8008448:	e699      	b.n	800817e <_printf_float+0xba>
 800844a:	2301      	movs	r3, #1
 800844c:	464a      	mov	r2, r9
 800844e:	4631      	mov	r1, r6
 8008450:	4628      	mov	r0, r5
 8008452:	47b8      	blx	r7
 8008454:	3001      	adds	r0, #1
 8008456:	f43f ae92 	beq.w	800817e <_printf_float+0xba>
 800845a:	f108 0801 	add.w	r8, r8, #1
 800845e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008462:	1a9b      	subs	r3, r3, r2
 8008464:	eba3 030a 	sub.w	r3, r3, sl
 8008468:	4543      	cmp	r3, r8
 800846a:	dcee      	bgt.n	800844a <_printf_float+0x386>
 800846c:	e74a      	b.n	8008304 <_printf_float+0x240>
 800846e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008470:	2a01      	cmp	r2, #1
 8008472:	dc01      	bgt.n	8008478 <_printf_float+0x3b4>
 8008474:	07db      	lsls	r3, r3, #31
 8008476:	d53a      	bpl.n	80084ee <_printf_float+0x42a>
 8008478:	2301      	movs	r3, #1
 800847a:	4642      	mov	r2, r8
 800847c:	4631      	mov	r1, r6
 800847e:	4628      	mov	r0, r5
 8008480:	47b8      	blx	r7
 8008482:	3001      	adds	r0, #1
 8008484:	f43f ae7b 	beq.w	800817e <_printf_float+0xba>
 8008488:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800848c:	4631      	mov	r1, r6
 800848e:	4628      	mov	r0, r5
 8008490:	47b8      	blx	r7
 8008492:	3001      	adds	r0, #1
 8008494:	f108 0801 	add.w	r8, r8, #1
 8008498:	f43f ae71 	beq.w	800817e <_printf_float+0xba>
 800849c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800849e:	2200      	movs	r2, #0
 80084a0:	f103 3aff 	add.w	sl, r3, #4294967295
 80084a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80084a8:	2300      	movs	r3, #0
 80084aa:	f7f8 fb0d 	bl	8000ac8 <__aeabi_dcmpeq>
 80084ae:	b9c8      	cbnz	r0, 80084e4 <_printf_float+0x420>
 80084b0:	4653      	mov	r3, sl
 80084b2:	4642      	mov	r2, r8
 80084b4:	4631      	mov	r1, r6
 80084b6:	4628      	mov	r0, r5
 80084b8:	47b8      	blx	r7
 80084ba:	3001      	adds	r0, #1
 80084bc:	d10e      	bne.n	80084dc <_printf_float+0x418>
 80084be:	e65e      	b.n	800817e <_printf_float+0xba>
 80084c0:	2301      	movs	r3, #1
 80084c2:	4652      	mov	r2, sl
 80084c4:	4631      	mov	r1, r6
 80084c6:	4628      	mov	r0, r5
 80084c8:	47b8      	blx	r7
 80084ca:	3001      	adds	r0, #1
 80084cc:	f43f ae57 	beq.w	800817e <_printf_float+0xba>
 80084d0:	f108 0801 	add.w	r8, r8, #1
 80084d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084d6:	3b01      	subs	r3, #1
 80084d8:	4543      	cmp	r3, r8
 80084da:	dcf1      	bgt.n	80084c0 <_printf_float+0x3fc>
 80084dc:	464b      	mov	r3, r9
 80084de:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80084e2:	e6de      	b.n	80082a2 <_printf_float+0x1de>
 80084e4:	f04f 0800 	mov.w	r8, #0
 80084e8:	f104 0a1a 	add.w	sl, r4, #26
 80084ec:	e7f2      	b.n	80084d4 <_printf_float+0x410>
 80084ee:	2301      	movs	r3, #1
 80084f0:	e7df      	b.n	80084b2 <_printf_float+0x3ee>
 80084f2:	2301      	movs	r3, #1
 80084f4:	464a      	mov	r2, r9
 80084f6:	4631      	mov	r1, r6
 80084f8:	4628      	mov	r0, r5
 80084fa:	47b8      	blx	r7
 80084fc:	3001      	adds	r0, #1
 80084fe:	f43f ae3e 	beq.w	800817e <_printf_float+0xba>
 8008502:	f108 0801 	add.w	r8, r8, #1
 8008506:	68e3      	ldr	r3, [r4, #12]
 8008508:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800850a:	1a9b      	subs	r3, r3, r2
 800850c:	4543      	cmp	r3, r8
 800850e:	dcf0      	bgt.n	80084f2 <_printf_float+0x42e>
 8008510:	e6fc      	b.n	800830c <_printf_float+0x248>
 8008512:	f04f 0800 	mov.w	r8, #0
 8008516:	f104 0919 	add.w	r9, r4, #25
 800851a:	e7f4      	b.n	8008506 <_printf_float+0x442>
 800851c:	2900      	cmp	r1, #0
 800851e:	f43f ae8b 	beq.w	8008238 <_printf_float+0x174>
 8008522:	2300      	movs	r3, #0
 8008524:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008528:	ab09      	add	r3, sp, #36	; 0x24
 800852a:	9300      	str	r3, [sp, #0]
 800852c:	ec49 8b10 	vmov	d0, r8, r9
 8008530:	6022      	str	r2, [r4, #0]
 8008532:	f8cd a004 	str.w	sl, [sp, #4]
 8008536:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800853a:	4628      	mov	r0, r5
 800853c:	f7ff fd2d 	bl	8007f9a <__cvt>
 8008540:	4680      	mov	r8, r0
 8008542:	e648      	b.n	80081d6 <_printf_float+0x112>

08008544 <_printf_common>:
 8008544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008548:	4691      	mov	r9, r2
 800854a:	461f      	mov	r7, r3
 800854c:	688a      	ldr	r2, [r1, #8]
 800854e:	690b      	ldr	r3, [r1, #16]
 8008550:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008554:	4293      	cmp	r3, r2
 8008556:	bfb8      	it	lt
 8008558:	4613      	movlt	r3, r2
 800855a:	f8c9 3000 	str.w	r3, [r9]
 800855e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008562:	4606      	mov	r6, r0
 8008564:	460c      	mov	r4, r1
 8008566:	b112      	cbz	r2, 800856e <_printf_common+0x2a>
 8008568:	3301      	adds	r3, #1
 800856a:	f8c9 3000 	str.w	r3, [r9]
 800856e:	6823      	ldr	r3, [r4, #0]
 8008570:	0699      	lsls	r1, r3, #26
 8008572:	bf42      	ittt	mi
 8008574:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008578:	3302      	addmi	r3, #2
 800857a:	f8c9 3000 	strmi.w	r3, [r9]
 800857e:	6825      	ldr	r5, [r4, #0]
 8008580:	f015 0506 	ands.w	r5, r5, #6
 8008584:	d107      	bne.n	8008596 <_printf_common+0x52>
 8008586:	f104 0a19 	add.w	sl, r4, #25
 800858a:	68e3      	ldr	r3, [r4, #12]
 800858c:	f8d9 2000 	ldr.w	r2, [r9]
 8008590:	1a9b      	subs	r3, r3, r2
 8008592:	42ab      	cmp	r3, r5
 8008594:	dc28      	bgt.n	80085e8 <_printf_common+0xa4>
 8008596:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800859a:	6822      	ldr	r2, [r4, #0]
 800859c:	3300      	adds	r3, #0
 800859e:	bf18      	it	ne
 80085a0:	2301      	movne	r3, #1
 80085a2:	0692      	lsls	r2, r2, #26
 80085a4:	d42d      	bmi.n	8008602 <_printf_common+0xbe>
 80085a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085aa:	4639      	mov	r1, r7
 80085ac:	4630      	mov	r0, r6
 80085ae:	47c0      	blx	r8
 80085b0:	3001      	adds	r0, #1
 80085b2:	d020      	beq.n	80085f6 <_printf_common+0xb2>
 80085b4:	6823      	ldr	r3, [r4, #0]
 80085b6:	68e5      	ldr	r5, [r4, #12]
 80085b8:	f8d9 2000 	ldr.w	r2, [r9]
 80085bc:	f003 0306 	and.w	r3, r3, #6
 80085c0:	2b04      	cmp	r3, #4
 80085c2:	bf08      	it	eq
 80085c4:	1aad      	subeq	r5, r5, r2
 80085c6:	68a3      	ldr	r3, [r4, #8]
 80085c8:	6922      	ldr	r2, [r4, #16]
 80085ca:	bf0c      	ite	eq
 80085cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085d0:	2500      	movne	r5, #0
 80085d2:	4293      	cmp	r3, r2
 80085d4:	bfc4      	itt	gt
 80085d6:	1a9b      	subgt	r3, r3, r2
 80085d8:	18ed      	addgt	r5, r5, r3
 80085da:	f04f 0900 	mov.w	r9, #0
 80085de:	341a      	adds	r4, #26
 80085e0:	454d      	cmp	r5, r9
 80085e2:	d11a      	bne.n	800861a <_printf_common+0xd6>
 80085e4:	2000      	movs	r0, #0
 80085e6:	e008      	b.n	80085fa <_printf_common+0xb6>
 80085e8:	2301      	movs	r3, #1
 80085ea:	4652      	mov	r2, sl
 80085ec:	4639      	mov	r1, r7
 80085ee:	4630      	mov	r0, r6
 80085f0:	47c0      	blx	r8
 80085f2:	3001      	adds	r0, #1
 80085f4:	d103      	bne.n	80085fe <_printf_common+0xba>
 80085f6:	f04f 30ff 	mov.w	r0, #4294967295
 80085fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085fe:	3501      	adds	r5, #1
 8008600:	e7c3      	b.n	800858a <_printf_common+0x46>
 8008602:	18e1      	adds	r1, r4, r3
 8008604:	1c5a      	adds	r2, r3, #1
 8008606:	2030      	movs	r0, #48	; 0x30
 8008608:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800860c:	4422      	add	r2, r4
 800860e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008612:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008616:	3302      	adds	r3, #2
 8008618:	e7c5      	b.n	80085a6 <_printf_common+0x62>
 800861a:	2301      	movs	r3, #1
 800861c:	4622      	mov	r2, r4
 800861e:	4639      	mov	r1, r7
 8008620:	4630      	mov	r0, r6
 8008622:	47c0      	blx	r8
 8008624:	3001      	adds	r0, #1
 8008626:	d0e6      	beq.n	80085f6 <_printf_common+0xb2>
 8008628:	f109 0901 	add.w	r9, r9, #1
 800862c:	e7d8      	b.n	80085e0 <_printf_common+0x9c>
	...

08008630 <_printf_i>:
 8008630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008634:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008638:	460c      	mov	r4, r1
 800863a:	7e09      	ldrb	r1, [r1, #24]
 800863c:	b085      	sub	sp, #20
 800863e:	296e      	cmp	r1, #110	; 0x6e
 8008640:	4617      	mov	r7, r2
 8008642:	4606      	mov	r6, r0
 8008644:	4698      	mov	r8, r3
 8008646:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008648:	f000 80b3 	beq.w	80087b2 <_printf_i+0x182>
 800864c:	d822      	bhi.n	8008694 <_printf_i+0x64>
 800864e:	2963      	cmp	r1, #99	; 0x63
 8008650:	d036      	beq.n	80086c0 <_printf_i+0x90>
 8008652:	d80a      	bhi.n	800866a <_printf_i+0x3a>
 8008654:	2900      	cmp	r1, #0
 8008656:	f000 80b9 	beq.w	80087cc <_printf_i+0x19c>
 800865a:	2958      	cmp	r1, #88	; 0x58
 800865c:	f000 8083 	beq.w	8008766 <_printf_i+0x136>
 8008660:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008664:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008668:	e032      	b.n	80086d0 <_printf_i+0xa0>
 800866a:	2964      	cmp	r1, #100	; 0x64
 800866c:	d001      	beq.n	8008672 <_printf_i+0x42>
 800866e:	2969      	cmp	r1, #105	; 0x69
 8008670:	d1f6      	bne.n	8008660 <_printf_i+0x30>
 8008672:	6820      	ldr	r0, [r4, #0]
 8008674:	6813      	ldr	r3, [r2, #0]
 8008676:	0605      	lsls	r5, r0, #24
 8008678:	f103 0104 	add.w	r1, r3, #4
 800867c:	d52a      	bpl.n	80086d4 <_printf_i+0xa4>
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	6011      	str	r1, [r2, #0]
 8008682:	2b00      	cmp	r3, #0
 8008684:	da03      	bge.n	800868e <_printf_i+0x5e>
 8008686:	222d      	movs	r2, #45	; 0x2d
 8008688:	425b      	negs	r3, r3
 800868a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800868e:	486f      	ldr	r0, [pc, #444]	; (800884c <_printf_i+0x21c>)
 8008690:	220a      	movs	r2, #10
 8008692:	e039      	b.n	8008708 <_printf_i+0xd8>
 8008694:	2973      	cmp	r1, #115	; 0x73
 8008696:	f000 809d 	beq.w	80087d4 <_printf_i+0x1a4>
 800869a:	d808      	bhi.n	80086ae <_printf_i+0x7e>
 800869c:	296f      	cmp	r1, #111	; 0x6f
 800869e:	d020      	beq.n	80086e2 <_printf_i+0xb2>
 80086a0:	2970      	cmp	r1, #112	; 0x70
 80086a2:	d1dd      	bne.n	8008660 <_printf_i+0x30>
 80086a4:	6823      	ldr	r3, [r4, #0]
 80086a6:	f043 0320 	orr.w	r3, r3, #32
 80086aa:	6023      	str	r3, [r4, #0]
 80086ac:	e003      	b.n	80086b6 <_printf_i+0x86>
 80086ae:	2975      	cmp	r1, #117	; 0x75
 80086b0:	d017      	beq.n	80086e2 <_printf_i+0xb2>
 80086b2:	2978      	cmp	r1, #120	; 0x78
 80086b4:	d1d4      	bne.n	8008660 <_printf_i+0x30>
 80086b6:	2378      	movs	r3, #120	; 0x78
 80086b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80086bc:	4864      	ldr	r0, [pc, #400]	; (8008850 <_printf_i+0x220>)
 80086be:	e055      	b.n	800876c <_printf_i+0x13c>
 80086c0:	6813      	ldr	r3, [r2, #0]
 80086c2:	1d19      	adds	r1, r3, #4
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	6011      	str	r1, [r2, #0]
 80086c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086d0:	2301      	movs	r3, #1
 80086d2:	e08c      	b.n	80087ee <_printf_i+0x1be>
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	6011      	str	r1, [r2, #0]
 80086d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80086dc:	bf18      	it	ne
 80086de:	b21b      	sxthne	r3, r3
 80086e0:	e7cf      	b.n	8008682 <_printf_i+0x52>
 80086e2:	6813      	ldr	r3, [r2, #0]
 80086e4:	6825      	ldr	r5, [r4, #0]
 80086e6:	1d18      	adds	r0, r3, #4
 80086e8:	6010      	str	r0, [r2, #0]
 80086ea:	0628      	lsls	r0, r5, #24
 80086ec:	d501      	bpl.n	80086f2 <_printf_i+0xc2>
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	e002      	b.n	80086f8 <_printf_i+0xc8>
 80086f2:	0668      	lsls	r0, r5, #25
 80086f4:	d5fb      	bpl.n	80086ee <_printf_i+0xbe>
 80086f6:	881b      	ldrh	r3, [r3, #0]
 80086f8:	4854      	ldr	r0, [pc, #336]	; (800884c <_printf_i+0x21c>)
 80086fa:	296f      	cmp	r1, #111	; 0x6f
 80086fc:	bf14      	ite	ne
 80086fe:	220a      	movne	r2, #10
 8008700:	2208      	moveq	r2, #8
 8008702:	2100      	movs	r1, #0
 8008704:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008708:	6865      	ldr	r5, [r4, #4]
 800870a:	60a5      	str	r5, [r4, #8]
 800870c:	2d00      	cmp	r5, #0
 800870e:	f2c0 8095 	blt.w	800883c <_printf_i+0x20c>
 8008712:	6821      	ldr	r1, [r4, #0]
 8008714:	f021 0104 	bic.w	r1, r1, #4
 8008718:	6021      	str	r1, [r4, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d13d      	bne.n	800879a <_printf_i+0x16a>
 800871e:	2d00      	cmp	r5, #0
 8008720:	f040 808e 	bne.w	8008840 <_printf_i+0x210>
 8008724:	4665      	mov	r5, ip
 8008726:	2a08      	cmp	r2, #8
 8008728:	d10b      	bne.n	8008742 <_printf_i+0x112>
 800872a:	6823      	ldr	r3, [r4, #0]
 800872c:	07db      	lsls	r3, r3, #31
 800872e:	d508      	bpl.n	8008742 <_printf_i+0x112>
 8008730:	6923      	ldr	r3, [r4, #16]
 8008732:	6862      	ldr	r2, [r4, #4]
 8008734:	429a      	cmp	r2, r3
 8008736:	bfde      	ittt	le
 8008738:	2330      	movle	r3, #48	; 0x30
 800873a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800873e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008742:	ebac 0305 	sub.w	r3, ip, r5
 8008746:	6123      	str	r3, [r4, #16]
 8008748:	f8cd 8000 	str.w	r8, [sp]
 800874c:	463b      	mov	r3, r7
 800874e:	aa03      	add	r2, sp, #12
 8008750:	4621      	mov	r1, r4
 8008752:	4630      	mov	r0, r6
 8008754:	f7ff fef6 	bl	8008544 <_printf_common>
 8008758:	3001      	adds	r0, #1
 800875a:	d14d      	bne.n	80087f8 <_printf_i+0x1c8>
 800875c:	f04f 30ff 	mov.w	r0, #4294967295
 8008760:	b005      	add	sp, #20
 8008762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008766:	4839      	ldr	r0, [pc, #228]	; (800884c <_printf_i+0x21c>)
 8008768:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800876c:	6813      	ldr	r3, [r2, #0]
 800876e:	6821      	ldr	r1, [r4, #0]
 8008770:	1d1d      	adds	r5, r3, #4
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	6015      	str	r5, [r2, #0]
 8008776:	060a      	lsls	r2, r1, #24
 8008778:	d50b      	bpl.n	8008792 <_printf_i+0x162>
 800877a:	07ca      	lsls	r2, r1, #31
 800877c:	bf44      	itt	mi
 800877e:	f041 0120 	orrmi.w	r1, r1, #32
 8008782:	6021      	strmi	r1, [r4, #0]
 8008784:	b91b      	cbnz	r3, 800878e <_printf_i+0x15e>
 8008786:	6822      	ldr	r2, [r4, #0]
 8008788:	f022 0220 	bic.w	r2, r2, #32
 800878c:	6022      	str	r2, [r4, #0]
 800878e:	2210      	movs	r2, #16
 8008790:	e7b7      	b.n	8008702 <_printf_i+0xd2>
 8008792:	064d      	lsls	r5, r1, #25
 8008794:	bf48      	it	mi
 8008796:	b29b      	uxthmi	r3, r3
 8008798:	e7ef      	b.n	800877a <_printf_i+0x14a>
 800879a:	4665      	mov	r5, ip
 800879c:	fbb3 f1f2 	udiv	r1, r3, r2
 80087a0:	fb02 3311 	mls	r3, r2, r1, r3
 80087a4:	5cc3      	ldrb	r3, [r0, r3]
 80087a6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80087aa:	460b      	mov	r3, r1
 80087ac:	2900      	cmp	r1, #0
 80087ae:	d1f5      	bne.n	800879c <_printf_i+0x16c>
 80087b0:	e7b9      	b.n	8008726 <_printf_i+0xf6>
 80087b2:	6813      	ldr	r3, [r2, #0]
 80087b4:	6825      	ldr	r5, [r4, #0]
 80087b6:	6961      	ldr	r1, [r4, #20]
 80087b8:	1d18      	adds	r0, r3, #4
 80087ba:	6010      	str	r0, [r2, #0]
 80087bc:	0628      	lsls	r0, r5, #24
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	d501      	bpl.n	80087c6 <_printf_i+0x196>
 80087c2:	6019      	str	r1, [r3, #0]
 80087c4:	e002      	b.n	80087cc <_printf_i+0x19c>
 80087c6:	066a      	lsls	r2, r5, #25
 80087c8:	d5fb      	bpl.n	80087c2 <_printf_i+0x192>
 80087ca:	8019      	strh	r1, [r3, #0]
 80087cc:	2300      	movs	r3, #0
 80087ce:	6123      	str	r3, [r4, #16]
 80087d0:	4665      	mov	r5, ip
 80087d2:	e7b9      	b.n	8008748 <_printf_i+0x118>
 80087d4:	6813      	ldr	r3, [r2, #0]
 80087d6:	1d19      	adds	r1, r3, #4
 80087d8:	6011      	str	r1, [r2, #0]
 80087da:	681d      	ldr	r5, [r3, #0]
 80087dc:	6862      	ldr	r2, [r4, #4]
 80087de:	2100      	movs	r1, #0
 80087e0:	4628      	mov	r0, r5
 80087e2:	f7f7 fcfd 	bl	80001e0 <memchr>
 80087e6:	b108      	cbz	r0, 80087ec <_printf_i+0x1bc>
 80087e8:	1b40      	subs	r0, r0, r5
 80087ea:	6060      	str	r0, [r4, #4]
 80087ec:	6863      	ldr	r3, [r4, #4]
 80087ee:	6123      	str	r3, [r4, #16]
 80087f0:	2300      	movs	r3, #0
 80087f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087f6:	e7a7      	b.n	8008748 <_printf_i+0x118>
 80087f8:	6923      	ldr	r3, [r4, #16]
 80087fa:	462a      	mov	r2, r5
 80087fc:	4639      	mov	r1, r7
 80087fe:	4630      	mov	r0, r6
 8008800:	47c0      	blx	r8
 8008802:	3001      	adds	r0, #1
 8008804:	d0aa      	beq.n	800875c <_printf_i+0x12c>
 8008806:	6823      	ldr	r3, [r4, #0]
 8008808:	079b      	lsls	r3, r3, #30
 800880a:	d413      	bmi.n	8008834 <_printf_i+0x204>
 800880c:	68e0      	ldr	r0, [r4, #12]
 800880e:	9b03      	ldr	r3, [sp, #12]
 8008810:	4298      	cmp	r0, r3
 8008812:	bfb8      	it	lt
 8008814:	4618      	movlt	r0, r3
 8008816:	e7a3      	b.n	8008760 <_printf_i+0x130>
 8008818:	2301      	movs	r3, #1
 800881a:	464a      	mov	r2, r9
 800881c:	4639      	mov	r1, r7
 800881e:	4630      	mov	r0, r6
 8008820:	47c0      	blx	r8
 8008822:	3001      	adds	r0, #1
 8008824:	d09a      	beq.n	800875c <_printf_i+0x12c>
 8008826:	3501      	adds	r5, #1
 8008828:	68e3      	ldr	r3, [r4, #12]
 800882a:	9a03      	ldr	r2, [sp, #12]
 800882c:	1a9b      	subs	r3, r3, r2
 800882e:	42ab      	cmp	r3, r5
 8008830:	dcf2      	bgt.n	8008818 <_printf_i+0x1e8>
 8008832:	e7eb      	b.n	800880c <_printf_i+0x1dc>
 8008834:	2500      	movs	r5, #0
 8008836:	f104 0919 	add.w	r9, r4, #25
 800883a:	e7f5      	b.n	8008828 <_printf_i+0x1f8>
 800883c:	2b00      	cmp	r3, #0
 800883e:	d1ac      	bne.n	800879a <_printf_i+0x16a>
 8008840:	7803      	ldrb	r3, [r0, #0]
 8008842:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008846:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800884a:	e76c      	b.n	8008726 <_printf_i+0xf6>
 800884c:	0800c422 	.word	0x0800c422
 8008850:	0800c433 	.word	0x0800c433

08008854 <_scanf_float>:
 8008854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008858:	469a      	mov	sl, r3
 800885a:	688b      	ldr	r3, [r1, #8]
 800885c:	4616      	mov	r6, r2
 800885e:	1e5a      	subs	r2, r3, #1
 8008860:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008864:	b087      	sub	sp, #28
 8008866:	bf83      	ittte	hi
 8008868:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800886c:	189b      	addhi	r3, r3, r2
 800886e:	9301      	strhi	r3, [sp, #4]
 8008870:	2300      	movls	r3, #0
 8008872:	bf86      	itte	hi
 8008874:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008878:	608b      	strhi	r3, [r1, #8]
 800887a:	9301      	strls	r3, [sp, #4]
 800887c:	680b      	ldr	r3, [r1, #0]
 800887e:	4688      	mov	r8, r1
 8008880:	f04f 0b00 	mov.w	fp, #0
 8008884:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008888:	f848 3b1c 	str.w	r3, [r8], #28
 800888c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8008890:	4607      	mov	r7, r0
 8008892:	460c      	mov	r4, r1
 8008894:	4645      	mov	r5, r8
 8008896:	465a      	mov	r2, fp
 8008898:	46d9      	mov	r9, fp
 800889a:	f8cd b008 	str.w	fp, [sp, #8]
 800889e:	68a1      	ldr	r1, [r4, #8]
 80088a0:	b181      	cbz	r1, 80088c4 <_scanf_float+0x70>
 80088a2:	6833      	ldr	r3, [r6, #0]
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	2b49      	cmp	r3, #73	; 0x49
 80088a8:	d071      	beq.n	800898e <_scanf_float+0x13a>
 80088aa:	d84d      	bhi.n	8008948 <_scanf_float+0xf4>
 80088ac:	2b39      	cmp	r3, #57	; 0x39
 80088ae:	d840      	bhi.n	8008932 <_scanf_float+0xde>
 80088b0:	2b31      	cmp	r3, #49	; 0x31
 80088b2:	f080 8088 	bcs.w	80089c6 <_scanf_float+0x172>
 80088b6:	2b2d      	cmp	r3, #45	; 0x2d
 80088b8:	f000 8090 	beq.w	80089dc <_scanf_float+0x188>
 80088bc:	d815      	bhi.n	80088ea <_scanf_float+0x96>
 80088be:	2b2b      	cmp	r3, #43	; 0x2b
 80088c0:	f000 808c 	beq.w	80089dc <_scanf_float+0x188>
 80088c4:	f1b9 0f00 	cmp.w	r9, #0
 80088c8:	d003      	beq.n	80088d2 <_scanf_float+0x7e>
 80088ca:	6823      	ldr	r3, [r4, #0]
 80088cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088d0:	6023      	str	r3, [r4, #0]
 80088d2:	3a01      	subs	r2, #1
 80088d4:	2a01      	cmp	r2, #1
 80088d6:	f200 80ea 	bhi.w	8008aae <_scanf_float+0x25a>
 80088da:	4545      	cmp	r5, r8
 80088dc:	f200 80dc 	bhi.w	8008a98 <_scanf_float+0x244>
 80088e0:	2601      	movs	r6, #1
 80088e2:	4630      	mov	r0, r6
 80088e4:	b007      	add	sp, #28
 80088e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ea:	2b2e      	cmp	r3, #46	; 0x2e
 80088ec:	f000 809f 	beq.w	8008a2e <_scanf_float+0x1da>
 80088f0:	2b30      	cmp	r3, #48	; 0x30
 80088f2:	d1e7      	bne.n	80088c4 <_scanf_float+0x70>
 80088f4:	6820      	ldr	r0, [r4, #0]
 80088f6:	f410 7f80 	tst.w	r0, #256	; 0x100
 80088fa:	d064      	beq.n	80089c6 <_scanf_float+0x172>
 80088fc:	9b01      	ldr	r3, [sp, #4]
 80088fe:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8008902:	6020      	str	r0, [r4, #0]
 8008904:	f109 0901 	add.w	r9, r9, #1
 8008908:	b11b      	cbz	r3, 8008912 <_scanf_float+0xbe>
 800890a:	3b01      	subs	r3, #1
 800890c:	3101      	adds	r1, #1
 800890e:	9301      	str	r3, [sp, #4]
 8008910:	60a1      	str	r1, [r4, #8]
 8008912:	68a3      	ldr	r3, [r4, #8]
 8008914:	3b01      	subs	r3, #1
 8008916:	60a3      	str	r3, [r4, #8]
 8008918:	6923      	ldr	r3, [r4, #16]
 800891a:	3301      	adds	r3, #1
 800891c:	6123      	str	r3, [r4, #16]
 800891e:	6873      	ldr	r3, [r6, #4]
 8008920:	3b01      	subs	r3, #1
 8008922:	2b00      	cmp	r3, #0
 8008924:	6073      	str	r3, [r6, #4]
 8008926:	f340 80ac 	ble.w	8008a82 <_scanf_float+0x22e>
 800892a:	6833      	ldr	r3, [r6, #0]
 800892c:	3301      	adds	r3, #1
 800892e:	6033      	str	r3, [r6, #0]
 8008930:	e7b5      	b.n	800889e <_scanf_float+0x4a>
 8008932:	2b45      	cmp	r3, #69	; 0x45
 8008934:	f000 8085 	beq.w	8008a42 <_scanf_float+0x1ee>
 8008938:	2b46      	cmp	r3, #70	; 0x46
 800893a:	d06a      	beq.n	8008a12 <_scanf_float+0x1be>
 800893c:	2b41      	cmp	r3, #65	; 0x41
 800893e:	d1c1      	bne.n	80088c4 <_scanf_float+0x70>
 8008940:	2a01      	cmp	r2, #1
 8008942:	d1bf      	bne.n	80088c4 <_scanf_float+0x70>
 8008944:	2202      	movs	r2, #2
 8008946:	e046      	b.n	80089d6 <_scanf_float+0x182>
 8008948:	2b65      	cmp	r3, #101	; 0x65
 800894a:	d07a      	beq.n	8008a42 <_scanf_float+0x1ee>
 800894c:	d818      	bhi.n	8008980 <_scanf_float+0x12c>
 800894e:	2b54      	cmp	r3, #84	; 0x54
 8008950:	d066      	beq.n	8008a20 <_scanf_float+0x1cc>
 8008952:	d811      	bhi.n	8008978 <_scanf_float+0x124>
 8008954:	2b4e      	cmp	r3, #78	; 0x4e
 8008956:	d1b5      	bne.n	80088c4 <_scanf_float+0x70>
 8008958:	2a00      	cmp	r2, #0
 800895a:	d146      	bne.n	80089ea <_scanf_float+0x196>
 800895c:	f1b9 0f00 	cmp.w	r9, #0
 8008960:	d145      	bne.n	80089ee <_scanf_float+0x19a>
 8008962:	6821      	ldr	r1, [r4, #0]
 8008964:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008968:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800896c:	d13f      	bne.n	80089ee <_scanf_float+0x19a>
 800896e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008972:	6021      	str	r1, [r4, #0]
 8008974:	2201      	movs	r2, #1
 8008976:	e02e      	b.n	80089d6 <_scanf_float+0x182>
 8008978:	2b59      	cmp	r3, #89	; 0x59
 800897a:	d01e      	beq.n	80089ba <_scanf_float+0x166>
 800897c:	2b61      	cmp	r3, #97	; 0x61
 800897e:	e7de      	b.n	800893e <_scanf_float+0xea>
 8008980:	2b6e      	cmp	r3, #110	; 0x6e
 8008982:	d0e9      	beq.n	8008958 <_scanf_float+0x104>
 8008984:	d815      	bhi.n	80089b2 <_scanf_float+0x15e>
 8008986:	2b66      	cmp	r3, #102	; 0x66
 8008988:	d043      	beq.n	8008a12 <_scanf_float+0x1be>
 800898a:	2b69      	cmp	r3, #105	; 0x69
 800898c:	d19a      	bne.n	80088c4 <_scanf_float+0x70>
 800898e:	f1bb 0f00 	cmp.w	fp, #0
 8008992:	d138      	bne.n	8008a06 <_scanf_float+0x1b2>
 8008994:	f1b9 0f00 	cmp.w	r9, #0
 8008998:	d197      	bne.n	80088ca <_scanf_float+0x76>
 800899a:	6821      	ldr	r1, [r4, #0]
 800899c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80089a0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80089a4:	d195      	bne.n	80088d2 <_scanf_float+0x7e>
 80089a6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80089aa:	6021      	str	r1, [r4, #0]
 80089ac:	f04f 0b01 	mov.w	fp, #1
 80089b0:	e011      	b.n	80089d6 <_scanf_float+0x182>
 80089b2:	2b74      	cmp	r3, #116	; 0x74
 80089b4:	d034      	beq.n	8008a20 <_scanf_float+0x1cc>
 80089b6:	2b79      	cmp	r3, #121	; 0x79
 80089b8:	d184      	bne.n	80088c4 <_scanf_float+0x70>
 80089ba:	f1bb 0f07 	cmp.w	fp, #7
 80089be:	d181      	bne.n	80088c4 <_scanf_float+0x70>
 80089c0:	f04f 0b08 	mov.w	fp, #8
 80089c4:	e007      	b.n	80089d6 <_scanf_float+0x182>
 80089c6:	eb12 0f0b 	cmn.w	r2, fp
 80089ca:	f47f af7b 	bne.w	80088c4 <_scanf_float+0x70>
 80089ce:	6821      	ldr	r1, [r4, #0]
 80089d0:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80089d4:	6021      	str	r1, [r4, #0]
 80089d6:	702b      	strb	r3, [r5, #0]
 80089d8:	3501      	adds	r5, #1
 80089da:	e79a      	b.n	8008912 <_scanf_float+0xbe>
 80089dc:	6821      	ldr	r1, [r4, #0]
 80089de:	0608      	lsls	r0, r1, #24
 80089e0:	f57f af70 	bpl.w	80088c4 <_scanf_float+0x70>
 80089e4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80089e8:	e7f4      	b.n	80089d4 <_scanf_float+0x180>
 80089ea:	2a02      	cmp	r2, #2
 80089ec:	d047      	beq.n	8008a7e <_scanf_float+0x22a>
 80089ee:	f1bb 0f01 	cmp.w	fp, #1
 80089f2:	d003      	beq.n	80089fc <_scanf_float+0x1a8>
 80089f4:	f1bb 0f04 	cmp.w	fp, #4
 80089f8:	f47f af64 	bne.w	80088c4 <_scanf_float+0x70>
 80089fc:	f10b 0b01 	add.w	fp, fp, #1
 8008a00:	fa5f fb8b 	uxtb.w	fp, fp
 8008a04:	e7e7      	b.n	80089d6 <_scanf_float+0x182>
 8008a06:	f1bb 0f03 	cmp.w	fp, #3
 8008a0a:	d0f7      	beq.n	80089fc <_scanf_float+0x1a8>
 8008a0c:	f1bb 0f05 	cmp.w	fp, #5
 8008a10:	e7f2      	b.n	80089f8 <_scanf_float+0x1a4>
 8008a12:	f1bb 0f02 	cmp.w	fp, #2
 8008a16:	f47f af55 	bne.w	80088c4 <_scanf_float+0x70>
 8008a1a:	f04f 0b03 	mov.w	fp, #3
 8008a1e:	e7da      	b.n	80089d6 <_scanf_float+0x182>
 8008a20:	f1bb 0f06 	cmp.w	fp, #6
 8008a24:	f47f af4e 	bne.w	80088c4 <_scanf_float+0x70>
 8008a28:	f04f 0b07 	mov.w	fp, #7
 8008a2c:	e7d3      	b.n	80089d6 <_scanf_float+0x182>
 8008a2e:	6821      	ldr	r1, [r4, #0]
 8008a30:	0588      	lsls	r0, r1, #22
 8008a32:	f57f af47 	bpl.w	80088c4 <_scanf_float+0x70>
 8008a36:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8008a3a:	6021      	str	r1, [r4, #0]
 8008a3c:	f8cd 9008 	str.w	r9, [sp, #8]
 8008a40:	e7c9      	b.n	80089d6 <_scanf_float+0x182>
 8008a42:	6821      	ldr	r1, [r4, #0]
 8008a44:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8008a48:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8008a4c:	d006      	beq.n	8008a5c <_scanf_float+0x208>
 8008a4e:	0548      	lsls	r0, r1, #21
 8008a50:	f57f af38 	bpl.w	80088c4 <_scanf_float+0x70>
 8008a54:	f1b9 0f00 	cmp.w	r9, #0
 8008a58:	f43f af3b 	beq.w	80088d2 <_scanf_float+0x7e>
 8008a5c:	0588      	lsls	r0, r1, #22
 8008a5e:	bf58      	it	pl
 8008a60:	9802      	ldrpl	r0, [sp, #8]
 8008a62:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008a66:	bf58      	it	pl
 8008a68:	eba9 0000 	subpl.w	r0, r9, r0
 8008a6c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8008a70:	bf58      	it	pl
 8008a72:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8008a76:	6021      	str	r1, [r4, #0]
 8008a78:	f04f 0900 	mov.w	r9, #0
 8008a7c:	e7ab      	b.n	80089d6 <_scanf_float+0x182>
 8008a7e:	2203      	movs	r2, #3
 8008a80:	e7a9      	b.n	80089d6 <_scanf_float+0x182>
 8008a82:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008a86:	9205      	str	r2, [sp, #20]
 8008a88:	4631      	mov	r1, r6
 8008a8a:	4638      	mov	r0, r7
 8008a8c:	4798      	blx	r3
 8008a8e:	9a05      	ldr	r2, [sp, #20]
 8008a90:	2800      	cmp	r0, #0
 8008a92:	f43f af04 	beq.w	800889e <_scanf_float+0x4a>
 8008a96:	e715      	b.n	80088c4 <_scanf_float+0x70>
 8008a98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a9c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008aa0:	4632      	mov	r2, r6
 8008aa2:	4638      	mov	r0, r7
 8008aa4:	4798      	blx	r3
 8008aa6:	6923      	ldr	r3, [r4, #16]
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	6123      	str	r3, [r4, #16]
 8008aac:	e715      	b.n	80088da <_scanf_float+0x86>
 8008aae:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008ab2:	2b06      	cmp	r3, #6
 8008ab4:	d80a      	bhi.n	8008acc <_scanf_float+0x278>
 8008ab6:	f1bb 0f02 	cmp.w	fp, #2
 8008aba:	d968      	bls.n	8008b8e <_scanf_float+0x33a>
 8008abc:	f1ab 0b03 	sub.w	fp, fp, #3
 8008ac0:	fa5f fb8b 	uxtb.w	fp, fp
 8008ac4:	eba5 0b0b 	sub.w	fp, r5, fp
 8008ac8:	455d      	cmp	r5, fp
 8008aca:	d14b      	bne.n	8008b64 <_scanf_float+0x310>
 8008acc:	6823      	ldr	r3, [r4, #0]
 8008ace:	05da      	lsls	r2, r3, #23
 8008ad0:	d51f      	bpl.n	8008b12 <_scanf_float+0x2be>
 8008ad2:	055b      	lsls	r3, r3, #21
 8008ad4:	d468      	bmi.n	8008ba8 <_scanf_float+0x354>
 8008ad6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008ada:	6923      	ldr	r3, [r4, #16]
 8008adc:	2965      	cmp	r1, #101	; 0x65
 8008ade:	f103 33ff 	add.w	r3, r3, #4294967295
 8008ae2:	f105 3bff 	add.w	fp, r5, #4294967295
 8008ae6:	6123      	str	r3, [r4, #16]
 8008ae8:	d00d      	beq.n	8008b06 <_scanf_float+0x2b2>
 8008aea:	2945      	cmp	r1, #69	; 0x45
 8008aec:	d00b      	beq.n	8008b06 <_scanf_float+0x2b2>
 8008aee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008af2:	4632      	mov	r2, r6
 8008af4:	4638      	mov	r0, r7
 8008af6:	4798      	blx	r3
 8008af8:	6923      	ldr	r3, [r4, #16]
 8008afa:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8008afe:	3b01      	subs	r3, #1
 8008b00:	f1a5 0b02 	sub.w	fp, r5, #2
 8008b04:	6123      	str	r3, [r4, #16]
 8008b06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b0a:	4632      	mov	r2, r6
 8008b0c:	4638      	mov	r0, r7
 8008b0e:	4798      	blx	r3
 8008b10:	465d      	mov	r5, fp
 8008b12:	6826      	ldr	r6, [r4, #0]
 8008b14:	f016 0610 	ands.w	r6, r6, #16
 8008b18:	d17a      	bne.n	8008c10 <_scanf_float+0x3bc>
 8008b1a:	702e      	strb	r6, [r5, #0]
 8008b1c:	6823      	ldr	r3, [r4, #0]
 8008b1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b26:	d142      	bne.n	8008bae <_scanf_float+0x35a>
 8008b28:	9b02      	ldr	r3, [sp, #8]
 8008b2a:	eba9 0303 	sub.w	r3, r9, r3
 8008b2e:	425a      	negs	r2, r3
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d149      	bne.n	8008bc8 <_scanf_float+0x374>
 8008b34:	2200      	movs	r2, #0
 8008b36:	4641      	mov	r1, r8
 8008b38:	4638      	mov	r0, r7
 8008b3a:	f000 febd 	bl	80098b8 <_strtod_r>
 8008b3e:	6825      	ldr	r5, [r4, #0]
 8008b40:	f8da 3000 	ldr.w	r3, [sl]
 8008b44:	f015 0f02 	tst.w	r5, #2
 8008b48:	f103 0204 	add.w	r2, r3, #4
 8008b4c:	ec59 8b10 	vmov	r8, r9, d0
 8008b50:	f8ca 2000 	str.w	r2, [sl]
 8008b54:	d043      	beq.n	8008bde <_scanf_float+0x38a>
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	e9c3 8900 	strd	r8, r9, [r3]
 8008b5c:	68e3      	ldr	r3, [r4, #12]
 8008b5e:	3301      	adds	r3, #1
 8008b60:	60e3      	str	r3, [r4, #12]
 8008b62:	e6be      	b.n	80088e2 <_scanf_float+0x8e>
 8008b64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b68:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008b6c:	4632      	mov	r2, r6
 8008b6e:	4638      	mov	r0, r7
 8008b70:	4798      	blx	r3
 8008b72:	6923      	ldr	r3, [r4, #16]
 8008b74:	3b01      	subs	r3, #1
 8008b76:	6123      	str	r3, [r4, #16]
 8008b78:	e7a6      	b.n	8008ac8 <_scanf_float+0x274>
 8008b7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b7e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008b82:	4632      	mov	r2, r6
 8008b84:	4638      	mov	r0, r7
 8008b86:	4798      	blx	r3
 8008b88:	6923      	ldr	r3, [r4, #16]
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	6123      	str	r3, [r4, #16]
 8008b8e:	4545      	cmp	r5, r8
 8008b90:	d8f3      	bhi.n	8008b7a <_scanf_float+0x326>
 8008b92:	e6a5      	b.n	80088e0 <_scanf_float+0x8c>
 8008b94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b98:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008b9c:	4632      	mov	r2, r6
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	4798      	blx	r3
 8008ba2:	6923      	ldr	r3, [r4, #16]
 8008ba4:	3b01      	subs	r3, #1
 8008ba6:	6123      	str	r3, [r4, #16]
 8008ba8:	4545      	cmp	r5, r8
 8008baa:	d8f3      	bhi.n	8008b94 <_scanf_float+0x340>
 8008bac:	e698      	b.n	80088e0 <_scanf_float+0x8c>
 8008bae:	9b03      	ldr	r3, [sp, #12]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d0bf      	beq.n	8008b34 <_scanf_float+0x2e0>
 8008bb4:	9904      	ldr	r1, [sp, #16]
 8008bb6:	230a      	movs	r3, #10
 8008bb8:	4632      	mov	r2, r6
 8008bba:	3101      	adds	r1, #1
 8008bbc:	4638      	mov	r0, r7
 8008bbe:	f000 ff07 	bl	80099d0 <_strtol_r>
 8008bc2:	9b03      	ldr	r3, [sp, #12]
 8008bc4:	9d04      	ldr	r5, [sp, #16]
 8008bc6:	1ac2      	subs	r2, r0, r3
 8008bc8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008bcc:	429d      	cmp	r5, r3
 8008bce:	bf28      	it	cs
 8008bd0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8008bd4:	490f      	ldr	r1, [pc, #60]	; (8008c14 <_scanf_float+0x3c0>)
 8008bd6:	4628      	mov	r0, r5
 8008bd8:	f000 f83c 	bl	8008c54 <siprintf>
 8008bdc:	e7aa      	b.n	8008b34 <_scanf_float+0x2e0>
 8008bde:	f015 0504 	ands.w	r5, r5, #4
 8008be2:	d1b8      	bne.n	8008b56 <_scanf_float+0x302>
 8008be4:	681f      	ldr	r7, [r3, #0]
 8008be6:	ee10 2a10 	vmov	r2, s0
 8008bea:	464b      	mov	r3, r9
 8008bec:	ee10 0a10 	vmov	r0, s0
 8008bf0:	4649      	mov	r1, r9
 8008bf2:	f7f7 ff9b 	bl	8000b2c <__aeabi_dcmpun>
 8008bf6:	b128      	cbz	r0, 8008c04 <_scanf_float+0x3b0>
 8008bf8:	4628      	mov	r0, r5
 8008bfa:	f000 f825 	bl	8008c48 <nanf>
 8008bfe:	ed87 0a00 	vstr	s0, [r7]
 8008c02:	e7ab      	b.n	8008b5c <_scanf_float+0x308>
 8008c04:	4640      	mov	r0, r8
 8008c06:	4649      	mov	r1, r9
 8008c08:	f7f7 ffee 	bl	8000be8 <__aeabi_d2f>
 8008c0c:	6038      	str	r0, [r7, #0]
 8008c0e:	e7a5      	b.n	8008b5c <_scanf_float+0x308>
 8008c10:	2600      	movs	r6, #0
 8008c12:	e666      	b.n	80088e2 <_scanf_float+0x8e>
 8008c14:	0800c444 	.word	0x0800c444

08008c18 <iprintf>:
 8008c18:	b40f      	push	{r0, r1, r2, r3}
 8008c1a:	4b0a      	ldr	r3, [pc, #40]	; (8008c44 <iprintf+0x2c>)
 8008c1c:	b513      	push	{r0, r1, r4, lr}
 8008c1e:	681c      	ldr	r4, [r3, #0]
 8008c20:	b124      	cbz	r4, 8008c2c <iprintf+0x14>
 8008c22:	69a3      	ldr	r3, [r4, #24]
 8008c24:	b913      	cbnz	r3, 8008c2c <iprintf+0x14>
 8008c26:	4620      	mov	r0, r4
 8008c28:	f001 fd6a 	bl	800a700 <__sinit>
 8008c2c:	ab05      	add	r3, sp, #20
 8008c2e:	9a04      	ldr	r2, [sp, #16]
 8008c30:	68a1      	ldr	r1, [r4, #8]
 8008c32:	9301      	str	r3, [sp, #4]
 8008c34:	4620      	mov	r0, r4
 8008c36:	f002 ff73 	bl	800bb20 <_vfiprintf_r>
 8008c3a:	b002      	add	sp, #8
 8008c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c40:	b004      	add	sp, #16
 8008c42:	4770      	bx	lr
 8008c44:	20000024 	.word	0x20000024

08008c48 <nanf>:
 8008c48:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008c50 <nanf+0x8>
 8008c4c:	4770      	bx	lr
 8008c4e:	bf00      	nop
 8008c50:	7fc00000 	.word	0x7fc00000

08008c54 <siprintf>:
 8008c54:	b40e      	push	{r1, r2, r3}
 8008c56:	b500      	push	{lr}
 8008c58:	b09c      	sub	sp, #112	; 0x70
 8008c5a:	ab1d      	add	r3, sp, #116	; 0x74
 8008c5c:	9002      	str	r0, [sp, #8]
 8008c5e:	9006      	str	r0, [sp, #24]
 8008c60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c64:	4809      	ldr	r0, [pc, #36]	; (8008c8c <siprintf+0x38>)
 8008c66:	9107      	str	r1, [sp, #28]
 8008c68:	9104      	str	r1, [sp, #16]
 8008c6a:	4909      	ldr	r1, [pc, #36]	; (8008c90 <siprintf+0x3c>)
 8008c6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c70:	9105      	str	r1, [sp, #20]
 8008c72:	6800      	ldr	r0, [r0, #0]
 8008c74:	9301      	str	r3, [sp, #4]
 8008c76:	a902      	add	r1, sp, #8
 8008c78:	f002 fe30 	bl	800b8dc <_svfiprintf_r>
 8008c7c:	9b02      	ldr	r3, [sp, #8]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	701a      	strb	r2, [r3, #0]
 8008c82:	b01c      	add	sp, #112	; 0x70
 8008c84:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c88:	b003      	add	sp, #12
 8008c8a:	4770      	bx	lr
 8008c8c:	20000024 	.word	0x20000024
 8008c90:	ffff0208 	.word	0xffff0208

08008c94 <sulp>:
 8008c94:	b570      	push	{r4, r5, r6, lr}
 8008c96:	4604      	mov	r4, r0
 8008c98:	460d      	mov	r5, r1
 8008c9a:	ec45 4b10 	vmov	d0, r4, r5
 8008c9e:	4616      	mov	r6, r2
 8008ca0:	f002 fbd8 	bl	800b454 <__ulp>
 8008ca4:	ec51 0b10 	vmov	r0, r1, d0
 8008ca8:	b17e      	cbz	r6, 8008cca <sulp+0x36>
 8008caa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008cae:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	dd09      	ble.n	8008cca <sulp+0x36>
 8008cb6:	051b      	lsls	r3, r3, #20
 8008cb8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008cbc:	2400      	movs	r4, #0
 8008cbe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008cc2:	4622      	mov	r2, r4
 8008cc4:	462b      	mov	r3, r5
 8008cc6:	f7f7 fc97 	bl	80005f8 <__aeabi_dmul>
 8008cca:	bd70      	pop	{r4, r5, r6, pc}
 8008ccc:	0000      	movs	r0, r0
	...

08008cd0 <_strtod_l>:
 8008cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd4:	461f      	mov	r7, r3
 8008cd6:	b0a1      	sub	sp, #132	; 0x84
 8008cd8:	2300      	movs	r3, #0
 8008cda:	4681      	mov	r9, r0
 8008cdc:	4638      	mov	r0, r7
 8008cde:	460e      	mov	r6, r1
 8008ce0:	9217      	str	r2, [sp, #92]	; 0x5c
 8008ce2:	931c      	str	r3, [sp, #112]	; 0x70
 8008ce4:	f002 f8bf 	bl	800ae66 <__localeconv_l>
 8008ce8:	4680      	mov	r8, r0
 8008cea:	6800      	ldr	r0, [r0, #0]
 8008cec:	f7f7 fa70 	bl	80001d0 <strlen>
 8008cf0:	f04f 0a00 	mov.w	sl, #0
 8008cf4:	4604      	mov	r4, r0
 8008cf6:	f04f 0b00 	mov.w	fp, #0
 8008cfa:	961b      	str	r6, [sp, #108]	; 0x6c
 8008cfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008cfe:	781a      	ldrb	r2, [r3, #0]
 8008d00:	2a0d      	cmp	r2, #13
 8008d02:	d832      	bhi.n	8008d6a <_strtod_l+0x9a>
 8008d04:	2a09      	cmp	r2, #9
 8008d06:	d236      	bcs.n	8008d76 <_strtod_l+0xa6>
 8008d08:	2a00      	cmp	r2, #0
 8008d0a:	d03e      	beq.n	8008d8a <_strtod_l+0xba>
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	930d      	str	r3, [sp, #52]	; 0x34
 8008d10:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008d12:	782b      	ldrb	r3, [r5, #0]
 8008d14:	2b30      	cmp	r3, #48	; 0x30
 8008d16:	f040 80ac 	bne.w	8008e72 <_strtod_l+0x1a2>
 8008d1a:	786b      	ldrb	r3, [r5, #1]
 8008d1c:	2b58      	cmp	r3, #88	; 0x58
 8008d1e:	d001      	beq.n	8008d24 <_strtod_l+0x54>
 8008d20:	2b78      	cmp	r3, #120	; 0x78
 8008d22:	d167      	bne.n	8008df4 <_strtod_l+0x124>
 8008d24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d26:	9301      	str	r3, [sp, #4]
 8008d28:	ab1c      	add	r3, sp, #112	; 0x70
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	9702      	str	r7, [sp, #8]
 8008d2e:	ab1d      	add	r3, sp, #116	; 0x74
 8008d30:	4a88      	ldr	r2, [pc, #544]	; (8008f54 <_strtod_l+0x284>)
 8008d32:	a91b      	add	r1, sp, #108	; 0x6c
 8008d34:	4648      	mov	r0, r9
 8008d36:	f001 fdbc 	bl	800a8b2 <__gethex>
 8008d3a:	f010 0407 	ands.w	r4, r0, #7
 8008d3e:	4606      	mov	r6, r0
 8008d40:	d005      	beq.n	8008d4e <_strtod_l+0x7e>
 8008d42:	2c06      	cmp	r4, #6
 8008d44:	d12b      	bne.n	8008d9e <_strtod_l+0xce>
 8008d46:	3501      	adds	r5, #1
 8008d48:	2300      	movs	r3, #0
 8008d4a:	951b      	str	r5, [sp, #108]	; 0x6c
 8008d4c:	930d      	str	r3, [sp, #52]	; 0x34
 8008d4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f040 859a 	bne.w	800988a <_strtod_l+0xbba>
 8008d56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d58:	b1e3      	cbz	r3, 8008d94 <_strtod_l+0xc4>
 8008d5a:	4652      	mov	r2, sl
 8008d5c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008d60:	ec43 2b10 	vmov	d0, r2, r3
 8008d64:	b021      	add	sp, #132	; 0x84
 8008d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d6a:	2a2b      	cmp	r2, #43	; 0x2b
 8008d6c:	d015      	beq.n	8008d9a <_strtod_l+0xca>
 8008d6e:	2a2d      	cmp	r2, #45	; 0x2d
 8008d70:	d004      	beq.n	8008d7c <_strtod_l+0xac>
 8008d72:	2a20      	cmp	r2, #32
 8008d74:	d1ca      	bne.n	8008d0c <_strtod_l+0x3c>
 8008d76:	3301      	adds	r3, #1
 8008d78:	931b      	str	r3, [sp, #108]	; 0x6c
 8008d7a:	e7bf      	b.n	8008cfc <_strtod_l+0x2c>
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	920d      	str	r2, [sp, #52]	; 0x34
 8008d80:	1c5a      	adds	r2, r3, #1
 8008d82:	921b      	str	r2, [sp, #108]	; 0x6c
 8008d84:	785b      	ldrb	r3, [r3, #1]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1c2      	bne.n	8008d10 <_strtod_l+0x40>
 8008d8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d8c:	961b      	str	r6, [sp, #108]	; 0x6c
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f040 8579 	bne.w	8009886 <_strtod_l+0xbb6>
 8008d94:	4652      	mov	r2, sl
 8008d96:	465b      	mov	r3, fp
 8008d98:	e7e2      	b.n	8008d60 <_strtod_l+0x90>
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	e7ef      	b.n	8008d7e <_strtod_l+0xae>
 8008d9e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008da0:	b13a      	cbz	r2, 8008db2 <_strtod_l+0xe2>
 8008da2:	2135      	movs	r1, #53	; 0x35
 8008da4:	a81e      	add	r0, sp, #120	; 0x78
 8008da6:	f002 fc4d 	bl	800b644 <__copybits>
 8008daa:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008dac:	4648      	mov	r0, r9
 8008dae:	f002 f8b9 	bl	800af24 <_Bfree>
 8008db2:	3c01      	subs	r4, #1
 8008db4:	2c04      	cmp	r4, #4
 8008db6:	d806      	bhi.n	8008dc6 <_strtod_l+0xf6>
 8008db8:	e8df f004 	tbb	[pc, r4]
 8008dbc:	1714030a 	.word	0x1714030a
 8008dc0:	0a          	.byte	0x0a
 8008dc1:	00          	.byte	0x00
 8008dc2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8008dc6:	0730      	lsls	r0, r6, #28
 8008dc8:	d5c1      	bpl.n	8008d4e <_strtod_l+0x7e>
 8008dca:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008dce:	e7be      	b.n	8008d4e <_strtod_l+0x7e>
 8008dd0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8008dd4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008dd6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008dda:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008dde:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008de2:	e7f0      	b.n	8008dc6 <_strtod_l+0xf6>
 8008de4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8008f58 <_strtod_l+0x288>
 8008de8:	e7ed      	b.n	8008dc6 <_strtod_l+0xf6>
 8008dea:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008dee:	f04f 3aff 	mov.w	sl, #4294967295
 8008df2:	e7e8      	b.n	8008dc6 <_strtod_l+0xf6>
 8008df4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008df6:	1c5a      	adds	r2, r3, #1
 8008df8:	921b      	str	r2, [sp, #108]	; 0x6c
 8008dfa:	785b      	ldrb	r3, [r3, #1]
 8008dfc:	2b30      	cmp	r3, #48	; 0x30
 8008dfe:	d0f9      	beq.n	8008df4 <_strtod_l+0x124>
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d0a4      	beq.n	8008d4e <_strtod_l+0x7e>
 8008e04:	2301      	movs	r3, #1
 8008e06:	2500      	movs	r5, #0
 8008e08:	9306      	str	r3, [sp, #24]
 8008e0a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e0c:	9308      	str	r3, [sp, #32]
 8008e0e:	9507      	str	r5, [sp, #28]
 8008e10:	9505      	str	r5, [sp, #20]
 8008e12:	220a      	movs	r2, #10
 8008e14:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008e16:	7807      	ldrb	r7, [r0, #0]
 8008e18:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008e1c:	b2d9      	uxtb	r1, r3
 8008e1e:	2909      	cmp	r1, #9
 8008e20:	d929      	bls.n	8008e76 <_strtod_l+0x1a6>
 8008e22:	4622      	mov	r2, r4
 8008e24:	f8d8 1000 	ldr.w	r1, [r8]
 8008e28:	f002 ffe3 	bl	800bdf2 <strncmp>
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	d031      	beq.n	8008e94 <_strtod_l+0x1c4>
 8008e30:	2000      	movs	r0, #0
 8008e32:	9c05      	ldr	r4, [sp, #20]
 8008e34:	9004      	str	r0, [sp, #16]
 8008e36:	463b      	mov	r3, r7
 8008e38:	4602      	mov	r2, r0
 8008e3a:	2b65      	cmp	r3, #101	; 0x65
 8008e3c:	d001      	beq.n	8008e42 <_strtod_l+0x172>
 8008e3e:	2b45      	cmp	r3, #69	; 0x45
 8008e40:	d114      	bne.n	8008e6c <_strtod_l+0x19c>
 8008e42:	b924      	cbnz	r4, 8008e4e <_strtod_l+0x17e>
 8008e44:	b910      	cbnz	r0, 8008e4c <_strtod_l+0x17c>
 8008e46:	9b06      	ldr	r3, [sp, #24]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d09e      	beq.n	8008d8a <_strtod_l+0xba>
 8008e4c:	2400      	movs	r4, #0
 8008e4e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008e50:	1c73      	adds	r3, r6, #1
 8008e52:	931b      	str	r3, [sp, #108]	; 0x6c
 8008e54:	7873      	ldrb	r3, [r6, #1]
 8008e56:	2b2b      	cmp	r3, #43	; 0x2b
 8008e58:	d078      	beq.n	8008f4c <_strtod_l+0x27c>
 8008e5a:	2b2d      	cmp	r3, #45	; 0x2d
 8008e5c:	d070      	beq.n	8008f40 <_strtod_l+0x270>
 8008e5e:	f04f 0c00 	mov.w	ip, #0
 8008e62:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8008e66:	2f09      	cmp	r7, #9
 8008e68:	d97c      	bls.n	8008f64 <_strtod_l+0x294>
 8008e6a:	961b      	str	r6, [sp, #108]	; 0x6c
 8008e6c:	f04f 0e00 	mov.w	lr, #0
 8008e70:	e09a      	b.n	8008fa8 <_strtod_l+0x2d8>
 8008e72:	2300      	movs	r3, #0
 8008e74:	e7c7      	b.n	8008e06 <_strtod_l+0x136>
 8008e76:	9905      	ldr	r1, [sp, #20]
 8008e78:	2908      	cmp	r1, #8
 8008e7a:	bfdd      	ittte	le
 8008e7c:	9907      	ldrle	r1, [sp, #28]
 8008e7e:	fb02 3301 	mlale	r3, r2, r1, r3
 8008e82:	9307      	strle	r3, [sp, #28]
 8008e84:	fb02 3505 	mlagt	r5, r2, r5, r3
 8008e88:	9b05      	ldr	r3, [sp, #20]
 8008e8a:	3001      	adds	r0, #1
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	9305      	str	r3, [sp, #20]
 8008e90:	901b      	str	r0, [sp, #108]	; 0x6c
 8008e92:	e7bf      	b.n	8008e14 <_strtod_l+0x144>
 8008e94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e96:	191a      	adds	r2, r3, r4
 8008e98:	921b      	str	r2, [sp, #108]	; 0x6c
 8008e9a:	9a05      	ldr	r2, [sp, #20]
 8008e9c:	5d1b      	ldrb	r3, [r3, r4]
 8008e9e:	2a00      	cmp	r2, #0
 8008ea0:	d037      	beq.n	8008f12 <_strtod_l+0x242>
 8008ea2:	9c05      	ldr	r4, [sp, #20]
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008eaa:	2909      	cmp	r1, #9
 8008eac:	d913      	bls.n	8008ed6 <_strtod_l+0x206>
 8008eae:	2101      	movs	r1, #1
 8008eb0:	9104      	str	r1, [sp, #16]
 8008eb2:	e7c2      	b.n	8008e3a <_strtod_l+0x16a>
 8008eb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008eb6:	1c5a      	adds	r2, r3, #1
 8008eb8:	921b      	str	r2, [sp, #108]	; 0x6c
 8008eba:	785b      	ldrb	r3, [r3, #1]
 8008ebc:	3001      	adds	r0, #1
 8008ebe:	2b30      	cmp	r3, #48	; 0x30
 8008ec0:	d0f8      	beq.n	8008eb4 <_strtod_l+0x1e4>
 8008ec2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008ec6:	2a08      	cmp	r2, #8
 8008ec8:	f200 84e4 	bhi.w	8009894 <_strtod_l+0xbc4>
 8008ecc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008ece:	9208      	str	r2, [sp, #32]
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	2000      	movs	r0, #0
 8008ed4:	4604      	mov	r4, r0
 8008ed6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8008eda:	f100 0101 	add.w	r1, r0, #1
 8008ede:	d012      	beq.n	8008f06 <_strtod_l+0x236>
 8008ee0:	440a      	add	r2, r1
 8008ee2:	eb00 0c04 	add.w	ip, r0, r4
 8008ee6:	4621      	mov	r1, r4
 8008ee8:	270a      	movs	r7, #10
 8008eea:	458c      	cmp	ip, r1
 8008eec:	d113      	bne.n	8008f16 <_strtod_l+0x246>
 8008eee:	1821      	adds	r1, r4, r0
 8008ef0:	2908      	cmp	r1, #8
 8008ef2:	f104 0401 	add.w	r4, r4, #1
 8008ef6:	4404      	add	r4, r0
 8008ef8:	dc19      	bgt.n	8008f2e <_strtod_l+0x25e>
 8008efa:	9b07      	ldr	r3, [sp, #28]
 8008efc:	210a      	movs	r1, #10
 8008efe:	fb01 e303 	mla	r3, r1, r3, lr
 8008f02:	9307      	str	r3, [sp, #28]
 8008f04:	2100      	movs	r1, #0
 8008f06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f08:	1c58      	adds	r0, r3, #1
 8008f0a:	901b      	str	r0, [sp, #108]	; 0x6c
 8008f0c:	785b      	ldrb	r3, [r3, #1]
 8008f0e:	4608      	mov	r0, r1
 8008f10:	e7c9      	b.n	8008ea6 <_strtod_l+0x1d6>
 8008f12:	9805      	ldr	r0, [sp, #20]
 8008f14:	e7d3      	b.n	8008ebe <_strtod_l+0x1ee>
 8008f16:	2908      	cmp	r1, #8
 8008f18:	f101 0101 	add.w	r1, r1, #1
 8008f1c:	dc03      	bgt.n	8008f26 <_strtod_l+0x256>
 8008f1e:	9b07      	ldr	r3, [sp, #28]
 8008f20:	437b      	muls	r3, r7
 8008f22:	9307      	str	r3, [sp, #28]
 8008f24:	e7e1      	b.n	8008eea <_strtod_l+0x21a>
 8008f26:	2910      	cmp	r1, #16
 8008f28:	bfd8      	it	le
 8008f2a:	437d      	mulle	r5, r7
 8008f2c:	e7dd      	b.n	8008eea <_strtod_l+0x21a>
 8008f2e:	2c10      	cmp	r4, #16
 8008f30:	bfdc      	itt	le
 8008f32:	210a      	movle	r1, #10
 8008f34:	fb01 e505 	mlale	r5, r1, r5, lr
 8008f38:	e7e4      	b.n	8008f04 <_strtod_l+0x234>
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	9304      	str	r3, [sp, #16]
 8008f3e:	e781      	b.n	8008e44 <_strtod_l+0x174>
 8008f40:	f04f 0c01 	mov.w	ip, #1
 8008f44:	1cb3      	adds	r3, r6, #2
 8008f46:	931b      	str	r3, [sp, #108]	; 0x6c
 8008f48:	78b3      	ldrb	r3, [r6, #2]
 8008f4a:	e78a      	b.n	8008e62 <_strtod_l+0x192>
 8008f4c:	f04f 0c00 	mov.w	ip, #0
 8008f50:	e7f8      	b.n	8008f44 <_strtod_l+0x274>
 8008f52:	bf00      	nop
 8008f54:	0800c44c 	.word	0x0800c44c
 8008f58:	7ff00000 	.word	0x7ff00000
 8008f5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f5e:	1c5f      	adds	r7, r3, #1
 8008f60:	971b      	str	r7, [sp, #108]	; 0x6c
 8008f62:	785b      	ldrb	r3, [r3, #1]
 8008f64:	2b30      	cmp	r3, #48	; 0x30
 8008f66:	d0f9      	beq.n	8008f5c <_strtod_l+0x28c>
 8008f68:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8008f6c:	2f08      	cmp	r7, #8
 8008f6e:	f63f af7d 	bhi.w	8008e6c <_strtod_l+0x19c>
 8008f72:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008f76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f78:	930a      	str	r3, [sp, #40]	; 0x28
 8008f7a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f7c:	1c5f      	adds	r7, r3, #1
 8008f7e:	971b      	str	r7, [sp, #108]	; 0x6c
 8008f80:	785b      	ldrb	r3, [r3, #1]
 8008f82:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8008f86:	f1b8 0f09 	cmp.w	r8, #9
 8008f8a:	d937      	bls.n	8008ffc <_strtod_l+0x32c>
 8008f8c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008f8e:	1a7f      	subs	r7, r7, r1
 8008f90:	2f08      	cmp	r7, #8
 8008f92:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008f96:	dc37      	bgt.n	8009008 <_strtod_l+0x338>
 8008f98:	45be      	cmp	lr, r7
 8008f9a:	bfa8      	it	ge
 8008f9c:	46be      	movge	lr, r7
 8008f9e:	f1bc 0f00 	cmp.w	ip, #0
 8008fa2:	d001      	beq.n	8008fa8 <_strtod_l+0x2d8>
 8008fa4:	f1ce 0e00 	rsb	lr, lr, #0
 8008fa8:	2c00      	cmp	r4, #0
 8008faa:	d151      	bne.n	8009050 <_strtod_l+0x380>
 8008fac:	2800      	cmp	r0, #0
 8008fae:	f47f aece 	bne.w	8008d4e <_strtod_l+0x7e>
 8008fb2:	9a06      	ldr	r2, [sp, #24]
 8008fb4:	2a00      	cmp	r2, #0
 8008fb6:	f47f aeca 	bne.w	8008d4e <_strtod_l+0x7e>
 8008fba:	9a04      	ldr	r2, [sp, #16]
 8008fbc:	2a00      	cmp	r2, #0
 8008fbe:	f47f aee4 	bne.w	8008d8a <_strtod_l+0xba>
 8008fc2:	2b4e      	cmp	r3, #78	; 0x4e
 8008fc4:	d027      	beq.n	8009016 <_strtod_l+0x346>
 8008fc6:	dc21      	bgt.n	800900c <_strtod_l+0x33c>
 8008fc8:	2b49      	cmp	r3, #73	; 0x49
 8008fca:	f47f aede 	bne.w	8008d8a <_strtod_l+0xba>
 8008fce:	49a0      	ldr	r1, [pc, #640]	; (8009250 <_strtod_l+0x580>)
 8008fd0:	a81b      	add	r0, sp, #108	; 0x6c
 8008fd2:	f001 fea1 	bl	800ad18 <__match>
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	f43f aed7 	beq.w	8008d8a <_strtod_l+0xba>
 8008fdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008fde:	499d      	ldr	r1, [pc, #628]	; (8009254 <_strtod_l+0x584>)
 8008fe0:	3b01      	subs	r3, #1
 8008fe2:	a81b      	add	r0, sp, #108	; 0x6c
 8008fe4:	931b      	str	r3, [sp, #108]	; 0x6c
 8008fe6:	f001 fe97 	bl	800ad18 <__match>
 8008fea:	b910      	cbnz	r0, 8008ff2 <_strtod_l+0x322>
 8008fec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008fee:	3301      	adds	r3, #1
 8008ff0:	931b      	str	r3, [sp, #108]	; 0x6c
 8008ff2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8009268 <_strtod_l+0x598>
 8008ff6:	f04f 0a00 	mov.w	sl, #0
 8008ffa:	e6a8      	b.n	8008d4e <_strtod_l+0x7e>
 8008ffc:	210a      	movs	r1, #10
 8008ffe:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009002:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009006:	e7b8      	b.n	8008f7a <_strtod_l+0x2aa>
 8009008:	46be      	mov	lr, r7
 800900a:	e7c8      	b.n	8008f9e <_strtod_l+0x2ce>
 800900c:	2b69      	cmp	r3, #105	; 0x69
 800900e:	d0de      	beq.n	8008fce <_strtod_l+0x2fe>
 8009010:	2b6e      	cmp	r3, #110	; 0x6e
 8009012:	f47f aeba 	bne.w	8008d8a <_strtod_l+0xba>
 8009016:	4990      	ldr	r1, [pc, #576]	; (8009258 <_strtod_l+0x588>)
 8009018:	a81b      	add	r0, sp, #108	; 0x6c
 800901a:	f001 fe7d 	bl	800ad18 <__match>
 800901e:	2800      	cmp	r0, #0
 8009020:	f43f aeb3 	beq.w	8008d8a <_strtod_l+0xba>
 8009024:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	2b28      	cmp	r3, #40	; 0x28
 800902a:	d10e      	bne.n	800904a <_strtod_l+0x37a>
 800902c:	aa1e      	add	r2, sp, #120	; 0x78
 800902e:	498b      	ldr	r1, [pc, #556]	; (800925c <_strtod_l+0x58c>)
 8009030:	a81b      	add	r0, sp, #108	; 0x6c
 8009032:	f001 fe85 	bl	800ad40 <__hexnan>
 8009036:	2805      	cmp	r0, #5
 8009038:	d107      	bne.n	800904a <_strtod_l+0x37a>
 800903a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800903c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8009040:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009044:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009048:	e681      	b.n	8008d4e <_strtod_l+0x7e>
 800904a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8009270 <_strtod_l+0x5a0>
 800904e:	e7d2      	b.n	8008ff6 <_strtod_l+0x326>
 8009050:	ebae 0302 	sub.w	r3, lr, r2
 8009054:	9306      	str	r3, [sp, #24]
 8009056:	9b05      	ldr	r3, [sp, #20]
 8009058:	9807      	ldr	r0, [sp, #28]
 800905a:	2b00      	cmp	r3, #0
 800905c:	bf08      	it	eq
 800905e:	4623      	moveq	r3, r4
 8009060:	2c10      	cmp	r4, #16
 8009062:	9305      	str	r3, [sp, #20]
 8009064:	46a0      	mov	r8, r4
 8009066:	bfa8      	it	ge
 8009068:	f04f 0810 	movge.w	r8, #16
 800906c:	f7f7 fa4a 	bl	8000504 <__aeabi_ui2d>
 8009070:	2c09      	cmp	r4, #9
 8009072:	4682      	mov	sl, r0
 8009074:	468b      	mov	fp, r1
 8009076:	dc13      	bgt.n	80090a0 <_strtod_l+0x3d0>
 8009078:	9b06      	ldr	r3, [sp, #24]
 800907a:	2b00      	cmp	r3, #0
 800907c:	f43f ae67 	beq.w	8008d4e <_strtod_l+0x7e>
 8009080:	9b06      	ldr	r3, [sp, #24]
 8009082:	dd7a      	ble.n	800917a <_strtod_l+0x4aa>
 8009084:	2b16      	cmp	r3, #22
 8009086:	dc61      	bgt.n	800914c <_strtod_l+0x47c>
 8009088:	4a75      	ldr	r2, [pc, #468]	; (8009260 <_strtod_l+0x590>)
 800908a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800908e:	e9de 0100 	ldrd	r0, r1, [lr]
 8009092:	4652      	mov	r2, sl
 8009094:	465b      	mov	r3, fp
 8009096:	f7f7 faaf 	bl	80005f8 <__aeabi_dmul>
 800909a:	4682      	mov	sl, r0
 800909c:	468b      	mov	fp, r1
 800909e:	e656      	b.n	8008d4e <_strtod_l+0x7e>
 80090a0:	4b6f      	ldr	r3, [pc, #444]	; (8009260 <_strtod_l+0x590>)
 80090a2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80090a6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80090aa:	f7f7 faa5 	bl	80005f8 <__aeabi_dmul>
 80090ae:	4606      	mov	r6, r0
 80090b0:	4628      	mov	r0, r5
 80090b2:	460f      	mov	r7, r1
 80090b4:	f7f7 fa26 	bl	8000504 <__aeabi_ui2d>
 80090b8:	4602      	mov	r2, r0
 80090ba:	460b      	mov	r3, r1
 80090bc:	4630      	mov	r0, r6
 80090be:	4639      	mov	r1, r7
 80090c0:	f7f7 f8e4 	bl	800028c <__adddf3>
 80090c4:	2c0f      	cmp	r4, #15
 80090c6:	4682      	mov	sl, r0
 80090c8:	468b      	mov	fp, r1
 80090ca:	ddd5      	ble.n	8009078 <_strtod_l+0x3a8>
 80090cc:	9b06      	ldr	r3, [sp, #24]
 80090ce:	eba4 0808 	sub.w	r8, r4, r8
 80090d2:	4498      	add	r8, r3
 80090d4:	f1b8 0f00 	cmp.w	r8, #0
 80090d8:	f340 8096 	ble.w	8009208 <_strtod_l+0x538>
 80090dc:	f018 030f 	ands.w	r3, r8, #15
 80090e0:	d00a      	beq.n	80090f8 <_strtod_l+0x428>
 80090e2:	495f      	ldr	r1, [pc, #380]	; (8009260 <_strtod_l+0x590>)
 80090e4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80090e8:	4652      	mov	r2, sl
 80090ea:	465b      	mov	r3, fp
 80090ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090f0:	f7f7 fa82 	bl	80005f8 <__aeabi_dmul>
 80090f4:	4682      	mov	sl, r0
 80090f6:	468b      	mov	fp, r1
 80090f8:	f038 080f 	bics.w	r8, r8, #15
 80090fc:	d073      	beq.n	80091e6 <_strtod_l+0x516>
 80090fe:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009102:	dd47      	ble.n	8009194 <_strtod_l+0x4c4>
 8009104:	2400      	movs	r4, #0
 8009106:	46a0      	mov	r8, r4
 8009108:	9407      	str	r4, [sp, #28]
 800910a:	9405      	str	r4, [sp, #20]
 800910c:	2322      	movs	r3, #34	; 0x22
 800910e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8009268 <_strtod_l+0x598>
 8009112:	f8c9 3000 	str.w	r3, [r9]
 8009116:	f04f 0a00 	mov.w	sl, #0
 800911a:	9b07      	ldr	r3, [sp, #28]
 800911c:	2b00      	cmp	r3, #0
 800911e:	f43f ae16 	beq.w	8008d4e <_strtod_l+0x7e>
 8009122:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009124:	4648      	mov	r0, r9
 8009126:	f001 fefd 	bl	800af24 <_Bfree>
 800912a:	9905      	ldr	r1, [sp, #20]
 800912c:	4648      	mov	r0, r9
 800912e:	f001 fef9 	bl	800af24 <_Bfree>
 8009132:	4641      	mov	r1, r8
 8009134:	4648      	mov	r0, r9
 8009136:	f001 fef5 	bl	800af24 <_Bfree>
 800913a:	9907      	ldr	r1, [sp, #28]
 800913c:	4648      	mov	r0, r9
 800913e:	f001 fef1 	bl	800af24 <_Bfree>
 8009142:	4621      	mov	r1, r4
 8009144:	4648      	mov	r0, r9
 8009146:	f001 feed 	bl	800af24 <_Bfree>
 800914a:	e600      	b.n	8008d4e <_strtod_l+0x7e>
 800914c:	9a06      	ldr	r2, [sp, #24]
 800914e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009152:	4293      	cmp	r3, r2
 8009154:	dbba      	blt.n	80090cc <_strtod_l+0x3fc>
 8009156:	4d42      	ldr	r5, [pc, #264]	; (8009260 <_strtod_l+0x590>)
 8009158:	f1c4 040f 	rsb	r4, r4, #15
 800915c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009160:	4652      	mov	r2, sl
 8009162:	465b      	mov	r3, fp
 8009164:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009168:	f7f7 fa46 	bl	80005f8 <__aeabi_dmul>
 800916c:	9b06      	ldr	r3, [sp, #24]
 800916e:	1b1c      	subs	r4, r3, r4
 8009170:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009174:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009178:	e78d      	b.n	8009096 <_strtod_l+0x3c6>
 800917a:	f113 0f16 	cmn.w	r3, #22
 800917e:	dba5      	blt.n	80090cc <_strtod_l+0x3fc>
 8009180:	4a37      	ldr	r2, [pc, #220]	; (8009260 <_strtod_l+0x590>)
 8009182:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8009186:	e9d2 2300 	ldrd	r2, r3, [r2]
 800918a:	4650      	mov	r0, sl
 800918c:	4659      	mov	r1, fp
 800918e:	f7f7 fb5d 	bl	800084c <__aeabi_ddiv>
 8009192:	e782      	b.n	800909a <_strtod_l+0x3ca>
 8009194:	2300      	movs	r3, #0
 8009196:	4e33      	ldr	r6, [pc, #204]	; (8009264 <_strtod_l+0x594>)
 8009198:	ea4f 1828 	mov.w	r8, r8, asr #4
 800919c:	4650      	mov	r0, sl
 800919e:	4659      	mov	r1, fp
 80091a0:	461d      	mov	r5, r3
 80091a2:	f1b8 0f01 	cmp.w	r8, #1
 80091a6:	dc21      	bgt.n	80091ec <_strtod_l+0x51c>
 80091a8:	b10b      	cbz	r3, 80091ae <_strtod_l+0x4de>
 80091aa:	4682      	mov	sl, r0
 80091ac:	468b      	mov	fp, r1
 80091ae:	4b2d      	ldr	r3, [pc, #180]	; (8009264 <_strtod_l+0x594>)
 80091b0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80091b4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80091b8:	4652      	mov	r2, sl
 80091ba:	465b      	mov	r3, fp
 80091bc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80091c0:	f7f7 fa1a 	bl	80005f8 <__aeabi_dmul>
 80091c4:	4b28      	ldr	r3, [pc, #160]	; (8009268 <_strtod_l+0x598>)
 80091c6:	460a      	mov	r2, r1
 80091c8:	400b      	ands	r3, r1
 80091ca:	4928      	ldr	r1, [pc, #160]	; (800926c <_strtod_l+0x59c>)
 80091cc:	428b      	cmp	r3, r1
 80091ce:	4682      	mov	sl, r0
 80091d0:	d898      	bhi.n	8009104 <_strtod_l+0x434>
 80091d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80091d6:	428b      	cmp	r3, r1
 80091d8:	bf86      	itte	hi
 80091da:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8009274 <_strtod_l+0x5a4>
 80091de:	f04f 3aff 	movhi.w	sl, #4294967295
 80091e2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80091e6:	2300      	movs	r3, #0
 80091e8:	9304      	str	r3, [sp, #16]
 80091ea:	e077      	b.n	80092dc <_strtod_l+0x60c>
 80091ec:	f018 0f01 	tst.w	r8, #1
 80091f0:	d006      	beq.n	8009200 <_strtod_l+0x530>
 80091f2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80091f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fa:	f7f7 f9fd 	bl	80005f8 <__aeabi_dmul>
 80091fe:	2301      	movs	r3, #1
 8009200:	3501      	adds	r5, #1
 8009202:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009206:	e7cc      	b.n	80091a2 <_strtod_l+0x4d2>
 8009208:	d0ed      	beq.n	80091e6 <_strtod_l+0x516>
 800920a:	f1c8 0800 	rsb	r8, r8, #0
 800920e:	f018 020f 	ands.w	r2, r8, #15
 8009212:	d00a      	beq.n	800922a <_strtod_l+0x55a>
 8009214:	4b12      	ldr	r3, [pc, #72]	; (8009260 <_strtod_l+0x590>)
 8009216:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800921a:	4650      	mov	r0, sl
 800921c:	4659      	mov	r1, fp
 800921e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009222:	f7f7 fb13 	bl	800084c <__aeabi_ddiv>
 8009226:	4682      	mov	sl, r0
 8009228:	468b      	mov	fp, r1
 800922a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800922e:	d0da      	beq.n	80091e6 <_strtod_l+0x516>
 8009230:	f1b8 0f1f 	cmp.w	r8, #31
 8009234:	dd20      	ble.n	8009278 <_strtod_l+0x5a8>
 8009236:	2400      	movs	r4, #0
 8009238:	46a0      	mov	r8, r4
 800923a:	9407      	str	r4, [sp, #28]
 800923c:	9405      	str	r4, [sp, #20]
 800923e:	2322      	movs	r3, #34	; 0x22
 8009240:	f04f 0a00 	mov.w	sl, #0
 8009244:	f04f 0b00 	mov.w	fp, #0
 8009248:	f8c9 3000 	str.w	r3, [r9]
 800924c:	e765      	b.n	800911a <_strtod_l+0x44a>
 800924e:	bf00      	nop
 8009250:	0800c415 	.word	0x0800c415
 8009254:	0800c4a3 	.word	0x0800c4a3
 8009258:	0800c41d 	.word	0x0800c41d
 800925c:	0800c460 	.word	0x0800c460
 8009260:	0800c548 	.word	0x0800c548
 8009264:	0800c520 	.word	0x0800c520
 8009268:	7ff00000 	.word	0x7ff00000
 800926c:	7ca00000 	.word	0x7ca00000
 8009270:	fff80000 	.word	0xfff80000
 8009274:	7fefffff 	.word	0x7fefffff
 8009278:	f018 0310 	ands.w	r3, r8, #16
 800927c:	bf18      	it	ne
 800927e:	236a      	movne	r3, #106	; 0x6a
 8009280:	4da0      	ldr	r5, [pc, #640]	; (8009504 <_strtod_l+0x834>)
 8009282:	9304      	str	r3, [sp, #16]
 8009284:	4650      	mov	r0, sl
 8009286:	4659      	mov	r1, fp
 8009288:	2300      	movs	r3, #0
 800928a:	f1b8 0f00 	cmp.w	r8, #0
 800928e:	f300 810a 	bgt.w	80094a6 <_strtod_l+0x7d6>
 8009292:	b10b      	cbz	r3, 8009298 <_strtod_l+0x5c8>
 8009294:	4682      	mov	sl, r0
 8009296:	468b      	mov	fp, r1
 8009298:	9b04      	ldr	r3, [sp, #16]
 800929a:	b1bb      	cbz	r3, 80092cc <_strtod_l+0x5fc>
 800929c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80092a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	4659      	mov	r1, fp
 80092a8:	dd10      	ble.n	80092cc <_strtod_l+0x5fc>
 80092aa:	2b1f      	cmp	r3, #31
 80092ac:	f340 8107 	ble.w	80094be <_strtod_l+0x7ee>
 80092b0:	2b34      	cmp	r3, #52	; 0x34
 80092b2:	bfde      	ittt	le
 80092b4:	3b20      	suble	r3, #32
 80092b6:	f04f 32ff 	movle.w	r2, #4294967295
 80092ba:	fa02 f303 	lslle.w	r3, r2, r3
 80092be:	f04f 0a00 	mov.w	sl, #0
 80092c2:	bfcc      	ite	gt
 80092c4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80092c8:	ea03 0b01 	andle.w	fp, r3, r1
 80092cc:	2200      	movs	r2, #0
 80092ce:	2300      	movs	r3, #0
 80092d0:	4650      	mov	r0, sl
 80092d2:	4659      	mov	r1, fp
 80092d4:	f7f7 fbf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80092d8:	2800      	cmp	r0, #0
 80092da:	d1ac      	bne.n	8009236 <_strtod_l+0x566>
 80092dc:	9b07      	ldr	r3, [sp, #28]
 80092de:	9300      	str	r3, [sp, #0]
 80092e0:	9a05      	ldr	r2, [sp, #20]
 80092e2:	9908      	ldr	r1, [sp, #32]
 80092e4:	4623      	mov	r3, r4
 80092e6:	4648      	mov	r0, r9
 80092e8:	f001 fe6e 	bl	800afc8 <__s2b>
 80092ec:	9007      	str	r0, [sp, #28]
 80092ee:	2800      	cmp	r0, #0
 80092f0:	f43f af08 	beq.w	8009104 <_strtod_l+0x434>
 80092f4:	9a06      	ldr	r2, [sp, #24]
 80092f6:	9b06      	ldr	r3, [sp, #24]
 80092f8:	2a00      	cmp	r2, #0
 80092fa:	f1c3 0300 	rsb	r3, r3, #0
 80092fe:	bfa8      	it	ge
 8009300:	2300      	movge	r3, #0
 8009302:	930e      	str	r3, [sp, #56]	; 0x38
 8009304:	2400      	movs	r4, #0
 8009306:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800930a:	9316      	str	r3, [sp, #88]	; 0x58
 800930c:	46a0      	mov	r8, r4
 800930e:	9b07      	ldr	r3, [sp, #28]
 8009310:	4648      	mov	r0, r9
 8009312:	6859      	ldr	r1, [r3, #4]
 8009314:	f001 fdd2 	bl	800aebc <_Balloc>
 8009318:	9005      	str	r0, [sp, #20]
 800931a:	2800      	cmp	r0, #0
 800931c:	f43f aef6 	beq.w	800910c <_strtod_l+0x43c>
 8009320:	9b07      	ldr	r3, [sp, #28]
 8009322:	691a      	ldr	r2, [r3, #16]
 8009324:	3202      	adds	r2, #2
 8009326:	f103 010c 	add.w	r1, r3, #12
 800932a:	0092      	lsls	r2, r2, #2
 800932c:	300c      	adds	r0, #12
 800932e:	f7fe fe21 	bl	8007f74 <memcpy>
 8009332:	aa1e      	add	r2, sp, #120	; 0x78
 8009334:	a91d      	add	r1, sp, #116	; 0x74
 8009336:	ec4b ab10 	vmov	d0, sl, fp
 800933a:	4648      	mov	r0, r9
 800933c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009340:	f002 f8fe 	bl	800b540 <__d2b>
 8009344:	901c      	str	r0, [sp, #112]	; 0x70
 8009346:	2800      	cmp	r0, #0
 8009348:	f43f aee0 	beq.w	800910c <_strtod_l+0x43c>
 800934c:	2101      	movs	r1, #1
 800934e:	4648      	mov	r0, r9
 8009350:	f001 fec6 	bl	800b0e0 <__i2b>
 8009354:	4680      	mov	r8, r0
 8009356:	2800      	cmp	r0, #0
 8009358:	f43f aed8 	beq.w	800910c <_strtod_l+0x43c>
 800935c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800935e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009360:	2e00      	cmp	r6, #0
 8009362:	bfab      	itete	ge
 8009364:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009366:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009368:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800936a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800936c:	bfac      	ite	ge
 800936e:	18f7      	addge	r7, r6, r3
 8009370:	1b9d      	sublt	r5, r3, r6
 8009372:	9b04      	ldr	r3, [sp, #16]
 8009374:	1af6      	subs	r6, r6, r3
 8009376:	4416      	add	r6, r2
 8009378:	4b63      	ldr	r3, [pc, #396]	; (8009508 <_strtod_l+0x838>)
 800937a:	3e01      	subs	r6, #1
 800937c:	429e      	cmp	r6, r3
 800937e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009382:	f280 80af 	bge.w	80094e4 <_strtod_l+0x814>
 8009386:	1b9b      	subs	r3, r3, r6
 8009388:	2b1f      	cmp	r3, #31
 800938a:	eba2 0203 	sub.w	r2, r2, r3
 800938e:	f04f 0101 	mov.w	r1, #1
 8009392:	f300 809b 	bgt.w	80094cc <_strtod_l+0x7fc>
 8009396:	fa01 f303 	lsl.w	r3, r1, r3
 800939a:	930f      	str	r3, [sp, #60]	; 0x3c
 800939c:	2300      	movs	r3, #0
 800939e:	930a      	str	r3, [sp, #40]	; 0x28
 80093a0:	18be      	adds	r6, r7, r2
 80093a2:	9b04      	ldr	r3, [sp, #16]
 80093a4:	42b7      	cmp	r7, r6
 80093a6:	4415      	add	r5, r2
 80093a8:	441d      	add	r5, r3
 80093aa:	463b      	mov	r3, r7
 80093ac:	bfa8      	it	ge
 80093ae:	4633      	movge	r3, r6
 80093b0:	42ab      	cmp	r3, r5
 80093b2:	bfa8      	it	ge
 80093b4:	462b      	movge	r3, r5
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	bfc2      	ittt	gt
 80093ba:	1af6      	subgt	r6, r6, r3
 80093bc:	1aed      	subgt	r5, r5, r3
 80093be:	1aff      	subgt	r7, r7, r3
 80093c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093c2:	b1bb      	cbz	r3, 80093f4 <_strtod_l+0x724>
 80093c4:	4641      	mov	r1, r8
 80093c6:	461a      	mov	r2, r3
 80093c8:	4648      	mov	r0, r9
 80093ca:	f001 ff29 	bl	800b220 <__pow5mult>
 80093ce:	4680      	mov	r8, r0
 80093d0:	2800      	cmp	r0, #0
 80093d2:	f43f ae9b 	beq.w	800910c <_strtod_l+0x43c>
 80093d6:	4601      	mov	r1, r0
 80093d8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80093da:	4648      	mov	r0, r9
 80093dc:	f001 fe89 	bl	800b0f2 <__multiply>
 80093e0:	900c      	str	r0, [sp, #48]	; 0x30
 80093e2:	2800      	cmp	r0, #0
 80093e4:	f43f ae92 	beq.w	800910c <_strtod_l+0x43c>
 80093e8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80093ea:	4648      	mov	r0, r9
 80093ec:	f001 fd9a 	bl	800af24 <_Bfree>
 80093f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093f2:	931c      	str	r3, [sp, #112]	; 0x70
 80093f4:	2e00      	cmp	r6, #0
 80093f6:	dc7a      	bgt.n	80094ee <_strtod_l+0x81e>
 80093f8:	9b06      	ldr	r3, [sp, #24]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	dd08      	ble.n	8009410 <_strtod_l+0x740>
 80093fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009400:	9905      	ldr	r1, [sp, #20]
 8009402:	4648      	mov	r0, r9
 8009404:	f001 ff0c 	bl	800b220 <__pow5mult>
 8009408:	9005      	str	r0, [sp, #20]
 800940a:	2800      	cmp	r0, #0
 800940c:	f43f ae7e 	beq.w	800910c <_strtod_l+0x43c>
 8009410:	2d00      	cmp	r5, #0
 8009412:	dd08      	ble.n	8009426 <_strtod_l+0x756>
 8009414:	462a      	mov	r2, r5
 8009416:	9905      	ldr	r1, [sp, #20]
 8009418:	4648      	mov	r0, r9
 800941a:	f001 ff4f 	bl	800b2bc <__lshift>
 800941e:	9005      	str	r0, [sp, #20]
 8009420:	2800      	cmp	r0, #0
 8009422:	f43f ae73 	beq.w	800910c <_strtod_l+0x43c>
 8009426:	2f00      	cmp	r7, #0
 8009428:	dd08      	ble.n	800943c <_strtod_l+0x76c>
 800942a:	4641      	mov	r1, r8
 800942c:	463a      	mov	r2, r7
 800942e:	4648      	mov	r0, r9
 8009430:	f001 ff44 	bl	800b2bc <__lshift>
 8009434:	4680      	mov	r8, r0
 8009436:	2800      	cmp	r0, #0
 8009438:	f43f ae68 	beq.w	800910c <_strtod_l+0x43c>
 800943c:	9a05      	ldr	r2, [sp, #20]
 800943e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009440:	4648      	mov	r0, r9
 8009442:	f001 ffa9 	bl	800b398 <__mdiff>
 8009446:	4604      	mov	r4, r0
 8009448:	2800      	cmp	r0, #0
 800944a:	f43f ae5f 	beq.w	800910c <_strtod_l+0x43c>
 800944e:	68c3      	ldr	r3, [r0, #12]
 8009450:	930c      	str	r3, [sp, #48]	; 0x30
 8009452:	2300      	movs	r3, #0
 8009454:	60c3      	str	r3, [r0, #12]
 8009456:	4641      	mov	r1, r8
 8009458:	f001 ff84 	bl	800b364 <__mcmp>
 800945c:	2800      	cmp	r0, #0
 800945e:	da55      	bge.n	800950c <_strtod_l+0x83c>
 8009460:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009462:	b9e3      	cbnz	r3, 800949e <_strtod_l+0x7ce>
 8009464:	f1ba 0f00 	cmp.w	sl, #0
 8009468:	d119      	bne.n	800949e <_strtod_l+0x7ce>
 800946a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800946e:	b9b3      	cbnz	r3, 800949e <_strtod_l+0x7ce>
 8009470:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009474:	0d1b      	lsrs	r3, r3, #20
 8009476:	051b      	lsls	r3, r3, #20
 8009478:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800947c:	d90f      	bls.n	800949e <_strtod_l+0x7ce>
 800947e:	6963      	ldr	r3, [r4, #20]
 8009480:	b913      	cbnz	r3, 8009488 <_strtod_l+0x7b8>
 8009482:	6923      	ldr	r3, [r4, #16]
 8009484:	2b01      	cmp	r3, #1
 8009486:	dd0a      	ble.n	800949e <_strtod_l+0x7ce>
 8009488:	4621      	mov	r1, r4
 800948a:	2201      	movs	r2, #1
 800948c:	4648      	mov	r0, r9
 800948e:	f001 ff15 	bl	800b2bc <__lshift>
 8009492:	4641      	mov	r1, r8
 8009494:	4604      	mov	r4, r0
 8009496:	f001 ff65 	bl	800b364 <__mcmp>
 800949a:	2800      	cmp	r0, #0
 800949c:	dc67      	bgt.n	800956e <_strtod_l+0x89e>
 800949e:	9b04      	ldr	r3, [sp, #16]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d171      	bne.n	8009588 <_strtod_l+0x8b8>
 80094a4:	e63d      	b.n	8009122 <_strtod_l+0x452>
 80094a6:	f018 0f01 	tst.w	r8, #1
 80094aa:	d004      	beq.n	80094b6 <_strtod_l+0x7e6>
 80094ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80094b0:	f7f7 f8a2 	bl	80005f8 <__aeabi_dmul>
 80094b4:	2301      	movs	r3, #1
 80094b6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80094ba:	3508      	adds	r5, #8
 80094bc:	e6e5      	b.n	800928a <_strtod_l+0x5ba>
 80094be:	f04f 32ff 	mov.w	r2, #4294967295
 80094c2:	fa02 f303 	lsl.w	r3, r2, r3
 80094c6:	ea03 0a0a 	and.w	sl, r3, sl
 80094ca:	e6ff      	b.n	80092cc <_strtod_l+0x5fc>
 80094cc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80094d0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80094d4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80094d8:	36e2      	adds	r6, #226	; 0xe2
 80094da:	fa01 f306 	lsl.w	r3, r1, r6
 80094de:	930a      	str	r3, [sp, #40]	; 0x28
 80094e0:	910f      	str	r1, [sp, #60]	; 0x3c
 80094e2:	e75d      	b.n	80093a0 <_strtod_l+0x6d0>
 80094e4:	2300      	movs	r3, #0
 80094e6:	930a      	str	r3, [sp, #40]	; 0x28
 80094e8:	2301      	movs	r3, #1
 80094ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80094ec:	e758      	b.n	80093a0 <_strtod_l+0x6d0>
 80094ee:	4632      	mov	r2, r6
 80094f0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80094f2:	4648      	mov	r0, r9
 80094f4:	f001 fee2 	bl	800b2bc <__lshift>
 80094f8:	901c      	str	r0, [sp, #112]	; 0x70
 80094fa:	2800      	cmp	r0, #0
 80094fc:	f47f af7c 	bne.w	80093f8 <_strtod_l+0x728>
 8009500:	e604      	b.n	800910c <_strtod_l+0x43c>
 8009502:	bf00      	nop
 8009504:	0800c478 	.word	0x0800c478
 8009508:	fffffc02 	.word	0xfffffc02
 800950c:	465d      	mov	r5, fp
 800950e:	f040 8086 	bne.w	800961e <_strtod_l+0x94e>
 8009512:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009514:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009518:	b32a      	cbz	r2, 8009566 <_strtod_l+0x896>
 800951a:	4aaf      	ldr	r2, [pc, #700]	; (80097d8 <_strtod_l+0xb08>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d153      	bne.n	80095c8 <_strtod_l+0x8f8>
 8009520:	9b04      	ldr	r3, [sp, #16]
 8009522:	4650      	mov	r0, sl
 8009524:	b1d3      	cbz	r3, 800955c <_strtod_l+0x88c>
 8009526:	4aad      	ldr	r2, [pc, #692]	; (80097dc <_strtod_l+0xb0c>)
 8009528:	402a      	ands	r2, r5
 800952a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800952e:	f04f 31ff 	mov.w	r1, #4294967295
 8009532:	d816      	bhi.n	8009562 <_strtod_l+0x892>
 8009534:	0d12      	lsrs	r2, r2, #20
 8009536:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800953a:	fa01 f303 	lsl.w	r3, r1, r3
 800953e:	4298      	cmp	r0, r3
 8009540:	d142      	bne.n	80095c8 <_strtod_l+0x8f8>
 8009542:	4ba7      	ldr	r3, [pc, #668]	; (80097e0 <_strtod_l+0xb10>)
 8009544:	429d      	cmp	r5, r3
 8009546:	d102      	bne.n	800954e <_strtod_l+0x87e>
 8009548:	3001      	adds	r0, #1
 800954a:	f43f addf 	beq.w	800910c <_strtod_l+0x43c>
 800954e:	4ba3      	ldr	r3, [pc, #652]	; (80097dc <_strtod_l+0xb0c>)
 8009550:	402b      	ands	r3, r5
 8009552:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009556:	f04f 0a00 	mov.w	sl, #0
 800955a:	e7a0      	b.n	800949e <_strtod_l+0x7ce>
 800955c:	f04f 33ff 	mov.w	r3, #4294967295
 8009560:	e7ed      	b.n	800953e <_strtod_l+0x86e>
 8009562:	460b      	mov	r3, r1
 8009564:	e7eb      	b.n	800953e <_strtod_l+0x86e>
 8009566:	bb7b      	cbnz	r3, 80095c8 <_strtod_l+0x8f8>
 8009568:	f1ba 0f00 	cmp.w	sl, #0
 800956c:	d12c      	bne.n	80095c8 <_strtod_l+0x8f8>
 800956e:	9904      	ldr	r1, [sp, #16]
 8009570:	4a9a      	ldr	r2, [pc, #616]	; (80097dc <_strtod_l+0xb0c>)
 8009572:	465b      	mov	r3, fp
 8009574:	b1f1      	cbz	r1, 80095b4 <_strtod_l+0x8e4>
 8009576:	ea02 010b 	and.w	r1, r2, fp
 800957a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800957e:	dc19      	bgt.n	80095b4 <_strtod_l+0x8e4>
 8009580:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009584:	f77f ae5b 	ble.w	800923e <_strtod_l+0x56e>
 8009588:	4a96      	ldr	r2, [pc, #600]	; (80097e4 <_strtod_l+0xb14>)
 800958a:	2300      	movs	r3, #0
 800958c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009590:	4650      	mov	r0, sl
 8009592:	4659      	mov	r1, fp
 8009594:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009598:	f7f7 f82e 	bl	80005f8 <__aeabi_dmul>
 800959c:	4682      	mov	sl, r0
 800959e:	468b      	mov	fp, r1
 80095a0:	2900      	cmp	r1, #0
 80095a2:	f47f adbe 	bne.w	8009122 <_strtod_l+0x452>
 80095a6:	2800      	cmp	r0, #0
 80095a8:	f47f adbb 	bne.w	8009122 <_strtod_l+0x452>
 80095ac:	2322      	movs	r3, #34	; 0x22
 80095ae:	f8c9 3000 	str.w	r3, [r9]
 80095b2:	e5b6      	b.n	8009122 <_strtod_l+0x452>
 80095b4:	4013      	ands	r3, r2
 80095b6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80095ba:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80095be:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80095c2:	f04f 3aff 	mov.w	sl, #4294967295
 80095c6:	e76a      	b.n	800949e <_strtod_l+0x7ce>
 80095c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095ca:	b193      	cbz	r3, 80095f2 <_strtod_l+0x922>
 80095cc:	422b      	tst	r3, r5
 80095ce:	f43f af66 	beq.w	800949e <_strtod_l+0x7ce>
 80095d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095d4:	9a04      	ldr	r2, [sp, #16]
 80095d6:	4650      	mov	r0, sl
 80095d8:	4659      	mov	r1, fp
 80095da:	b173      	cbz	r3, 80095fa <_strtod_l+0x92a>
 80095dc:	f7ff fb5a 	bl	8008c94 <sulp>
 80095e0:	4602      	mov	r2, r0
 80095e2:	460b      	mov	r3, r1
 80095e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80095e8:	f7f6 fe50 	bl	800028c <__adddf3>
 80095ec:	4682      	mov	sl, r0
 80095ee:	468b      	mov	fp, r1
 80095f0:	e755      	b.n	800949e <_strtod_l+0x7ce>
 80095f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095f4:	ea13 0f0a 	tst.w	r3, sl
 80095f8:	e7e9      	b.n	80095ce <_strtod_l+0x8fe>
 80095fa:	f7ff fb4b 	bl	8008c94 <sulp>
 80095fe:	4602      	mov	r2, r0
 8009600:	460b      	mov	r3, r1
 8009602:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009606:	f7f6 fe3f 	bl	8000288 <__aeabi_dsub>
 800960a:	2200      	movs	r2, #0
 800960c:	2300      	movs	r3, #0
 800960e:	4682      	mov	sl, r0
 8009610:	468b      	mov	fp, r1
 8009612:	f7f7 fa59 	bl	8000ac8 <__aeabi_dcmpeq>
 8009616:	2800      	cmp	r0, #0
 8009618:	f47f ae11 	bne.w	800923e <_strtod_l+0x56e>
 800961c:	e73f      	b.n	800949e <_strtod_l+0x7ce>
 800961e:	4641      	mov	r1, r8
 8009620:	4620      	mov	r0, r4
 8009622:	f001 ffdc 	bl	800b5de <__ratio>
 8009626:	ec57 6b10 	vmov	r6, r7, d0
 800962a:	2200      	movs	r2, #0
 800962c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009630:	ee10 0a10 	vmov	r0, s0
 8009634:	4639      	mov	r1, r7
 8009636:	f7f7 fa5b 	bl	8000af0 <__aeabi_dcmple>
 800963a:	2800      	cmp	r0, #0
 800963c:	d077      	beq.n	800972e <_strtod_l+0xa5e>
 800963e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009640:	2b00      	cmp	r3, #0
 8009642:	d04a      	beq.n	80096da <_strtod_l+0xa0a>
 8009644:	4b68      	ldr	r3, [pc, #416]	; (80097e8 <_strtod_l+0xb18>)
 8009646:	2200      	movs	r2, #0
 8009648:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800964c:	4f66      	ldr	r7, [pc, #408]	; (80097e8 <_strtod_l+0xb18>)
 800964e:	2600      	movs	r6, #0
 8009650:	4b62      	ldr	r3, [pc, #392]	; (80097dc <_strtod_l+0xb0c>)
 8009652:	402b      	ands	r3, r5
 8009654:	930f      	str	r3, [sp, #60]	; 0x3c
 8009656:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009658:	4b64      	ldr	r3, [pc, #400]	; (80097ec <_strtod_l+0xb1c>)
 800965a:	429a      	cmp	r2, r3
 800965c:	f040 80ce 	bne.w	80097fc <_strtod_l+0xb2c>
 8009660:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009664:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009668:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800966c:	ec4b ab10 	vmov	d0, sl, fp
 8009670:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009674:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009678:	f001 feec 	bl	800b454 <__ulp>
 800967c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009680:	ec53 2b10 	vmov	r2, r3, d0
 8009684:	f7f6 ffb8 	bl	80005f8 <__aeabi_dmul>
 8009688:	4652      	mov	r2, sl
 800968a:	465b      	mov	r3, fp
 800968c:	f7f6 fdfe 	bl	800028c <__adddf3>
 8009690:	460b      	mov	r3, r1
 8009692:	4952      	ldr	r1, [pc, #328]	; (80097dc <_strtod_l+0xb0c>)
 8009694:	4a56      	ldr	r2, [pc, #344]	; (80097f0 <_strtod_l+0xb20>)
 8009696:	4019      	ands	r1, r3
 8009698:	4291      	cmp	r1, r2
 800969a:	4682      	mov	sl, r0
 800969c:	d95b      	bls.n	8009756 <_strtod_l+0xa86>
 800969e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096a0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d103      	bne.n	80096b0 <_strtod_l+0x9e0>
 80096a8:	9b08      	ldr	r3, [sp, #32]
 80096aa:	3301      	adds	r3, #1
 80096ac:	f43f ad2e 	beq.w	800910c <_strtod_l+0x43c>
 80096b0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80097e0 <_strtod_l+0xb10>
 80096b4:	f04f 3aff 	mov.w	sl, #4294967295
 80096b8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80096ba:	4648      	mov	r0, r9
 80096bc:	f001 fc32 	bl	800af24 <_Bfree>
 80096c0:	9905      	ldr	r1, [sp, #20]
 80096c2:	4648      	mov	r0, r9
 80096c4:	f001 fc2e 	bl	800af24 <_Bfree>
 80096c8:	4641      	mov	r1, r8
 80096ca:	4648      	mov	r0, r9
 80096cc:	f001 fc2a 	bl	800af24 <_Bfree>
 80096d0:	4621      	mov	r1, r4
 80096d2:	4648      	mov	r0, r9
 80096d4:	f001 fc26 	bl	800af24 <_Bfree>
 80096d8:	e619      	b.n	800930e <_strtod_l+0x63e>
 80096da:	f1ba 0f00 	cmp.w	sl, #0
 80096de:	d11a      	bne.n	8009716 <_strtod_l+0xa46>
 80096e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096e4:	b9eb      	cbnz	r3, 8009722 <_strtod_l+0xa52>
 80096e6:	2200      	movs	r2, #0
 80096e8:	4b3f      	ldr	r3, [pc, #252]	; (80097e8 <_strtod_l+0xb18>)
 80096ea:	4630      	mov	r0, r6
 80096ec:	4639      	mov	r1, r7
 80096ee:	f7f7 f9f5 	bl	8000adc <__aeabi_dcmplt>
 80096f2:	b9c8      	cbnz	r0, 8009728 <_strtod_l+0xa58>
 80096f4:	4630      	mov	r0, r6
 80096f6:	4639      	mov	r1, r7
 80096f8:	2200      	movs	r2, #0
 80096fa:	4b3e      	ldr	r3, [pc, #248]	; (80097f4 <_strtod_l+0xb24>)
 80096fc:	f7f6 ff7c 	bl	80005f8 <__aeabi_dmul>
 8009700:	4606      	mov	r6, r0
 8009702:	460f      	mov	r7, r1
 8009704:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009708:	9618      	str	r6, [sp, #96]	; 0x60
 800970a:	9319      	str	r3, [sp, #100]	; 0x64
 800970c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8009710:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009714:	e79c      	b.n	8009650 <_strtod_l+0x980>
 8009716:	f1ba 0f01 	cmp.w	sl, #1
 800971a:	d102      	bne.n	8009722 <_strtod_l+0xa52>
 800971c:	2d00      	cmp	r5, #0
 800971e:	f43f ad8e 	beq.w	800923e <_strtod_l+0x56e>
 8009722:	2200      	movs	r2, #0
 8009724:	4b34      	ldr	r3, [pc, #208]	; (80097f8 <_strtod_l+0xb28>)
 8009726:	e78f      	b.n	8009648 <_strtod_l+0x978>
 8009728:	2600      	movs	r6, #0
 800972a:	4f32      	ldr	r7, [pc, #200]	; (80097f4 <_strtod_l+0xb24>)
 800972c:	e7ea      	b.n	8009704 <_strtod_l+0xa34>
 800972e:	4b31      	ldr	r3, [pc, #196]	; (80097f4 <_strtod_l+0xb24>)
 8009730:	4630      	mov	r0, r6
 8009732:	4639      	mov	r1, r7
 8009734:	2200      	movs	r2, #0
 8009736:	f7f6 ff5f 	bl	80005f8 <__aeabi_dmul>
 800973a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800973c:	4606      	mov	r6, r0
 800973e:	460f      	mov	r7, r1
 8009740:	b933      	cbnz	r3, 8009750 <_strtod_l+0xa80>
 8009742:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009746:	9010      	str	r0, [sp, #64]	; 0x40
 8009748:	9311      	str	r3, [sp, #68]	; 0x44
 800974a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800974e:	e7df      	b.n	8009710 <_strtod_l+0xa40>
 8009750:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009754:	e7f9      	b.n	800974a <_strtod_l+0xa7a>
 8009756:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800975a:	9b04      	ldr	r3, [sp, #16]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d1ab      	bne.n	80096b8 <_strtod_l+0x9e8>
 8009760:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009764:	0d1b      	lsrs	r3, r3, #20
 8009766:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009768:	051b      	lsls	r3, r3, #20
 800976a:	429a      	cmp	r2, r3
 800976c:	465d      	mov	r5, fp
 800976e:	d1a3      	bne.n	80096b8 <_strtod_l+0x9e8>
 8009770:	4639      	mov	r1, r7
 8009772:	4630      	mov	r0, r6
 8009774:	f7f7 f9f0 	bl	8000b58 <__aeabi_d2iz>
 8009778:	f7f6 fed4 	bl	8000524 <__aeabi_i2d>
 800977c:	460b      	mov	r3, r1
 800977e:	4602      	mov	r2, r0
 8009780:	4639      	mov	r1, r7
 8009782:	4630      	mov	r0, r6
 8009784:	f7f6 fd80 	bl	8000288 <__aeabi_dsub>
 8009788:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800978a:	4606      	mov	r6, r0
 800978c:	460f      	mov	r7, r1
 800978e:	b933      	cbnz	r3, 800979e <_strtod_l+0xace>
 8009790:	f1ba 0f00 	cmp.w	sl, #0
 8009794:	d103      	bne.n	800979e <_strtod_l+0xace>
 8009796:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800979a:	2d00      	cmp	r5, #0
 800979c:	d06d      	beq.n	800987a <_strtod_l+0xbaa>
 800979e:	a30a      	add	r3, pc, #40	; (adr r3, 80097c8 <_strtod_l+0xaf8>)
 80097a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a4:	4630      	mov	r0, r6
 80097a6:	4639      	mov	r1, r7
 80097a8:	f7f7 f998 	bl	8000adc <__aeabi_dcmplt>
 80097ac:	2800      	cmp	r0, #0
 80097ae:	f47f acb8 	bne.w	8009122 <_strtod_l+0x452>
 80097b2:	a307      	add	r3, pc, #28	; (adr r3, 80097d0 <_strtod_l+0xb00>)
 80097b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b8:	4630      	mov	r0, r6
 80097ba:	4639      	mov	r1, r7
 80097bc:	f7f7 f9ac 	bl	8000b18 <__aeabi_dcmpgt>
 80097c0:	2800      	cmp	r0, #0
 80097c2:	f43f af79 	beq.w	80096b8 <_strtod_l+0x9e8>
 80097c6:	e4ac      	b.n	8009122 <_strtod_l+0x452>
 80097c8:	94a03595 	.word	0x94a03595
 80097cc:	3fdfffff 	.word	0x3fdfffff
 80097d0:	35afe535 	.word	0x35afe535
 80097d4:	3fe00000 	.word	0x3fe00000
 80097d8:	000fffff 	.word	0x000fffff
 80097dc:	7ff00000 	.word	0x7ff00000
 80097e0:	7fefffff 	.word	0x7fefffff
 80097e4:	39500000 	.word	0x39500000
 80097e8:	3ff00000 	.word	0x3ff00000
 80097ec:	7fe00000 	.word	0x7fe00000
 80097f0:	7c9fffff 	.word	0x7c9fffff
 80097f4:	3fe00000 	.word	0x3fe00000
 80097f8:	bff00000 	.word	0xbff00000
 80097fc:	9b04      	ldr	r3, [sp, #16]
 80097fe:	b333      	cbz	r3, 800984e <_strtod_l+0xb7e>
 8009800:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009802:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009806:	d822      	bhi.n	800984e <_strtod_l+0xb7e>
 8009808:	a327      	add	r3, pc, #156	; (adr r3, 80098a8 <_strtod_l+0xbd8>)
 800980a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980e:	4630      	mov	r0, r6
 8009810:	4639      	mov	r1, r7
 8009812:	f7f7 f96d 	bl	8000af0 <__aeabi_dcmple>
 8009816:	b1a0      	cbz	r0, 8009842 <_strtod_l+0xb72>
 8009818:	4639      	mov	r1, r7
 800981a:	4630      	mov	r0, r6
 800981c:	f7f7 f9c4 	bl	8000ba8 <__aeabi_d2uiz>
 8009820:	2800      	cmp	r0, #0
 8009822:	bf08      	it	eq
 8009824:	2001      	moveq	r0, #1
 8009826:	f7f6 fe6d 	bl	8000504 <__aeabi_ui2d>
 800982a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800982c:	4606      	mov	r6, r0
 800982e:	460f      	mov	r7, r1
 8009830:	bb03      	cbnz	r3, 8009874 <_strtod_l+0xba4>
 8009832:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009836:	9012      	str	r0, [sp, #72]	; 0x48
 8009838:	9313      	str	r3, [sp, #76]	; 0x4c
 800983a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800983e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009844:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009846:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800984a:	1a9b      	subs	r3, r3, r2
 800984c:	930b      	str	r3, [sp, #44]	; 0x2c
 800984e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8009852:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8009856:	f001 fdfd 	bl	800b454 <__ulp>
 800985a:	4650      	mov	r0, sl
 800985c:	ec53 2b10 	vmov	r2, r3, d0
 8009860:	4659      	mov	r1, fp
 8009862:	f7f6 fec9 	bl	80005f8 <__aeabi_dmul>
 8009866:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800986a:	f7f6 fd0f 	bl	800028c <__adddf3>
 800986e:	4682      	mov	sl, r0
 8009870:	468b      	mov	fp, r1
 8009872:	e772      	b.n	800975a <_strtod_l+0xa8a>
 8009874:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8009878:	e7df      	b.n	800983a <_strtod_l+0xb6a>
 800987a:	a30d      	add	r3, pc, #52	; (adr r3, 80098b0 <_strtod_l+0xbe0>)
 800987c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009880:	f7f7 f92c 	bl	8000adc <__aeabi_dcmplt>
 8009884:	e79c      	b.n	80097c0 <_strtod_l+0xaf0>
 8009886:	2300      	movs	r3, #0
 8009888:	930d      	str	r3, [sp, #52]	; 0x34
 800988a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800988c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800988e:	6013      	str	r3, [r2, #0]
 8009890:	f7ff ba61 	b.w	8008d56 <_strtod_l+0x86>
 8009894:	2b65      	cmp	r3, #101	; 0x65
 8009896:	f04f 0200 	mov.w	r2, #0
 800989a:	f43f ab4e 	beq.w	8008f3a <_strtod_l+0x26a>
 800989e:	2101      	movs	r1, #1
 80098a0:	4614      	mov	r4, r2
 80098a2:	9104      	str	r1, [sp, #16]
 80098a4:	f7ff bacb 	b.w	8008e3e <_strtod_l+0x16e>
 80098a8:	ffc00000 	.word	0xffc00000
 80098ac:	41dfffff 	.word	0x41dfffff
 80098b0:	94a03595 	.word	0x94a03595
 80098b4:	3fcfffff 	.word	0x3fcfffff

080098b8 <_strtod_r>:
 80098b8:	4b05      	ldr	r3, [pc, #20]	; (80098d0 <_strtod_r+0x18>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	b410      	push	{r4}
 80098be:	6a1b      	ldr	r3, [r3, #32]
 80098c0:	4c04      	ldr	r4, [pc, #16]	; (80098d4 <_strtod_r+0x1c>)
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	bf08      	it	eq
 80098c6:	4623      	moveq	r3, r4
 80098c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098cc:	f7ff ba00 	b.w	8008cd0 <_strtod_l>
 80098d0:	20000024 	.word	0x20000024
 80098d4:	20000088 	.word	0x20000088

080098d8 <_strtol_l.isra.0>:
 80098d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098dc:	4680      	mov	r8, r0
 80098de:	4689      	mov	r9, r1
 80098e0:	4692      	mov	sl, r2
 80098e2:	461e      	mov	r6, r3
 80098e4:	460f      	mov	r7, r1
 80098e6:	463d      	mov	r5, r7
 80098e8:	9808      	ldr	r0, [sp, #32]
 80098ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80098ee:	f001 fab7 	bl	800ae60 <__locale_ctype_ptr_l>
 80098f2:	4420      	add	r0, r4
 80098f4:	7843      	ldrb	r3, [r0, #1]
 80098f6:	f013 0308 	ands.w	r3, r3, #8
 80098fa:	d132      	bne.n	8009962 <_strtol_l.isra.0+0x8a>
 80098fc:	2c2d      	cmp	r4, #45	; 0x2d
 80098fe:	d132      	bne.n	8009966 <_strtol_l.isra.0+0x8e>
 8009900:	787c      	ldrb	r4, [r7, #1]
 8009902:	1cbd      	adds	r5, r7, #2
 8009904:	2201      	movs	r2, #1
 8009906:	2e00      	cmp	r6, #0
 8009908:	d05d      	beq.n	80099c6 <_strtol_l.isra.0+0xee>
 800990a:	2e10      	cmp	r6, #16
 800990c:	d109      	bne.n	8009922 <_strtol_l.isra.0+0x4a>
 800990e:	2c30      	cmp	r4, #48	; 0x30
 8009910:	d107      	bne.n	8009922 <_strtol_l.isra.0+0x4a>
 8009912:	782b      	ldrb	r3, [r5, #0]
 8009914:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009918:	2b58      	cmp	r3, #88	; 0x58
 800991a:	d14f      	bne.n	80099bc <_strtol_l.isra.0+0xe4>
 800991c:	786c      	ldrb	r4, [r5, #1]
 800991e:	2610      	movs	r6, #16
 8009920:	3502      	adds	r5, #2
 8009922:	2a00      	cmp	r2, #0
 8009924:	bf14      	ite	ne
 8009926:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800992a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800992e:	2700      	movs	r7, #0
 8009930:	fbb1 fcf6 	udiv	ip, r1, r6
 8009934:	4638      	mov	r0, r7
 8009936:	fb06 1e1c 	mls	lr, r6, ip, r1
 800993a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800993e:	2b09      	cmp	r3, #9
 8009940:	d817      	bhi.n	8009972 <_strtol_l.isra.0+0x9a>
 8009942:	461c      	mov	r4, r3
 8009944:	42a6      	cmp	r6, r4
 8009946:	dd23      	ble.n	8009990 <_strtol_l.isra.0+0xb8>
 8009948:	1c7b      	adds	r3, r7, #1
 800994a:	d007      	beq.n	800995c <_strtol_l.isra.0+0x84>
 800994c:	4584      	cmp	ip, r0
 800994e:	d31c      	bcc.n	800998a <_strtol_l.isra.0+0xb2>
 8009950:	d101      	bne.n	8009956 <_strtol_l.isra.0+0x7e>
 8009952:	45a6      	cmp	lr, r4
 8009954:	db19      	blt.n	800998a <_strtol_l.isra.0+0xb2>
 8009956:	fb00 4006 	mla	r0, r0, r6, r4
 800995a:	2701      	movs	r7, #1
 800995c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009960:	e7eb      	b.n	800993a <_strtol_l.isra.0+0x62>
 8009962:	462f      	mov	r7, r5
 8009964:	e7bf      	b.n	80098e6 <_strtol_l.isra.0+0xe>
 8009966:	2c2b      	cmp	r4, #43	; 0x2b
 8009968:	bf04      	itt	eq
 800996a:	1cbd      	addeq	r5, r7, #2
 800996c:	787c      	ldrbeq	r4, [r7, #1]
 800996e:	461a      	mov	r2, r3
 8009970:	e7c9      	b.n	8009906 <_strtol_l.isra.0+0x2e>
 8009972:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009976:	2b19      	cmp	r3, #25
 8009978:	d801      	bhi.n	800997e <_strtol_l.isra.0+0xa6>
 800997a:	3c37      	subs	r4, #55	; 0x37
 800997c:	e7e2      	b.n	8009944 <_strtol_l.isra.0+0x6c>
 800997e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009982:	2b19      	cmp	r3, #25
 8009984:	d804      	bhi.n	8009990 <_strtol_l.isra.0+0xb8>
 8009986:	3c57      	subs	r4, #87	; 0x57
 8009988:	e7dc      	b.n	8009944 <_strtol_l.isra.0+0x6c>
 800998a:	f04f 37ff 	mov.w	r7, #4294967295
 800998e:	e7e5      	b.n	800995c <_strtol_l.isra.0+0x84>
 8009990:	1c7b      	adds	r3, r7, #1
 8009992:	d108      	bne.n	80099a6 <_strtol_l.isra.0+0xce>
 8009994:	2322      	movs	r3, #34	; 0x22
 8009996:	f8c8 3000 	str.w	r3, [r8]
 800999a:	4608      	mov	r0, r1
 800999c:	f1ba 0f00 	cmp.w	sl, #0
 80099a0:	d107      	bne.n	80099b2 <_strtol_l.isra.0+0xda>
 80099a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099a6:	b102      	cbz	r2, 80099aa <_strtol_l.isra.0+0xd2>
 80099a8:	4240      	negs	r0, r0
 80099aa:	f1ba 0f00 	cmp.w	sl, #0
 80099ae:	d0f8      	beq.n	80099a2 <_strtol_l.isra.0+0xca>
 80099b0:	b10f      	cbz	r7, 80099b6 <_strtol_l.isra.0+0xde>
 80099b2:	f105 39ff 	add.w	r9, r5, #4294967295
 80099b6:	f8ca 9000 	str.w	r9, [sl]
 80099ba:	e7f2      	b.n	80099a2 <_strtol_l.isra.0+0xca>
 80099bc:	2430      	movs	r4, #48	; 0x30
 80099be:	2e00      	cmp	r6, #0
 80099c0:	d1af      	bne.n	8009922 <_strtol_l.isra.0+0x4a>
 80099c2:	2608      	movs	r6, #8
 80099c4:	e7ad      	b.n	8009922 <_strtol_l.isra.0+0x4a>
 80099c6:	2c30      	cmp	r4, #48	; 0x30
 80099c8:	d0a3      	beq.n	8009912 <_strtol_l.isra.0+0x3a>
 80099ca:	260a      	movs	r6, #10
 80099cc:	e7a9      	b.n	8009922 <_strtol_l.isra.0+0x4a>
	...

080099d0 <_strtol_r>:
 80099d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099d2:	4c06      	ldr	r4, [pc, #24]	; (80099ec <_strtol_r+0x1c>)
 80099d4:	4d06      	ldr	r5, [pc, #24]	; (80099f0 <_strtol_r+0x20>)
 80099d6:	6824      	ldr	r4, [r4, #0]
 80099d8:	6a24      	ldr	r4, [r4, #32]
 80099da:	2c00      	cmp	r4, #0
 80099dc:	bf08      	it	eq
 80099de:	462c      	moveq	r4, r5
 80099e0:	9400      	str	r4, [sp, #0]
 80099e2:	f7ff ff79 	bl	80098d8 <_strtol_l.isra.0>
 80099e6:	b003      	add	sp, #12
 80099e8:	bd30      	pop	{r4, r5, pc}
 80099ea:	bf00      	nop
 80099ec:	20000024 	.word	0x20000024
 80099f0:	20000088 	.word	0x20000088

080099f4 <quorem>:
 80099f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f8:	6903      	ldr	r3, [r0, #16]
 80099fa:	690c      	ldr	r4, [r1, #16]
 80099fc:	42a3      	cmp	r3, r4
 80099fe:	4680      	mov	r8, r0
 8009a00:	f2c0 8082 	blt.w	8009b08 <quorem+0x114>
 8009a04:	3c01      	subs	r4, #1
 8009a06:	f101 0714 	add.w	r7, r1, #20
 8009a0a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009a0e:	f100 0614 	add.w	r6, r0, #20
 8009a12:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009a16:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009a1a:	eb06 030c 	add.w	r3, r6, ip
 8009a1e:	3501      	adds	r5, #1
 8009a20:	eb07 090c 	add.w	r9, r7, ip
 8009a24:	9301      	str	r3, [sp, #4]
 8009a26:	fbb0 f5f5 	udiv	r5, r0, r5
 8009a2a:	b395      	cbz	r5, 8009a92 <quorem+0x9e>
 8009a2c:	f04f 0a00 	mov.w	sl, #0
 8009a30:	4638      	mov	r0, r7
 8009a32:	46b6      	mov	lr, r6
 8009a34:	46d3      	mov	fp, sl
 8009a36:	f850 2b04 	ldr.w	r2, [r0], #4
 8009a3a:	b293      	uxth	r3, r2
 8009a3c:	fb05 a303 	mla	r3, r5, r3, sl
 8009a40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	ebab 0303 	sub.w	r3, fp, r3
 8009a4a:	0c12      	lsrs	r2, r2, #16
 8009a4c:	f8de b000 	ldr.w	fp, [lr]
 8009a50:	fb05 a202 	mla	r2, r5, r2, sl
 8009a54:	fa13 f38b 	uxtah	r3, r3, fp
 8009a58:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009a5c:	fa1f fb82 	uxth.w	fp, r2
 8009a60:	f8de 2000 	ldr.w	r2, [lr]
 8009a64:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009a68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a72:	4581      	cmp	r9, r0
 8009a74:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009a78:	f84e 3b04 	str.w	r3, [lr], #4
 8009a7c:	d2db      	bcs.n	8009a36 <quorem+0x42>
 8009a7e:	f856 300c 	ldr.w	r3, [r6, ip]
 8009a82:	b933      	cbnz	r3, 8009a92 <quorem+0x9e>
 8009a84:	9b01      	ldr	r3, [sp, #4]
 8009a86:	3b04      	subs	r3, #4
 8009a88:	429e      	cmp	r6, r3
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	d330      	bcc.n	8009af0 <quorem+0xfc>
 8009a8e:	f8c8 4010 	str.w	r4, [r8, #16]
 8009a92:	4640      	mov	r0, r8
 8009a94:	f001 fc66 	bl	800b364 <__mcmp>
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	db25      	blt.n	8009ae8 <quorem+0xf4>
 8009a9c:	3501      	adds	r5, #1
 8009a9e:	4630      	mov	r0, r6
 8009aa0:	f04f 0c00 	mov.w	ip, #0
 8009aa4:	f857 2b04 	ldr.w	r2, [r7], #4
 8009aa8:	f8d0 e000 	ldr.w	lr, [r0]
 8009aac:	b293      	uxth	r3, r2
 8009aae:	ebac 0303 	sub.w	r3, ip, r3
 8009ab2:	0c12      	lsrs	r2, r2, #16
 8009ab4:	fa13 f38e 	uxtah	r3, r3, lr
 8009ab8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009abc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ac6:	45b9      	cmp	r9, r7
 8009ac8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009acc:	f840 3b04 	str.w	r3, [r0], #4
 8009ad0:	d2e8      	bcs.n	8009aa4 <quorem+0xb0>
 8009ad2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009ad6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009ada:	b92a      	cbnz	r2, 8009ae8 <quorem+0xf4>
 8009adc:	3b04      	subs	r3, #4
 8009ade:	429e      	cmp	r6, r3
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	d30b      	bcc.n	8009afc <quorem+0x108>
 8009ae4:	f8c8 4010 	str.w	r4, [r8, #16]
 8009ae8:	4628      	mov	r0, r5
 8009aea:	b003      	add	sp, #12
 8009aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009af0:	6812      	ldr	r2, [r2, #0]
 8009af2:	3b04      	subs	r3, #4
 8009af4:	2a00      	cmp	r2, #0
 8009af6:	d1ca      	bne.n	8009a8e <quorem+0x9a>
 8009af8:	3c01      	subs	r4, #1
 8009afa:	e7c5      	b.n	8009a88 <quorem+0x94>
 8009afc:	6812      	ldr	r2, [r2, #0]
 8009afe:	3b04      	subs	r3, #4
 8009b00:	2a00      	cmp	r2, #0
 8009b02:	d1ef      	bne.n	8009ae4 <quorem+0xf0>
 8009b04:	3c01      	subs	r4, #1
 8009b06:	e7ea      	b.n	8009ade <quorem+0xea>
 8009b08:	2000      	movs	r0, #0
 8009b0a:	e7ee      	b.n	8009aea <quorem+0xf6>
 8009b0c:	0000      	movs	r0, r0
	...

08009b10 <_dtoa_r>:
 8009b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b14:	ec57 6b10 	vmov	r6, r7, d0
 8009b18:	b097      	sub	sp, #92	; 0x5c
 8009b1a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009b1c:	9106      	str	r1, [sp, #24]
 8009b1e:	4604      	mov	r4, r0
 8009b20:	920b      	str	r2, [sp, #44]	; 0x2c
 8009b22:	9312      	str	r3, [sp, #72]	; 0x48
 8009b24:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009b28:	e9cd 6700 	strd	r6, r7, [sp]
 8009b2c:	b93d      	cbnz	r5, 8009b3e <_dtoa_r+0x2e>
 8009b2e:	2010      	movs	r0, #16
 8009b30:	f001 f9aa 	bl	800ae88 <malloc>
 8009b34:	6260      	str	r0, [r4, #36]	; 0x24
 8009b36:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009b3a:	6005      	str	r5, [r0, #0]
 8009b3c:	60c5      	str	r5, [r0, #12]
 8009b3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b40:	6819      	ldr	r1, [r3, #0]
 8009b42:	b151      	cbz	r1, 8009b5a <_dtoa_r+0x4a>
 8009b44:	685a      	ldr	r2, [r3, #4]
 8009b46:	604a      	str	r2, [r1, #4]
 8009b48:	2301      	movs	r3, #1
 8009b4a:	4093      	lsls	r3, r2
 8009b4c:	608b      	str	r3, [r1, #8]
 8009b4e:	4620      	mov	r0, r4
 8009b50:	f001 f9e8 	bl	800af24 <_Bfree>
 8009b54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b56:	2200      	movs	r2, #0
 8009b58:	601a      	str	r2, [r3, #0]
 8009b5a:	1e3b      	subs	r3, r7, #0
 8009b5c:	bfbb      	ittet	lt
 8009b5e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009b62:	9301      	strlt	r3, [sp, #4]
 8009b64:	2300      	movge	r3, #0
 8009b66:	2201      	movlt	r2, #1
 8009b68:	bfac      	ite	ge
 8009b6a:	f8c8 3000 	strge.w	r3, [r8]
 8009b6e:	f8c8 2000 	strlt.w	r2, [r8]
 8009b72:	4baf      	ldr	r3, [pc, #700]	; (8009e30 <_dtoa_r+0x320>)
 8009b74:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009b78:	ea33 0308 	bics.w	r3, r3, r8
 8009b7c:	d114      	bne.n	8009ba8 <_dtoa_r+0x98>
 8009b7e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009b80:	f242 730f 	movw	r3, #9999	; 0x270f
 8009b84:	6013      	str	r3, [r2, #0]
 8009b86:	9b00      	ldr	r3, [sp, #0]
 8009b88:	b923      	cbnz	r3, 8009b94 <_dtoa_r+0x84>
 8009b8a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009b8e:	2800      	cmp	r0, #0
 8009b90:	f000 8542 	beq.w	800a618 <_dtoa_r+0xb08>
 8009b94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b96:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009e44 <_dtoa_r+0x334>
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	f000 8544 	beq.w	800a628 <_dtoa_r+0xb18>
 8009ba0:	f10b 0303 	add.w	r3, fp, #3
 8009ba4:	f000 bd3e 	b.w	800a624 <_dtoa_r+0xb14>
 8009ba8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009bac:	2200      	movs	r2, #0
 8009bae:	2300      	movs	r3, #0
 8009bb0:	4630      	mov	r0, r6
 8009bb2:	4639      	mov	r1, r7
 8009bb4:	f7f6 ff88 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bb8:	4681      	mov	r9, r0
 8009bba:	b168      	cbz	r0, 8009bd8 <_dtoa_r+0xc8>
 8009bbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	6013      	str	r3, [r2, #0]
 8009bc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	f000 8524 	beq.w	800a612 <_dtoa_r+0xb02>
 8009bca:	4b9a      	ldr	r3, [pc, #616]	; (8009e34 <_dtoa_r+0x324>)
 8009bcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009bce:	f103 3bff 	add.w	fp, r3, #4294967295
 8009bd2:	6013      	str	r3, [r2, #0]
 8009bd4:	f000 bd28 	b.w	800a628 <_dtoa_r+0xb18>
 8009bd8:	aa14      	add	r2, sp, #80	; 0x50
 8009bda:	a915      	add	r1, sp, #84	; 0x54
 8009bdc:	ec47 6b10 	vmov	d0, r6, r7
 8009be0:	4620      	mov	r0, r4
 8009be2:	f001 fcad 	bl	800b540 <__d2b>
 8009be6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009bea:	9004      	str	r0, [sp, #16]
 8009bec:	2d00      	cmp	r5, #0
 8009bee:	d07c      	beq.n	8009cea <_dtoa_r+0x1da>
 8009bf0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009bf4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009bf8:	46b2      	mov	sl, r6
 8009bfa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009bfe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009c02:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8009c06:	2200      	movs	r2, #0
 8009c08:	4b8b      	ldr	r3, [pc, #556]	; (8009e38 <_dtoa_r+0x328>)
 8009c0a:	4650      	mov	r0, sl
 8009c0c:	4659      	mov	r1, fp
 8009c0e:	f7f6 fb3b 	bl	8000288 <__aeabi_dsub>
 8009c12:	a381      	add	r3, pc, #516	; (adr r3, 8009e18 <_dtoa_r+0x308>)
 8009c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c18:	f7f6 fcee 	bl	80005f8 <__aeabi_dmul>
 8009c1c:	a380      	add	r3, pc, #512	; (adr r3, 8009e20 <_dtoa_r+0x310>)
 8009c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c22:	f7f6 fb33 	bl	800028c <__adddf3>
 8009c26:	4606      	mov	r6, r0
 8009c28:	4628      	mov	r0, r5
 8009c2a:	460f      	mov	r7, r1
 8009c2c:	f7f6 fc7a 	bl	8000524 <__aeabi_i2d>
 8009c30:	a37d      	add	r3, pc, #500	; (adr r3, 8009e28 <_dtoa_r+0x318>)
 8009c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c36:	f7f6 fcdf 	bl	80005f8 <__aeabi_dmul>
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	4630      	mov	r0, r6
 8009c40:	4639      	mov	r1, r7
 8009c42:	f7f6 fb23 	bl	800028c <__adddf3>
 8009c46:	4606      	mov	r6, r0
 8009c48:	460f      	mov	r7, r1
 8009c4a:	f7f6 ff85 	bl	8000b58 <__aeabi_d2iz>
 8009c4e:	2200      	movs	r2, #0
 8009c50:	4682      	mov	sl, r0
 8009c52:	2300      	movs	r3, #0
 8009c54:	4630      	mov	r0, r6
 8009c56:	4639      	mov	r1, r7
 8009c58:	f7f6 ff40 	bl	8000adc <__aeabi_dcmplt>
 8009c5c:	b148      	cbz	r0, 8009c72 <_dtoa_r+0x162>
 8009c5e:	4650      	mov	r0, sl
 8009c60:	f7f6 fc60 	bl	8000524 <__aeabi_i2d>
 8009c64:	4632      	mov	r2, r6
 8009c66:	463b      	mov	r3, r7
 8009c68:	f7f6 ff2e 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c6c:	b908      	cbnz	r0, 8009c72 <_dtoa_r+0x162>
 8009c6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c72:	f1ba 0f16 	cmp.w	sl, #22
 8009c76:	d859      	bhi.n	8009d2c <_dtoa_r+0x21c>
 8009c78:	4970      	ldr	r1, [pc, #448]	; (8009e3c <_dtoa_r+0x32c>)
 8009c7a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009c7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c86:	f7f6 ff47 	bl	8000b18 <__aeabi_dcmpgt>
 8009c8a:	2800      	cmp	r0, #0
 8009c8c:	d050      	beq.n	8009d30 <_dtoa_r+0x220>
 8009c8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c92:	2300      	movs	r3, #0
 8009c94:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009c98:	1b5d      	subs	r5, r3, r5
 8009c9a:	f1b5 0801 	subs.w	r8, r5, #1
 8009c9e:	bf49      	itett	mi
 8009ca0:	f1c5 0301 	rsbmi	r3, r5, #1
 8009ca4:	2300      	movpl	r3, #0
 8009ca6:	9305      	strmi	r3, [sp, #20]
 8009ca8:	f04f 0800 	movmi.w	r8, #0
 8009cac:	bf58      	it	pl
 8009cae:	9305      	strpl	r3, [sp, #20]
 8009cb0:	f1ba 0f00 	cmp.w	sl, #0
 8009cb4:	db3e      	blt.n	8009d34 <_dtoa_r+0x224>
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	44d0      	add	r8, sl
 8009cba:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009cbe:	9307      	str	r3, [sp, #28]
 8009cc0:	9b06      	ldr	r3, [sp, #24]
 8009cc2:	2b09      	cmp	r3, #9
 8009cc4:	f200 8090 	bhi.w	8009de8 <_dtoa_r+0x2d8>
 8009cc8:	2b05      	cmp	r3, #5
 8009cca:	bfc4      	itt	gt
 8009ccc:	3b04      	subgt	r3, #4
 8009cce:	9306      	strgt	r3, [sp, #24]
 8009cd0:	9b06      	ldr	r3, [sp, #24]
 8009cd2:	f1a3 0302 	sub.w	r3, r3, #2
 8009cd6:	bfcc      	ite	gt
 8009cd8:	2500      	movgt	r5, #0
 8009cda:	2501      	movle	r5, #1
 8009cdc:	2b03      	cmp	r3, #3
 8009cde:	f200 808f 	bhi.w	8009e00 <_dtoa_r+0x2f0>
 8009ce2:	e8df f003 	tbb	[pc, r3]
 8009ce6:	7f7d      	.short	0x7f7d
 8009ce8:	7131      	.short	0x7131
 8009cea:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009cee:	441d      	add	r5, r3
 8009cf0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009cf4:	2820      	cmp	r0, #32
 8009cf6:	dd13      	ble.n	8009d20 <_dtoa_r+0x210>
 8009cf8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009cfc:	9b00      	ldr	r3, [sp, #0]
 8009cfe:	fa08 f800 	lsl.w	r8, r8, r0
 8009d02:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009d06:	fa23 f000 	lsr.w	r0, r3, r0
 8009d0a:	ea48 0000 	orr.w	r0, r8, r0
 8009d0e:	f7f6 fbf9 	bl	8000504 <__aeabi_ui2d>
 8009d12:	2301      	movs	r3, #1
 8009d14:	4682      	mov	sl, r0
 8009d16:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009d1a:	3d01      	subs	r5, #1
 8009d1c:	9313      	str	r3, [sp, #76]	; 0x4c
 8009d1e:	e772      	b.n	8009c06 <_dtoa_r+0xf6>
 8009d20:	9b00      	ldr	r3, [sp, #0]
 8009d22:	f1c0 0020 	rsb	r0, r0, #32
 8009d26:	fa03 f000 	lsl.w	r0, r3, r0
 8009d2a:	e7f0      	b.n	8009d0e <_dtoa_r+0x1fe>
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e7b1      	b.n	8009c94 <_dtoa_r+0x184>
 8009d30:	900f      	str	r0, [sp, #60]	; 0x3c
 8009d32:	e7b0      	b.n	8009c96 <_dtoa_r+0x186>
 8009d34:	9b05      	ldr	r3, [sp, #20]
 8009d36:	eba3 030a 	sub.w	r3, r3, sl
 8009d3a:	9305      	str	r3, [sp, #20]
 8009d3c:	f1ca 0300 	rsb	r3, sl, #0
 8009d40:	9307      	str	r3, [sp, #28]
 8009d42:	2300      	movs	r3, #0
 8009d44:	930e      	str	r3, [sp, #56]	; 0x38
 8009d46:	e7bb      	b.n	8009cc0 <_dtoa_r+0x1b0>
 8009d48:	2301      	movs	r3, #1
 8009d4a:	930a      	str	r3, [sp, #40]	; 0x28
 8009d4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	dd59      	ble.n	8009e06 <_dtoa_r+0x2f6>
 8009d52:	9302      	str	r3, [sp, #8]
 8009d54:	4699      	mov	r9, r3
 8009d56:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009d58:	2200      	movs	r2, #0
 8009d5a:	6072      	str	r2, [r6, #4]
 8009d5c:	2204      	movs	r2, #4
 8009d5e:	f102 0014 	add.w	r0, r2, #20
 8009d62:	4298      	cmp	r0, r3
 8009d64:	6871      	ldr	r1, [r6, #4]
 8009d66:	d953      	bls.n	8009e10 <_dtoa_r+0x300>
 8009d68:	4620      	mov	r0, r4
 8009d6a:	f001 f8a7 	bl	800aebc <_Balloc>
 8009d6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d70:	6030      	str	r0, [r6, #0]
 8009d72:	f1b9 0f0e 	cmp.w	r9, #14
 8009d76:	f8d3 b000 	ldr.w	fp, [r3]
 8009d7a:	f200 80e6 	bhi.w	8009f4a <_dtoa_r+0x43a>
 8009d7e:	2d00      	cmp	r5, #0
 8009d80:	f000 80e3 	beq.w	8009f4a <_dtoa_r+0x43a>
 8009d84:	ed9d 7b00 	vldr	d7, [sp]
 8009d88:	f1ba 0f00 	cmp.w	sl, #0
 8009d8c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009d90:	dd74      	ble.n	8009e7c <_dtoa_r+0x36c>
 8009d92:	4a2a      	ldr	r2, [pc, #168]	; (8009e3c <_dtoa_r+0x32c>)
 8009d94:	f00a 030f 	and.w	r3, sl, #15
 8009d98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009d9c:	ed93 7b00 	vldr	d7, [r3]
 8009da0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009da4:	06f0      	lsls	r0, r6, #27
 8009da6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009daa:	d565      	bpl.n	8009e78 <_dtoa_r+0x368>
 8009dac:	4b24      	ldr	r3, [pc, #144]	; (8009e40 <_dtoa_r+0x330>)
 8009dae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009db2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009db6:	f7f6 fd49 	bl	800084c <__aeabi_ddiv>
 8009dba:	e9cd 0100 	strd	r0, r1, [sp]
 8009dbe:	f006 060f 	and.w	r6, r6, #15
 8009dc2:	2503      	movs	r5, #3
 8009dc4:	4f1e      	ldr	r7, [pc, #120]	; (8009e40 <_dtoa_r+0x330>)
 8009dc6:	e04c      	b.n	8009e62 <_dtoa_r+0x352>
 8009dc8:	2301      	movs	r3, #1
 8009dca:	930a      	str	r3, [sp, #40]	; 0x28
 8009dcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dce:	4453      	add	r3, sl
 8009dd0:	f103 0901 	add.w	r9, r3, #1
 8009dd4:	9302      	str	r3, [sp, #8]
 8009dd6:	464b      	mov	r3, r9
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	bfb8      	it	lt
 8009ddc:	2301      	movlt	r3, #1
 8009dde:	e7ba      	b.n	8009d56 <_dtoa_r+0x246>
 8009de0:	2300      	movs	r3, #0
 8009de2:	e7b2      	b.n	8009d4a <_dtoa_r+0x23a>
 8009de4:	2300      	movs	r3, #0
 8009de6:	e7f0      	b.n	8009dca <_dtoa_r+0x2ba>
 8009de8:	2501      	movs	r5, #1
 8009dea:	2300      	movs	r3, #0
 8009dec:	9306      	str	r3, [sp, #24]
 8009dee:	950a      	str	r5, [sp, #40]	; 0x28
 8009df0:	f04f 33ff 	mov.w	r3, #4294967295
 8009df4:	9302      	str	r3, [sp, #8]
 8009df6:	4699      	mov	r9, r3
 8009df8:	2200      	movs	r2, #0
 8009dfa:	2312      	movs	r3, #18
 8009dfc:	920b      	str	r2, [sp, #44]	; 0x2c
 8009dfe:	e7aa      	b.n	8009d56 <_dtoa_r+0x246>
 8009e00:	2301      	movs	r3, #1
 8009e02:	930a      	str	r3, [sp, #40]	; 0x28
 8009e04:	e7f4      	b.n	8009df0 <_dtoa_r+0x2e0>
 8009e06:	2301      	movs	r3, #1
 8009e08:	9302      	str	r3, [sp, #8]
 8009e0a:	4699      	mov	r9, r3
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	e7f5      	b.n	8009dfc <_dtoa_r+0x2ec>
 8009e10:	3101      	adds	r1, #1
 8009e12:	6071      	str	r1, [r6, #4]
 8009e14:	0052      	lsls	r2, r2, #1
 8009e16:	e7a2      	b.n	8009d5e <_dtoa_r+0x24e>
 8009e18:	636f4361 	.word	0x636f4361
 8009e1c:	3fd287a7 	.word	0x3fd287a7
 8009e20:	8b60c8b3 	.word	0x8b60c8b3
 8009e24:	3fc68a28 	.word	0x3fc68a28
 8009e28:	509f79fb 	.word	0x509f79fb
 8009e2c:	3fd34413 	.word	0x3fd34413
 8009e30:	7ff00000 	.word	0x7ff00000
 8009e34:	0800c421 	.word	0x0800c421
 8009e38:	3ff80000 	.word	0x3ff80000
 8009e3c:	0800c548 	.word	0x0800c548
 8009e40:	0800c520 	.word	0x0800c520
 8009e44:	0800c4a9 	.word	0x0800c4a9
 8009e48:	07f1      	lsls	r1, r6, #31
 8009e4a:	d508      	bpl.n	8009e5e <_dtoa_r+0x34e>
 8009e4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009e50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e54:	f7f6 fbd0 	bl	80005f8 <__aeabi_dmul>
 8009e58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009e5c:	3501      	adds	r5, #1
 8009e5e:	1076      	asrs	r6, r6, #1
 8009e60:	3708      	adds	r7, #8
 8009e62:	2e00      	cmp	r6, #0
 8009e64:	d1f0      	bne.n	8009e48 <_dtoa_r+0x338>
 8009e66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009e6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e6e:	f7f6 fced 	bl	800084c <__aeabi_ddiv>
 8009e72:	e9cd 0100 	strd	r0, r1, [sp]
 8009e76:	e01a      	b.n	8009eae <_dtoa_r+0x39e>
 8009e78:	2502      	movs	r5, #2
 8009e7a:	e7a3      	b.n	8009dc4 <_dtoa_r+0x2b4>
 8009e7c:	f000 80a0 	beq.w	8009fc0 <_dtoa_r+0x4b0>
 8009e80:	f1ca 0600 	rsb	r6, sl, #0
 8009e84:	4b9f      	ldr	r3, [pc, #636]	; (800a104 <_dtoa_r+0x5f4>)
 8009e86:	4fa0      	ldr	r7, [pc, #640]	; (800a108 <_dtoa_r+0x5f8>)
 8009e88:	f006 020f 	and.w	r2, r6, #15
 8009e8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e94:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009e98:	f7f6 fbae 	bl	80005f8 <__aeabi_dmul>
 8009e9c:	e9cd 0100 	strd	r0, r1, [sp]
 8009ea0:	1136      	asrs	r6, r6, #4
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	2502      	movs	r5, #2
 8009ea6:	2e00      	cmp	r6, #0
 8009ea8:	d17f      	bne.n	8009faa <_dtoa_r+0x49a>
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d1e1      	bne.n	8009e72 <_dtoa_r+0x362>
 8009eae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	f000 8087 	beq.w	8009fc4 <_dtoa_r+0x4b4>
 8009eb6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	4b93      	ldr	r3, [pc, #588]	; (800a10c <_dtoa_r+0x5fc>)
 8009ebe:	4630      	mov	r0, r6
 8009ec0:	4639      	mov	r1, r7
 8009ec2:	f7f6 fe0b 	bl	8000adc <__aeabi_dcmplt>
 8009ec6:	2800      	cmp	r0, #0
 8009ec8:	d07c      	beq.n	8009fc4 <_dtoa_r+0x4b4>
 8009eca:	f1b9 0f00 	cmp.w	r9, #0
 8009ece:	d079      	beq.n	8009fc4 <_dtoa_r+0x4b4>
 8009ed0:	9b02      	ldr	r3, [sp, #8]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	dd35      	ble.n	8009f42 <_dtoa_r+0x432>
 8009ed6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009eda:	9308      	str	r3, [sp, #32]
 8009edc:	4639      	mov	r1, r7
 8009ede:	2200      	movs	r2, #0
 8009ee0:	4b8b      	ldr	r3, [pc, #556]	; (800a110 <_dtoa_r+0x600>)
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	f7f6 fb88 	bl	80005f8 <__aeabi_dmul>
 8009ee8:	e9cd 0100 	strd	r0, r1, [sp]
 8009eec:	9f02      	ldr	r7, [sp, #8]
 8009eee:	3501      	adds	r5, #1
 8009ef0:	4628      	mov	r0, r5
 8009ef2:	f7f6 fb17 	bl	8000524 <__aeabi_i2d>
 8009ef6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009efa:	f7f6 fb7d 	bl	80005f8 <__aeabi_dmul>
 8009efe:	2200      	movs	r2, #0
 8009f00:	4b84      	ldr	r3, [pc, #528]	; (800a114 <_dtoa_r+0x604>)
 8009f02:	f7f6 f9c3 	bl	800028c <__adddf3>
 8009f06:	4605      	mov	r5, r0
 8009f08:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009f0c:	2f00      	cmp	r7, #0
 8009f0e:	d15d      	bne.n	8009fcc <_dtoa_r+0x4bc>
 8009f10:	2200      	movs	r2, #0
 8009f12:	4b81      	ldr	r3, [pc, #516]	; (800a118 <_dtoa_r+0x608>)
 8009f14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f18:	f7f6 f9b6 	bl	8000288 <__aeabi_dsub>
 8009f1c:	462a      	mov	r2, r5
 8009f1e:	4633      	mov	r3, r6
 8009f20:	e9cd 0100 	strd	r0, r1, [sp]
 8009f24:	f7f6 fdf8 	bl	8000b18 <__aeabi_dcmpgt>
 8009f28:	2800      	cmp	r0, #0
 8009f2a:	f040 8288 	bne.w	800a43e <_dtoa_r+0x92e>
 8009f2e:	462a      	mov	r2, r5
 8009f30:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009f34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f38:	f7f6 fdd0 	bl	8000adc <__aeabi_dcmplt>
 8009f3c:	2800      	cmp	r0, #0
 8009f3e:	f040 827c 	bne.w	800a43a <_dtoa_r+0x92a>
 8009f42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009f46:	e9cd 2300 	strd	r2, r3, [sp]
 8009f4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	f2c0 8150 	blt.w	800a1f2 <_dtoa_r+0x6e2>
 8009f52:	f1ba 0f0e 	cmp.w	sl, #14
 8009f56:	f300 814c 	bgt.w	800a1f2 <_dtoa_r+0x6e2>
 8009f5a:	4b6a      	ldr	r3, [pc, #424]	; (800a104 <_dtoa_r+0x5f4>)
 8009f5c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009f60:	ed93 7b00 	vldr	d7, [r3]
 8009f64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009f6c:	f280 80d8 	bge.w	800a120 <_dtoa_r+0x610>
 8009f70:	f1b9 0f00 	cmp.w	r9, #0
 8009f74:	f300 80d4 	bgt.w	800a120 <_dtoa_r+0x610>
 8009f78:	f040 825e 	bne.w	800a438 <_dtoa_r+0x928>
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	4b66      	ldr	r3, [pc, #408]	; (800a118 <_dtoa_r+0x608>)
 8009f80:	ec51 0b17 	vmov	r0, r1, d7
 8009f84:	f7f6 fb38 	bl	80005f8 <__aeabi_dmul>
 8009f88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f8c:	f7f6 fdba 	bl	8000b04 <__aeabi_dcmpge>
 8009f90:	464f      	mov	r7, r9
 8009f92:	464e      	mov	r6, r9
 8009f94:	2800      	cmp	r0, #0
 8009f96:	f040 8234 	bne.w	800a402 <_dtoa_r+0x8f2>
 8009f9a:	2331      	movs	r3, #49	; 0x31
 8009f9c:	f10b 0501 	add.w	r5, fp, #1
 8009fa0:	f88b 3000 	strb.w	r3, [fp]
 8009fa4:	f10a 0a01 	add.w	sl, sl, #1
 8009fa8:	e22f      	b.n	800a40a <_dtoa_r+0x8fa>
 8009faa:	07f2      	lsls	r2, r6, #31
 8009fac:	d505      	bpl.n	8009fba <_dtoa_r+0x4aa>
 8009fae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fb2:	f7f6 fb21 	bl	80005f8 <__aeabi_dmul>
 8009fb6:	3501      	adds	r5, #1
 8009fb8:	2301      	movs	r3, #1
 8009fba:	1076      	asrs	r6, r6, #1
 8009fbc:	3708      	adds	r7, #8
 8009fbe:	e772      	b.n	8009ea6 <_dtoa_r+0x396>
 8009fc0:	2502      	movs	r5, #2
 8009fc2:	e774      	b.n	8009eae <_dtoa_r+0x39e>
 8009fc4:	f8cd a020 	str.w	sl, [sp, #32]
 8009fc8:	464f      	mov	r7, r9
 8009fca:	e791      	b.n	8009ef0 <_dtoa_r+0x3e0>
 8009fcc:	4b4d      	ldr	r3, [pc, #308]	; (800a104 <_dtoa_r+0x5f4>)
 8009fce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009fd2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d047      	beq.n	800a06c <_dtoa_r+0x55c>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	460b      	mov	r3, r1
 8009fe0:	2000      	movs	r0, #0
 8009fe2:	494e      	ldr	r1, [pc, #312]	; (800a11c <_dtoa_r+0x60c>)
 8009fe4:	f7f6 fc32 	bl	800084c <__aeabi_ddiv>
 8009fe8:	462a      	mov	r2, r5
 8009fea:	4633      	mov	r3, r6
 8009fec:	f7f6 f94c 	bl	8000288 <__aeabi_dsub>
 8009ff0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009ff4:	465d      	mov	r5, fp
 8009ff6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ffa:	f7f6 fdad 	bl	8000b58 <__aeabi_d2iz>
 8009ffe:	4606      	mov	r6, r0
 800a000:	f7f6 fa90 	bl	8000524 <__aeabi_i2d>
 800a004:	4602      	mov	r2, r0
 800a006:	460b      	mov	r3, r1
 800a008:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a00c:	f7f6 f93c 	bl	8000288 <__aeabi_dsub>
 800a010:	3630      	adds	r6, #48	; 0x30
 800a012:	f805 6b01 	strb.w	r6, [r5], #1
 800a016:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a01a:	e9cd 0100 	strd	r0, r1, [sp]
 800a01e:	f7f6 fd5d 	bl	8000adc <__aeabi_dcmplt>
 800a022:	2800      	cmp	r0, #0
 800a024:	d163      	bne.n	800a0ee <_dtoa_r+0x5de>
 800a026:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a02a:	2000      	movs	r0, #0
 800a02c:	4937      	ldr	r1, [pc, #220]	; (800a10c <_dtoa_r+0x5fc>)
 800a02e:	f7f6 f92b 	bl	8000288 <__aeabi_dsub>
 800a032:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a036:	f7f6 fd51 	bl	8000adc <__aeabi_dcmplt>
 800a03a:	2800      	cmp	r0, #0
 800a03c:	f040 80b7 	bne.w	800a1ae <_dtoa_r+0x69e>
 800a040:	eba5 030b 	sub.w	r3, r5, fp
 800a044:	429f      	cmp	r7, r3
 800a046:	f77f af7c 	ble.w	8009f42 <_dtoa_r+0x432>
 800a04a:	2200      	movs	r2, #0
 800a04c:	4b30      	ldr	r3, [pc, #192]	; (800a110 <_dtoa_r+0x600>)
 800a04e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a052:	f7f6 fad1 	bl	80005f8 <__aeabi_dmul>
 800a056:	2200      	movs	r2, #0
 800a058:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a05c:	4b2c      	ldr	r3, [pc, #176]	; (800a110 <_dtoa_r+0x600>)
 800a05e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a062:	f7f6 fac9 	bl	80005f8 <__aeabi_dmul>
 800a066:	e9cd 0100 	strd	r0, r1, [sp]
 800a06a:	e7c4      	b.n	8009ff6 <_dtoa_r+0x4e6>
 800a06c:	462a      	mov	r2, r5
 800a06e:	4633      	mov	r3, r6
 800a070:	f7f6 fac2 	bl	80005f8 <__aeabi_dmul>
 800a074:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a078:	eb0b 0507 	add.w	r5, fp, r7
 800a07c:	465e      	mov	r6, fp
 800a07e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a082:	f7f6 fd69 	bl	8000b58 <__aeabi_d2iz>
 800a086:	4607      	mov	r7, r0
 800a088:	f7f6 fa4c 	bl	8000524 <__aeabi_i2d>
 800a08c:	3730      	adds	r7, #48	; 0x30
 800a08e:	4602      	mov	r2, r0
 800a090:	460b      	mov	r3, r1
 800a092:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a096:	f7f6 f8f7 	bl	8000288 <__aeabi_dsub>
 800a09a:	f806 7b01 	strb.w	r7, [r6], #1
 800a09e:	42ae      	cmp	r6, r5
 800a0a0:	e9cd 0100 	strd	r0, r1, [sp]
 800a0a4:	f04f 0200 	mov.w	r2, #0
 800a0a8:	d126      	bne.n	800a0f8 <_dtoa_r+0x5e8>
 800a0aa:	4b1c      	ldr	r3, [pc, #112]	; (800a11c <_dtoa_r+0x60c>)
 800a0ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a0b0:	f7f6 f8ec 	bl	800028c <__adddf3>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0bc:	f7f6 fd2c 	bl	8000b18 <__aeabi_dcmpgt>
 800a0c0:	2800      	cmp	r0, #0
 800a0c2:	d174      	bne.n	800a1ae <_dtoa_r+0x69e>
 800a0c4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a0c8:	2000      	movs	r0, #0
 800a0ca:	4914      	ldr	r1, [pc, #80]	; (800a11c <_dtoa_r+0x60c>)
 800a0cc:	f7f6 f8dc 	bl	8000288 <__aeabi_dsub>
 800a0d0:	4602      	mov	r2, r0
 800a0d2:	460b      	mov	r3, r1
 800a0d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0d8:	f7f6 fd00 	bl	8000adc <__aeabi_dcmplt>
 800a0dc:	2800      	cmp	r0, #0
 800a0de:	f43f af30 	beq.w	8009f42 <_dtoa_r+0x432>
 800a0e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a0e6:	2b30      	cmp	r3, #48	; 0x30
 800a0e8:	f105 32ff 	add.w	r2, r5, #4294967295
 800a0ec:	d002      	beq.n	800a0f4 <_dtoa_r+0x5e4>
 800a0ee:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a0f2:	e04a      	b.n	800a18a <_dtoa_r+0x67a>
 800a0f4:	4615      	mov	r5, r2
 800a0f6:	e7f4      	b.n	800a0e2 <_dtoa_r+0x5d2>
 800a0f8:	4b05      	ldr	r3, [pc, #20]	; (800a110 <_dtoa_r+0x600>)
 800a0fa:	f7f6 fa7d 	bl	80005f8 <__aeabi_dmul>
 800a0fe:	e9cd 0100 	strd	r0, r1, [sp]
 800a102:	e7bc      	b.n	800a07e <_dtoa_r+0x56e>
 800a104:	0800c548 	.word	0x0800c548
 800a108:	0800c520 	.word	0x0800c520
 800a10c:	3ff00000 	.word	0x3ff00000
 800a110:	40240000 	.word	0x40240000
 800a114:	401c0000 	.word	0x401c0000
 800a118:	40140000 	.word	0x40140000
 800a11c:	3fe00000 	.word	0x3fe00000
 800a120:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a124:	465d      	mov	r5, fp
 800a126:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a12a:	4630      	mov	r0, r6
 800a12c:	4639      	mov	r1, r7
 800a12e:	f7f6 fb8d 	bl	800084c <__aeabi_ddiv>
 800a132:	f7f6 fd11 	bl	8000b58 <__aeabi_d2iz>
 800a136:	4680      	mov	r8, r0
 800a138:	f7f6 f9f4 	bl	8000524 <__aeabi_i2d>
 800a13c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a140:	f7f6 fa5a 	bl	80005f8 <__aeabi_dmul>
 800a144:	4602      	mov	r2, r0
 800a146:	460b      	mov	r3, r1
 800a148:	4630      	mov	r0, r6
 800a14a:	4639      	mov	r1, r7
 800a14c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a150:	f7f6 f89a 	bl	8000288 <__aeabi_dsub>
 800a154:	f805 6b01 	strb.w	r6, [r5], #1
 800a158:	eba5 060b 	sub.w	r6, r5, fp
 800a15c:	45b1      	cmp	r9, r6
 800a15e:	4602      	mov	r2, r0
 800a160:	460b      	mov	r3, r1
 800a162:	d139      	bne.n	800a1d8 <_dtoa_r+0x6c8>
 800a164:	f7f6 f892 	bl	800028c <__adddf3>
 800a168:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a16c:	4606      	mov	r6, r0
 800a16e:	460f      	mov	r7, r1
 800a170:	f7f6 fcd2 	bl	8000b18 <__aeabi_dcmpgt>
 800a174:	b9c8      	cbnz	r0, 800a1aa <_dtoa_r+0x69a>
 800a176:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a17a:	4630      	mov	r0, r6
 800a17c:	4639      	mov	r1, r7
 800a17e:	f7f6 fca3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a182:	b110      	cbz	r0, 800a18a <_dtoa_r+0x67a>
 800a184:	f018 0f01 	tst.w	r8, #1
 800a188:	d10f      	bne.n	800a1aa <_dtoa_r+0x69a>
 800a18a:	9904      	ldr	r1, [sp, #16]
 800a18c:	4620      	mov	r0, r4
 800a18e:	f000 fec9 	bl	800af24 <_Bfree>
 800a192:	2300      	movs	r3, #0
 800a194:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a196:	702b      	strb	r3, [r5, #0]
 800a198:	f10a 0301 	add.w	r3, sl, #1
 800a19c:	6013      	str	r3, [r2, #0]
 800a19e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	f000 8241 	beq.w	800a628 <_dtoa_r+0xb18>
 800a1a6:	601d      	str	r5, [r3, #0]
 800a1a8:	e23e      	b.n	800a628 <_dtoa_r+0xb18>
 800a1aa:	f8cd a020 	str.w	sl, [sp, #32]
 800a1ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a1b2:	2a39      	cmp	r2, #57	; 0x39
 800a1b4:	f105 33ff 	add.w	r3, r5, #4294967295
 800a1b8:	d108      	bne.n	800a1cc <_dtoa_r+0x6bc>
 800a1ba:	459b      	cmp	fp, r3
 800a1bc:	d10a      	bne.n	800a1d4 <_dtoa_r+0x6c4>
 800a1be:	9b08      	ldr	r3, [sp, #32]
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	9308      	str	r3, [sp, #32]
 800a1c4:	2330      	movs	r3, #48	; 0x30
 800a1c6:	f88b 3000 	strb.w	r3, [fp]
 800a1ca:	465b      	mov	r3, fp
 800a1cc:	781a      	ldrb	r2, [r3, #0]
 800a1ce:	3201      	adds	r2, #1
 800a1d0:	701a      	strb	r2, [r3, #0]
 800a1d2:	e78c      	b.n	800a0ee <_dtoa_r+0x5de>
 800a1d4:	461d      	mov	r5, r3
 800a1d6:	e7ea      	b.n	800a1ae <_dtoa_r+0x69e>
 800a1d8:	2200      	movs	r2, #0
 800a1da:	4b9b      	ldr	r3, [pc, #620]	; (800a448 <_dtoa_r+0x938>)
 800a1dc:	f7f6 fa0c 	bl	80005f8 <__aeabi_dmul>
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	4606      	mov	r6, r0
 800a1e6:	460f      	mov	r7, r1
 800a1e8:	f7f6 fc6e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	d09a      	beq.n	800a126 <_dtoa_r+0x616>
 800a1f0:	e7cb      	b.n	800a18a <_dtoa_r+0x67a>
 800a1f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1f4:	2a00      	cmp	r2, #0
 800a1f6:	f000 808b 	beq.w	800a310 <_dtoa_r+0x800>
 800a1fa:	9a06      	ldr	r2, [sp, #24]
 800a1fc:	2a01      	cmp	r2, #1
 800a1fe:	dc6e      	bgt.n	800a2de <_dtoa_r+0x7ce>
 800a200:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a202:	2a00      	cmp	r2, #0
 800a204:	d067      	beq.n	800a2d6 <_dtoa_r+0x7c6>
 800a206:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a20a:	9f07      	ldr	r7, [sp, #28]
 800a20c:	9d05      	ldr	r5, [sp, #20]
 800a20e:	9a05      	ldr	r2, [sp, #20]
 800a210:	2101      	movs	r1, #1
 800a212:	441a      	add	r2, r3
 800a214:	4620      	mov	r0, r4
 800a216:	9205      	str	r2, [sp, #20]
 800a218:	4498      	add	r8, r3
 800a21a:	f000 ff61 	bl	800b0e0 <__i2b>
 800a21e:	4606      	mov	r6, r0
 800a220:	2d00      	cmp	r5, #0
 800a222:	dd0c      	ble.n	800a23e <_dtoa_r+0x72e>
 800a224:	f1b8 0f00 	cmp.w	r8, #0
 800a228:	dd09      	ble.n	800a23e <_dtoa_r+0x72e>
 800a22a:	4545      	cmp	r5, r8
 800a22c:	9a05      	ldr	r2, [sp, #20]
 800a22e:	462b      	mov	r3, r5
 800a230:	bfa8      	it	ge
 800a232:	4643      	movge	r3, r8
 800a234:	1ad2      	subs	r2, r2, r3
 800a236:	9205      	str	r2, [sp, #20]
 800a238:	1aed      	subs	r5, r5, r3
 800a23a:	eba8 0803 	sub.w	r8, r8, r3
 800a23e:	9b07      	ldr	r3, [sp, #28]
 800a240:	b1eb      	cbz	r3, 800a27e <_dtoa_r+0x76e>
 800a242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a244:	2b00      	cmp	r3, #0
 800a246:	d067      	beq.n	800a318 <_dtoa_r+0x808>
 800a248:	b18f      	cbz	r7, 800a26e <_dtoa_r+0x75e>
 800a24a:	4631      	mov	r1, r6
 800a24c:	463a      	mov	r2, r7
 800a24e:	4620      	mov	r0, r4
 800a250:	f000 ffe6 	bl	800b220 <__pow5mult>
 800a254:	9a04      	ldr	r2, [sp, #16]
 800a256:	4601      	mov	r1, r0
 800a258:	4606      	mov	r6, r0
 800a25a:	4620      	mov	r0, r4
 800a25c:	f000 ff49 	bl	800b0f2 <__multiply>
 800a260:	9904      	ldr	r1, [sp, #16]
 800a262:	9008      	str	r0, [sp, #32]
 800a264:	4620      	mov	r0, r4
 800a266:	f000 fe5d 	bl	800af24 <_Bfree>
 800a26a:	9b08      	ldr	r3, [sp, #32]
 800a26c:	9304      	str	r3, [sp, #16]
 800a26e:	9b07      	ldr	r3, [sp, #28]
 800a270:	1bda      	subs	r2, r3, r7
 800a272:	d004      	beq.n	800a27e <_dtoa_r+0x76e>
 800a274:	9904      	ldr	r1, [sp, #16]
 800a276:	4620      	mov	r0, r4
 800a278:	f000 ffd2 	bl	800b220 <__pow5mult>
 800a27c:	9004      	str	r0, [sp, #16]
 800a27e:	2101      	movs	r1, #1
 800a280:	4620      	mov	r0, r4
 800a282:	f000 ff2d 	bl	800b0e0 <__i2b>
 800a286:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a288:	4607      	mov	r7, r0
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	f000 81d0 	beq.w	800a630 <_dtoa_r+0xb20>
 800a290:	461a      	mov	r2, r3
 800a292:	4601      	mov	r1, r0
 800a294:	4620      	mov	r0, r4
 800a296:	f000 ffc3 	bl	800b220 <__pow5mult>
 800a29a:	9b06      	ldr	r3, [sp, #24]
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	4607      	mov	r7, r0
 800a2a0:	dc40      	bgt.n	800a324 <_dtoa_r+0x814>
 800a2a2:	9b00      	ldr	r3, [sp, #0]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d139      	bne.n	800a31c <_dtoa_r+0x80c>
 800a2a8:	9b01      	ldr	r3, [sp, #4]
 800a2aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d136      	bne.n	800a320 <_dtoa_r+0x810>
 800a2b2:	9b01      	ldr	r3, [sp, #4]
 800a2b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2b8:	0d1b      	lsrs	r3, r3, #20
 800a2ba:	051b      	lsls	r3, r3, #20
 800a2bc:	b12b      	cbz	r3, 800a2ca <_dtoa_r+0x7ba>
 800a2be:	9b05      	ldr	r3, [sp, #20]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	9305      	str	r3, [sp, #20]
 800a2c4:	f108 0801 	add.w	r8, r8, #1
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	9307      	str	r3, [sp, #28]
 800a2cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d12a      	bne.n	800a328 <_dtoa_r+0x818>
 800a2d2:	2001      	movs	r0, #1
 800a2d4:	e030      	b.n	800a338 <_dtoa_r+0x828>
 800a2d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a2d8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a2dc:	e795      	b.n	800a20a <_dtoa_r+0x6fa>
 800a2de:	9b07      	ldr	r3, [sp, #28]
 800a2e0:	f109 37ff 	add.w	r7, r9, #4294967295
 800a2e4:	42bb      	cmp	r3, r7
 800a2e6:	bfbf      	itttt	lt
 800a2e8:	9b07      	ldrlt	r3, [sp, #28]
 800a2ea:	9707      	strlt	r7, [sp, #28]
 800a2ec:	1afa      	sublt	r2, r7, r3
 800a2ee:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a2f0:	bfbb      	ittet	lt
 800a2f2:	189b      	addlt	r3, r3, r2
 800a2f4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a2f6:	1bdf      	subge	r7, r3, r7
 800a2f8:	2700      	movlt	r7, #0
 800a2fa:	f1b9 0f00 	cmp.w	r9, #0
 800a2fe:	bfb5      	itete	lt
 800a300:	9b05      	ldrlt	r3, [sp, #20]
 800a302:	9d05      	ldrge	r5, [sp, #20]
 800a304:	eba3 0509 	sublt.w	r5, r3, r9
 800a308:	464b      	movge	r3, r9
 800a30a:	bfb8      	it	lt
 800a30c:	2300      	movlt	r3, #0
 800a30e:	e77e      	b.n	800a20e <_dtoa_r+0x6fe>
 800a310:	9f07      	ldr	r7, [sp, #28]
 800a312:	9d05      	ldr	r5, [sp, #20]
 800a314:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a316:	e783      	b.n	800a220 <_dtoa_r+0x710>
 800a318:	9a07      	ldr	r2, [sp, #28]
 800a31a:	e7ab      	b.n	800a274 <_dtoa_r+0x764>
 800a31c:	2300      	movs	r3, #0
 800a31e:	e7d4      	b.n	800a2ca <_dtoa_r+0x7ba>
 800a320:	9b00      	ldr	r3, [sp, #0]
 800a322:	e7d2      	b.n	800a2ca <_dtoa_r+0x7ba>
 800a324:	2300      	movs	r3, #0
 800a326:	9307      	str	r3, [sp, #28]
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a32e:	6918      	ldr	r0, [r3, #16]
 800a330:	f000 fe88 	bl	800b044 <__hi0bits>
 800a334:	f1c0 0020 	rsb	r0, r0, #32
 800a338:	4440      	add	r0, r8
 800a33a:	f010 001f 	ands.w	r0, r0, #31
 800a33e:	d047      	beq.n	800a3d0 <_dtoa_r+0x8c0>
 800a340:	f1c0 0320 	rsb	r3, r0, #32
 800a344:	2b04      	cmp	r3, #4
 800a346:	dd3b      	ble.n	800a3c0 <_dtoa_r+0x8b0>
 800a348:	9b05      	ldr	r3, [sp, #20]
 800a34a:	f1c0 001c 	rsb	r0, r0, #28
 800a34e:	4403      	add	r3, r0
 800a350:	9305      	str	r3, [sp, #20]
 800a352:	4405      	add	r5, r0
 800a354:	4480      	add	r8, r0
 800a356:	9b05      	ldr	r3, [sp, #20]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	dd05      	ble.n	800a368 <_dtoa_r+0x858>
 800a35c:	461a      	mov	r2, r3
 800a35e:	9904      	ldr	r1, [sp, #16]
 800a360:	4620      	mov	r0, r4
 800a362:	f000 ffab 	bl	800b2bc <__lshift>
 800a366:	9004      	str	r0, [sp, #16]
 800a368:	f1b8 0f00 	cmp.w	r8, #0
 800a36c:	dd05      	ble.n	800a37a <_dtoa_r+0x86a>
 800a36e:	4639      	mov	r1, r7
 800a370:	4642      	mov	r2, r8
 800a372:	4620      	mov	r0, r4
 800a374:	f000 ffa2 	bl	800b2bc <__lshift>
 800a378:	4607      	mov	r7, r0
 800a37a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a37c:	b353      	cbz	r3, 800a3d4 <_dtoa_r+0x8c4>
 800a37e:	4639      	mov	r1, r7
 800a380:	9804      	ldr	r0, [sp, #16]
 800a382:	f000 ffef 	bl	800b364 <__mcmp>
 800a386:	2800      	cmp	r0, #0
 800a388:	da24      	bge.n	800a3d4 <_dtoa_r+0x8c4>
 800a38a:	2300      	movs	r3, #0
 800a38c:	220a      	movs	r2, #10
 800a38e:	9904      	ldr	r1, [sp, #16]
 800a390:	4620      	mov	r0, r4
 800a392:	f000 fdde 	bl	800af52 <__multadd>
 800a396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a398:	9004      	str	r0, [sp, #16]
 800a39a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	f000 814d 	beq.w	800a63e <_dtoa_r+0xb2e>
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	4631      	mov	r1, r6
 800a3a8:	220a      	movs	r2, #10
 800a3aa:	4620      	mov	r0, r4
 800a3ac:	f000 fdd1 	bl	800af52 <__multadd>
 800a3b0:	9b02      	ldr	r3, [sp, #8]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	4606      	mov	r6, r0
 800a3b6:	dc4f      	bgt.n	800a458 <_dtoa_r+0x948>
 800a3b8:	9b06      	ldr	r3, [sp, #24]
 800a3ba:	2b02      	cmp	r3, #2
 800a3bc:	dd4c      	ble.n	800a458 <_dtoa_r+0x948>
 800a3be:	e011      	b.n	800a3e4 <_dtoa_r+0x8d4>
 800a3c0:	d0c9      	beq.n	800a356 <_dtoa_r+0x846>
 800a3c2:	9a05      	ldr	r2, [sp, #20]
 800a3c4:	331c      	adds	r3, #28
 800a3c6:	441a      	add	r2, r3
 800a3c8:	9205      	str	r2, [sp, #20]
 800a3ca:	441d      	add	r5, r3
 800a3cc:	4498      	add	r8, r3
 800a3ce:	e7c2      	b.n	800a356 <_dtoa_r+0x846>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	e7f6      	b.n	800a3c2 <_dtoa_r+0x8b2>
 800a3d4:	f1b9 0f00 	cmp.w	r9, #0
 800a3d8:	dc38      	bgt.n	800a44c <_dtoa_r+0x93c>
 800a3da:	9b06      	ldr	r3, [sp, #24]
 800a3dc:	2b02      	cmp	r3, #2
 800a3de:	dd35      	ble.n	800a44c <_dtoa_r+0x93c>
 800a3e0:	f8cd 9008 	str.w	r9, [sp, #8]
 800a3e4:	9b02      	ldr	r3, [sp, #8]
 800a3e6:	b963      	cbnz	r3, 800a402 <_dtoa_r+0x8f2>
 800a3e8:	4639      	mov	r1, r7
 800a3ea:	2205      	movs	r2, #5
 800a3ec:	4620      	mov	r0, r4
 800a3ee:	f000 fdb0 	bl	800af52 <__multadd>
 800a3f2:	4601      	mov	r1, r0
 800a3f4:	4607      	mov	r7, r0
 800a3f6:	9804      	ldr	r0, [sp, #16]
 800a3f8:	f000 ffb4 	bl	800b364 <__mcmp>
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	f73f adcc 	bgt.w	8009f9a <_dtoa_r+0x48a>
 800a402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a404:	465d      	mov	r5, fp
 800a406:	ea6f 0a03 	mvn.w	sl, r3
 800a40a:	f04f 0900 	mov.w	r9, #0
 800a40e:	4639      	mov	r1, r7
 800a410:	4620      	mov	r0, r4
 800a412:	f000 fd87 	bl	800af24 <_Bfree>
 800a416:	2e00      	cmp	r6, #0
 800a418:	f43f aeb7 	beq.w	800a18a <_dtoa_r+0x67a>
 800a41c:	f1b9 0f00 	cmp.w	r9, #0
 800a420:	d005      	beq.n	800a42e <_dtoa_r+0x91e>
 800a422:	45b1      	cmp	r9, r6
 800a424:	d003      	beq.n	800a42e <_dtoa_r+0x91e>
 800a426:	4649      	mov	r1, r9
 800a428:	4620      	mov	r0, r4
 800a42a:	f000 fd7b 	bl	800af24 <_Bfree>
 800a42e:	4631      	mov	r1, r6
 800a430:	4620      	mov	r0, r4
 800a432:	f000 fd77 	bl	800af24 <_Bfree>
 800a436:	e6a8      	b.n	800a18a <_dtoa_r+0x67a>
 800a438:	2700      	movs	r7, #0
 800a43a:	463e      	mov	r6, r7
 800a43c:	e7e1      	b.n	800a402 <_dtoa_r+0x8f2>
 800a43e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a442:	463e      	mov	r6, r7
 800a444:	e5a9      	b.n	8009f9a <_dtoa_r+0x48a>
 800a446:	bf00      	nop
 800a448:	40240000 	.word	0x40240000
 800a44c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a44e:	f8cd 9008 	str.w	r9, [sp, #8]
 800a452:	2b00      	cmp	r3, #0
 800a454:	f000 80fa 	beq.w	800a64c <_dtoa_r+0xb3c>
 800a458:	2d00      	cmp	r5, #0
 800a45a:	dd05      	ble.n	800a468 <_dtoa_r+0x958>
 800a45c:	4631      	mov	r1, r6
 800a45e:	462a      	mov	r2, r5
 800a460:	4620      	mov	r0, r4
 800a462:	f000 ff2b 	bl	800b2bc <__lshift>
 800a466:	4606      	mov	r6, r0
 800a468:	9b07      	ldr	r3, [sp, #28]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d04c      	beq.n	800a508 <_dtoa_r+0x9f8>
 800a46e:	6871      	ldr	r1, [r6, #4]
 800a470:	4620      	mov	r0, r4
 800a472:	f000 fd23 	bl	800aebc <_Balloc>
 800a476:	6932      	ldr	r2, [r6, #16]
 800a478:	3202      	adds	r2, #2
 800a47a:	4605      	mov	r5, r0
 800a47c:	0092      	lsls	r2, r2, #2
 800a47e:	f106 010c 	add.w	r1, r6, #12
 800a482:	300c      	adds	r0, #12
 800a484:	f7fd fd76 	bl	8007f74 <memcpy>
 800a488:	2201      	movs	r2, #1
 800a48a:	4629      	mov	r1, r5
 800a48c:	4620      	mov	r0, r4
 800a48e:	f000 ff15 	bl	800b2bc <__lshift>
 800a492:	9b00      	ldr	r3, [sp, #0]
 800a494:	f8cd b014 	str.w	fp, [sp, #20]
 800a498:	f003 0301 	and.w	r3, r3, #1
 800a49c:	46b1      	mov	r9, r6
 800a49e:	9307      	str	r3, [sp, #28]
 800a4a0:	4606      	mov	r6, r0
 800a4a2:	4639      	mov	r1, r7
 800a4a4:	9804      	ldr	r0, [sp, #16]
 800a4a6:	f7ff faa5 	bl	80099f4 <quorem>
 800a4aa:	4649      	mov	r1, r9
 800a4ac:	4605      	mov	r5, r0
 800a4ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a4b2:	9804      	ldr	r0, [sp, #16]
 800a4b4:	f000 ff56 	bl	800b364 <__mcmp>
 800a4b8:	4632      	mov	r2, r6
 800a4ba:	9000      	str	r0, [sp, #0]
 800a4bc:	4639      	mov	r1, r7
 800a4be:	4620      	mov	r0, r4
 800a4c0:	f000 ff6a 	bl	800b398 <__mdiff>
 800a4c4:	68c3      	ldr	r3, [r0, #12]
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	bb03      	cbnz	r3, 800a50c <_dtoa_r+0x9fc>
 800a4ca:	4601      	mov	r1, r0
 800a4cc:	9008      	str	r0, [sp, #32]
 800a4ce:	9804      	ldr	r0, [sp, #16]
 800a4d0:	f000 ff48 	bl	800b364 <__mcmp>
 800a4d4:	9a08      	ldr	r2, [sp, #32]
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	4611      	mov	r1, r2
 800a4da:	4620      	mov	r0, r4
 800a4dc:	9308      	str	r3, [sp, #32]
 800a4de:	f000 fd21 	bl	800af24 <_Bfree>
 800a4e2:	9b08      	ldr	r3, [sp, #32]
 800a4e4:	b9a3      	cbnz	r3, 800a510 <_dtoa_r+0xa00>
 800a4e6:	9a06      	ldr	r2, [sp, #24]
 800a4e8:	b992      	cbnz	r2, 800a510 <_dtoa_r+0xa00>
 800a4ea:	9a07      	ldr	r2, [sp, #28]
 800a4ec:	b982      	cbnz	r2, 800a510 <_dtoa_r+0xa00>
 800a4ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a4f2:	d029      	beq.n	800a548 <_dtoa_r+0xa38>
 800a4f4:	9b00      	ldr	r3, [sp, #0]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	dd01      	ble.n	800a4fe <_dtoa_r+0x9ee>
 800a4fa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a4fe:	9b05      	ldr	r3, [sp, #20]
 800a500:	1c5d      	adds	r5, r3, #1
 800a502:	f883 8000 	strb.w	r8, [r3]
 800a506:	e782      	b.n	800a40e <_dtoa_r+0x8fe>
 800a508:	4630      	mov	r0, r6
 800a50a:	e7c2      	b.n	800a492 <_dtoa_r+0x982>
 800a50c:	2301      	movs	r3, #1
 800a50e:	e7e3      	b.n	800a4d8 <_dtoa_r+0x9c8>
 800a510:	9a00      	ldr	r2, [sp, #0]
 800a512:	2a00      	cmp	r2, #0
 800a514:	db04      	blt.n	800a520 <_dtoa_r+0xa10>
 800a516:	d125      	bne.n	800a564 <_dtoa_r+0xa54>
 800a518:	9a06      	ldr	r2, [sp, #24]
 800a51a:	bb1a      	cbnz	r2, 800a564 <_dtoa_r+0xa54>
 800a51c:	9a07      	ldr	r2, [sp, #28]
 800a51e:	bb0a      	cbnz	r2, 800a564 <_dtoa_r+0xa54>
 800a520:	2b00      	cmp	r3, #0
 800a522:	ddec      	ble.n	800a4fe <_dtoa_r+0x9ee>
 800a524:	2201      	movs	r2, #1
 800a526:	9904      	ldr	r1, [sp, #16]
 800a528:	4620      	mov	r0, r4
 800a52a:	f000 fec7 	bl	800b2bc <__lshift>
 800a52e:	4639      	mov	r1, r7
 800a530:	9004      	str	r0, [sp, #16]
 800a532:	f000 ff17 	bl	800b364 <__mcmp>
 800a536:	2800      	cmp	r0, #0
 800a538:	dc03      	bgt.n	800a542 <_dtoa_r+0xa32>
 800a53a:	d1e0      	bne.n	800a4fe <_dtoa_r+0x9ee>
 800a53c:	f018 0f01 	tst.w	r8, #1
 800a540:	d0dd      	beq.n	800a4fe <_dtoa_r+0x9ee>
 800a542:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a546:	d1d8      	bne.n	800a4fa <_dtoa_r+0x9ea>
 800a548:	9b05      	ldr	r3, [sp, #20]
 800a54a:	9a05      	ldr	r2, [sp, #20]
 800a54c:	1c5d      	adds	r5, r3, #1
 800a54e:	2339      	movs	r3, #57	; 0x39
 800a550:	7013      	strb	r3, [r2, #0]
 800a552:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a556:	2b39      	cmp	r3, #57	; 0x39
 800a558:	f105 32ff 	add.w	r2, r5, #4294967295
 800a55c:	d04f      	beq.n	800a5fe <_dtoa_r+0xaee>
 800a55e:	3301      	adds	r3, #1
 800a560:	7013      	strb	r3, [r2, #0]
 800a562:	e754      	b.n	800a40e <_dtoa_r+0x8fe>
 800a564:	9a05      	ldr	r2, [sp, #20]
 800a566:	2b00      	cmp	r3, #0
 800a568:	f102 0501 	add.w	r5, r2, #1
 800a56c:	dd06      	ble.n	800a57c <_dtoa_r+0xa6c>
 800a56e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a572:	d0e9      	beq.n	800a548 <_dtoa_r+0xa38>
 800a574:	f108 0801 	add.w	r8, r8, #1
 800a578:	9b05      	ldr	r3, [sp, #20]
 800a57a:	e7c2      	b.n	800a502 <_dtoa_r+0x9f2>
 800a57c:	9a02      	ldr	r2, [sp, #8]
 800a57e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a582:	eba5 030b 	sub.w	r3, r5, fp
 800a586:	4293      	cmp	r3, r2
 800a588:	d021      	beq.n	800a5ce <_dtoa_r+0xabe>
 800a58a:	2300      	movs	r3, #0
 800a58c:	220a      	movs	r2, #10
 800a58e:	9904      	ldr	r1, [sp, #16]
 800a590:	4620      	mov	r0, r4
 800a592:	f000 fcde 	bl	800af52 <__multadd>
 800a596:	45b1      	cmp	r9, r6
 800a598:	9004      	str	r0, [sp, #16]
 800a59a:	f04f 0300 	mov.w	r3, #0
 800a59e:	f04f 020a 	mov.w	r2, #10
 800a5a2:	4649      	mov	r1, r9
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	d105      	bne.n	800a5b4 <_dtoa_r+0xaa4>
 800a5a8:	f000 fcd3 	bl	800af52 <__multadd>
 800a5ac:	4681      	mov	r9, r0
 800a5ae:	4606      	mov	r6, r0
 800a5b0:	9505      	str	r5, [sp, #20]
 800a5b2:	e776      	b.n	800a4a2 <_dtoa_r+0x992>
 800a5b4:	f000 fccd 	bl	800af52 <__multadd>
 800a5b8:	4631      	mov	r1, r6
 800a5ba:	4681      	mov	r9, r0
 800a5bc:	2300      	movs	r3, #0
 800a5be:	220a      	movs	r2, #10
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	f000 fcc6 	bl	800af52 <__multadd>
 800a5c6:	4606      	mov	r6, r0
 800a5c8:	e7f2      	b.n	800a5b0 <_dtoa_r+0xaa0>
 800a5ca:	f04f 0900 	mov.w	r9, #0
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	9904      	ldr	r1, [sp, #16]
 800a5d2:	4620      	mov	r0, r4
 800a5d4:	f000 fe72 	bl	800b2bc <__lshift>
 800a5d8:	4639      	mov	r1, r7
 800a5da:	9004      	str	r0, [sp, #16]
 800a5dc:	f000 fec2 	bl	800b364 <__mcmp>
 800a5e0:	2800      	cmp	r0, #0
 800a5e2:	dcb6      	bgt.n	800a552 <_dtoa_r+0xa42>
 800a5e4:	d102      	bne.n	800a5ec <_dtoa_r+0xadc>
 800a5e6:	f018 0f01 	tst.w	r8, #1
 800a5ea:	d1b2      	bne.n	800a552 <_dtoa_r+0xa42>
 800a5ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a5f0:	2b30      	cmp	r3, #48	; 0x30
 800a5f2:	f105 32ff 	add.w	r2, r5, #4294967295
 800a5f6:	f47f af0a 	bne.w	800a40e <_dtoa_r+0x8fe>
 800a5fa:	4615      	mov	r5, r2
 800a5fc:	e7f6      	b.n	800a5ec <_dtoa_r+0xadc>
 800a5fe:	4593      	cmp	fp, r2
 800a600:	d105      	bne.n	800a60e <_dtoa_r+0xafe>
 800a602:	2331      	movs	r3, #49	; 0x31
 800a604:	f10a 0a01 	add.w	sl, sl, #1
 800a608:	f88b 3000 	strb.w	r3, [fp]
 800a60c:	e6ff      	b.n	800a40e <_dtoa_r+0x8fe>
 800a60e:	4615      	mov	r5, r2
 800a610:	e79f      	b.n	800a552 <_dtoa_r+0xa42>
 800a612:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a678 <_dtoa_r+0xb68>
 800a616:	e007      	b.n	800a628 <_dtoa_r+0xb18>
 800a618:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a61a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a67c <_dtoa_r+0xb6c>
 800a61e:	b11b      	cbz	r3, 800a628 <_dtoa_r+0xb18>
 800a620:	f10b 0308 	add.w	r3, fp, #8
 800a624:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a626:	6013      	str	r3, [r2, #0]
 800a628:	4658      	mov	r0, fp
 800a62a:	b017      	add	sp, #92	; 0x5c
 800a62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a630:	9b06      	ldr	r3, [sp, #24]
 800a632:	2b01      	cmp	r3, #1
 800a634:	f77f ae35 	ble.w	800a2a2 <_dtoa_r+0x792>
 800a638:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a63a:	9307      	str	r3, [sp, #28]
 800a63c:	e649      	b.n	800a2d2 <_dtoa_r+0x7c2>
 800a63e:	9b02      	ldr	r3, [sp, #8]
 800a640:	2b00      	cmp	r3, #0
 800a642:	dc03      	bgt.n	800a64c <_dtoa_r+0xb3c>
 800a644:	9b06      	ldr	r3, [sp, #24]
 800a646:	2b02      	cmp	r3, #2
 800a648:	f73f aecc 	bgt.w	800a3e4 <_dtoa_r+0x8d4>
 800a64c:	465d      	mov	r5, fp
 800a64e:	4639      	mov	r1, r7
 800a650:	9804      	ldr	r0, [sp, #16]
 800a652:	f7ff f9cf 	bl	80099f4 <quorem>
 800a656:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a65a:	f805 8b01 	strb.w	r8, [r5], #1
 800a65e:	9a02      	ldr	r2, [sp, #8]
 800a660:	eba5 030b 	sub.w	r3, r5, fp
 800a664:	429a      	cmp	r2, r3
 800a666:	ddb0      	ble.n	800a5ca <_dtoa_r+0xaba>
 800a668:	2300      	movs	r3, #0
 800a66a:	220a      	movs	r2, #10
 800a66c:	9904      	ldr	r1, [sp, #16]
 800a66e:	4620      	mov	r0, r4
 800a670:	f000 fc6f 	bl	800af52 <__multadd>
 800a674:	9004      	str	r0, [sp, #16]
 800a676:	e7ea      	b.n	800a64e <_dtoa_r+0xb3e>
 800a678:	0800c420 	.word	0x0800c420
 800a67c:	0800c4a0 	.word	0x0800c4a0

0800a680 <std>:
 800a680:	2300      	movs	r3, #0
 800a682:	b510      	push	{r4, lr}
 800a684:	4604      	mov	r4, r0
 800a686:	e9c0 3300 	strd	r3, r3, [r0]
 800a68a:	6083      	str	r3, [r0, #8]
 800a68c:	8181      	strh	r1, [r0, #12]
 800a68e:	6643      	str	r3, [r0, #100]	; 0x64
 800a690:	81c2      	strh	r2, [r0, #14]
 800a692:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a696:	6183      	str	r3, [r0, #24]
 800a698:	4619      	mov	r1, r3
 800a69a:	2208      	movs	r2, #8
 800a69c:	305c      	adds	r0, #92	; 0x5c
 800a69e:	f7fd fc74 	bl	8007f8a <memset>
 800a6a2:	4b05      	ldr	r3, [pc, #20]	; (800a6b8 <std+0x38>)
 800a6a4:	6263      	str	r3, [r4, #36]	; 0x24
 800a6a6:	4b05      	ldr	r3, [pc, #20]	; (800a6bc <std+0x3c>)
 800a6a8:	62a3      	str	r3, [r4, #40]	; 0x28
 800a6aa:	4b05      	ldr	r3, [pc, #20]	; (800a6c0 <std+0x40>)
 800a6ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a6ae:	4b05      	ldr	r3, [pc, #20]	; (800a6c4 <std+0x44>)
 800a6b0:	6224      	str	r4, [r4, #32]
 800a6b2:	6323      	str	r3, [r4, #48]	; 0x30
 800a6b4:	bd10      	pop	{r4, pc}
 800a6b6:	bf00      	nop
 800a6b8:	0800bd6d 	.word	0x0800bd6d
 800a6bc:	0800bd8f 	.word	0x0800bd8f
 800a6c0:	0800bdc7 	.word	0x0800bdc7
 800a6c4:	0800bdeb 	.word	0x0800bdeb

0800a6c8 <_cleanup_r>:
 800a6c8:	4901      	ldr	r1, [pc, #4]	; (800a6d0 <_cleanup_r+0x8>)
 800a6ca:	f000 b885 	b.w	800a7d8 <_fwalk_reent>
 800a6ce:	bf00      	nop
 800a6d0:	0800c105 	.word	0x0800c105

0800a6d4 <__sfmoreglue>:
 800a6d4:	b570      	push	{r4, r5, r6, lr}
 800a6d6:	1e4a      	subs	r2, r1, #1
 800a6d8:	2568      	movs	r5, #104	; 0x68
 800a6da:	4355      	muls	r5, r2
 800a6dc:	460e      	mov	r6, r1
 800a6de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a6e2:	f001 f847 	bl	800b774 <_malloc_r>
 800a6e6:	4604      	mov	r4, r0
 800a6e8:	b140      	cbz	r0, 800a6fc <__sfmoreglue+0x28>
 800a6ea:	2100      	movs	r1, #0
 800a6ec:	e9c0 1600 	strd	r1, r6, [r0]
 800a6f0:	300c      	adds	r0, #12
 800a6f2:	60a0      	str	r0, [r4, #8]
 800a6f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a6f8:	f7fd fc47 	bl	8007f8a <memset>
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	bd70      	pop	{r4, r5, r6, pc}

0800a700 <__sinit>:
 800a700:	6983      	ldr	r3, [r0, #24]
 800a702:	b510      	push	{r4, lr}
 800a704:	4604      	mov	r4, r0
 800a706:	bb33      	cbnz	r3, 800a756 <__sinit+0x56>
 800a708:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a70c:	6503      	str	r3, [r0, #80]	; 0x50
 800a70e:	4b12      	ldr	r3, [pc, #72]	; (800a758 <__sinit+0x58>)
 800a710:	4a12      	ldr	r2, [pc, #72]	; (800a75c <__sinit+0x5c>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	6282      	str	r2, [r0, #40]	; 0x28
 800a716:	4298      	cmp	r0, r3
 800a718:	bf04      	itt	eq
 800a71a:	2301      	moveq	r3, #1
 800a71c:	6183      	streq	r3, [r0, #24]
 800a71e:	f000 f81f 	bl	800a760 <__sfp>
 800a722:	6060      	str	r0, [r4, #4]
 800a724:	4620      	mov	r0, r4
 800a726:	f000 f81b 	bl	800a760 <__sfp>
 800a72a:	60a0      	str	r0, [r4, #8]
 800a72c:	4620      	mov	r0, r4
 800a72e:	f000 f817 	bl	800a760 <__sfp>
 800a732:	2200      	movs	r2, #0
 800a734:	60e0      	str	r0, [r4, #12]
 800a736:	2104      	movs	r1, #4
 800a738:	6860      	ldr	r0, [r4, #4]
 800a73a:	f7ff ffa1 	bl	800a680 <std>
 800a73e:	2201      	movs	r2, #1
 800a740:	2109      	movs	r1, #9
 800a742:	68a0      	ldr	r0, [r4, #8]
 800a744:	f7ff ff9c 	bl	800a680 <std>
 800a748:	2202      	movs	r2, #2
 800a74a:	2112      	movs	r1, #18
 800a74c:	68e0      	ldr	r0, [r4, #12]
 800a74e:	f7ff ff97 	bl	800a680 <std>
 800a752:	2301      	movs	r3, #1
 800a754:	61a3      	str	r3, [r4, #24]
 800a756:	bd10      	pop	{r4, pc}
 800a758:	0800c40c 	.word	0x0800c40c
 800a75c:	0800a6c9 	.word	0x0800a6c9

0800a760 <__sfp>:
 800a760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a762:	4b1b      	ldr	r3, [pc, #108]	; (800a7d0 <__sfp+0x70>)
 800a764:	681e      	ldr	r6, [r3, #0]
 800a766:	69b3      	ldr	r3, [r6, #24]
 800a768:	4607      	mov	r7, r0
 800a76a:	b913      	cbnz	r3, 800a772 <__sfp+0x12>
 800a76c:	4630      	mov	r0, r6
 800a76e:	f7ff ffc7 	bl	800a700 <__sinit>
 800a772:	3648      	adds	r6, #72	; 0x48
 800a774:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a778:	3b01      	subs	r3, #1
 800a77a:	d503      	bpl.n	800a784 <__sfp+0x24>
 800a77c:	6833      	ldr	r3, [r6, #0]
 800a77e:	b133      	cbz	r3, 800a78e <__sfp+0x2e>
 800a780:	6836      	ldr	r6, [r6, #0]
 800a782:	e7f7      	b.n	800a774 <__sfp+0x14>
 800a784:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a788:	b16d      	cbz	r5, 800a7a6 <__sfp+0x46>
 800a78a:	3468      	adds	r4, #104	; 0x68
 800a78c:	e7f4      	b.n	800a778 <__sfp+0x18>
 800a78e:	2104      	movs	r1, #4
 800a790:	4638      	mov	r0, r7
 800a792:	f7ff ff9f 	bl	800a6d4 <__sfmoreglue>
 800a796:	6030      	str	r0, [r6, #0]
 800a798:	2800      	cmp	r0, #0
 800a79a:	d1f1      	bne.n	800a780 <__sfp+0x20>
 800a79c:	230c      	movs	r3, #12
 800a79e:	603b      	str	r3, [r7, #0]
 800a7a0:	4604      	mov	r4, r0
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7a6:	4b0b      	ldr	r3, [pc, #44]	; (800a7d4 <__sfp+0x74>)
 800a7a8:	6665      	str	r5, [r4, #100]	; 0x64
 800a7aa:	e9c4 5500 	strd	r5, r5, [r4]
 800a7ae:	60a5      	str	r5, [r4, #8]
 800a7b0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a7b4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a7b8:	2208      	movs	r2, #8
 800a7ba:	4629      	mov	r1, r5
 800a7bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a7c0:	f7fd fbe3 	bl	8007f8a <memset>
 800a7c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a7c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a7cc:	e7e9      	b.n	800a7a2 <__sfp+0x42>
 800a7ce:	bf00      	nop
 800a7d0:	0800c40c 	.word	0x0800c40c
 800a7d4:	ffff0001 	.word	0xffff0001

0800a7d8 <_fwalk_reent>:
 800a7d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7dc:	4680      	mov	r8, r0
 800a7de:	4689      	mov	r9, r1
 800a7e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a7e4:	2600      	movs	r6, #0
 800a7e6:	b914      	cbnz	r4, 800a7ee <_fwalk_reent+0x16>
 800a7e8:	4630      	mov	r0, r6
 800a7ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7ee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a7f2:	3f01      	subs	r7, #1
 800a7f4:	d501      	bpl.n	800a7fa <_fwalk_reent+0x22>
 800a7f6:	6824      	ldr	r4, [r4, #0]
 800a7f8:	e7f5      	b.n	800a7e6 <_fwalk_reent+0xe>
 800a7fa:	89ab      	ldrh	r3, [r5, #12]
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d907      	bls.n	800a810 <_fwalk_reent+0x38>
 800a800:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a804:	3301      	adds	r3, #1
 800a806:	d003      	beq.n	800a810 <_fwalk_reent+0x38>
 800a808:	4629      	mov	r1, r5
 800a80a:	4640      	mov	r0, r8
 800a80c:	47c8      	blx	r9
 800a80e:	4306      	orrs	r6, r0
 800a810:	3568      	adds	r5, #104	; 0x68
 800a812:	e7ee      	b.n	800a7f2 <_fwalk_reent+0x1a>

0800a814 <rshift>:
 800a814:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a816:	6906      	ldr	r6, [r0, #16]
 800a818:	114b      	asrs	r3, r1, #5
 800a81a:	429e      	cmp	r6, r3
 800a81c:	f100 0414 	add.w	r4, r0, #20
 800a820:	dd30      	ble.n	800a884 <rshift+0x70>
 800a822:	f011 011f 	ands.w	r1, r1, #31
 800a826:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a82a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a82e:	d108      	bne.n	800a842 <rshift+0x2e>
 800a830:	4621      	mov	r1, r4
 800a832:	42b2      	cmp	r2, r6
 800a834:	460b      	mov	r3, r1
 800a836:	d211      	bcs.n	800a85c <rshift+0x48>
 800a838:	f852 3b04 	ldr.w	r3, [r2], #4
 800a83c:	f841 3b04 	str.w	r3, [r1], #4
 800a840:	e7f7      	b.n	800a832 <rshift+0x1e>
 800a842:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800a846:	f1c1 0c20 	rsb	ip, r1, #32
 800a84a:	40cd      	lsrs	r5, r1
 800a84c:	3204      	adds	r2, #4
 800a84e:	4623      	mov	r3, r4
 800a850:	42b2      	cmp	r2, r6
 800a852:	4617      	mov	r7, r2
 800a854:	d30c      	bcc.n	800a870 <rshift+0x5c>
 800a856:	601d      	str	r5, [r3, #0]
 800a858:	b105      	cbz	r5, 800a85c <rshift+0x48>
 800a85a:	3304      	adds	r3, #4
 800a85c:	1b1a      	subs	r2, r3, r4
 800a85e:	42a3      	cmp	r3, r4
 800a860:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a864:	bf08      	it	eq
 800a866:	2300      	moveq	r3, #0
 800a868:	6102      	str	r2, [r0, #16]
 800a86a:	bf08      	it	eq
 800a86c:	6143      	streq	r3, [r0, #20]
 800a86e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a870:	683f      	ldr	r7, [r7, #0]
 800a872:	fa07 f70c 	lsl.w	r7, r7, ip
 800a876:	433d      	orrs	r5, r7
 800a878:	f843 5b04 	str.w	r5, [r3], #4
 800a87c:	f852 5b04 	ldr.w	r5, [r2], #4
 800a880:	40cd      	lsrs	r5, r1
 800a882:	e7e5      	b.n	800a850 <rshift+0x3c>
 800a884:	4623      	mov	r3, r4
 800a886:	e7e9      	b.n	800a85c <rshift+0x48>

0800a888 <__hexdig_fun>:
 800a888:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a88c:	2b09      	cmp	r3, #9
 800a88e:	d802      	bhi.n	800a896 <__hexdig_fun+0xe>
 800a890:	3820      	subs	r0, #32
 800a892:	b2c0      	uxtb	r0, r0
 800a894:	4770      	bx	lr
 800a896:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a89a:	2b05      	cmp	r3, #5
 800a89c:	d801      	bhi.n	800a8a2 <__hexdig_fun+0x1a>
 800a89e:	3847      	subs	r0, #71	; 0x47
 800a8a0:	e7f7      	b.n	800a892 <__hexdig_fun+0xa>
 800a8a2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a8a6:	2b05      	cmp	r3, #5
 800a8a8:	d801      	bhi.n	800a8ae <__hexdig_fun+0x26>
 800a8aa:	3827      	subs	r0, #39	; 0x27
 800a8ac:	e7f1      	b.n	800a892 <__hexdig_fun+0xa>
 800a8ae:	2000      	movs	r0, #0
 800a8b0:	4770      	bx	lr

0800a8b2 <__gethex>:
 800a8b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8b6:	b08b      	sub	sp, #44	; 0x2c
 800a8b8:	468a      	mov	sl, r1
 800a8ba:	9002      	str	r0, [sp, #8]
 800a8bc:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a8be:	9306      	str	r3, [sp, #24]
 800a8c0:	4690      	mov	r8, r2
 800a8c2:	f000 fad0 	bl	800ae66 <__localeconv_l>
 800a8c6:	6803      	ldr	r3, [r0, #0]
 800a8c8:	9303      	str	r3, [sp, #12]
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f7f5 fc80 	bl	80001d0 <strlen>
 800a8d0:	9b03      	ldr	r3, [sp, #12]
 800a8d2:	9001      	str	r0, [sp, #4]
 800a8d4:	4403      	add	r3, r0
 800a8d6:	f04f 0b00 	mov.w	fp, #0
 800a8da:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a8de:	9307      	str	r3, [sp, #28]
 800a8e0:	f8da 3000 	ldr.w	r3, [sl]
 800a8e4:	3302      	adds	r3, #2
 800a8e6:	461f      	mov	r7, r3
 800a8e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a8ec:	2830      	cmp	r0, #48	; 0x30
 800a8ee:	d06c      	beq.n	800a9ca <__gethex+0x118>
 800a8f0:	f7ff ffca 	bl	800a888 <__hexdig_fun>
 800a8f4:	4604      	mov	r4, r0
 800a8f6:	2800      	cmp	r0, #0
 800a8f8:	d16a      	bne.n	800a9d0 <__gethex+0x11e>
 800a8fa:	9a01      	ldr	r2, [sp, #4]
 800a8fc:	9903      	ldr	r1, [sp, #12]
 800a8fe:	4638      	mov	r0, r7
 800a900:	f001 fa77 	bl	800bdf2 <strncmp>
 800a904:	2800      	cmp	r0, #0
 800a906:	d166      	bne.n	800a9d6 <__gethex+0x124>
 800a908:	9b01      	ldr	r3, [sp, #4]
 800a90a:	5cf8      	ldrb	r0, [r7, r3]
 800a90c:	18fe      	adds	r6, r7, r3
 800a90e:	f7ff ffbb 	bl	800a888 <__hexdig_fun>
 800a912:	2800      	cmp	r0, #0
 800a914:	d062      	beq.n	800a9dc <__gethex+0x12a>
 800a916:	4633      	mov	r3, r6
 800a918:	7818      	ldrb	r0, [r3, #0]
 800a91a:	2830      	cmp	r0, #48	; 0x30
 800a91c:	461f      	mov	r7, r3
 800a91e:	f103 0301 	add.w	r3, r3, #1
 800a922:	d0f9      	beq.n	800a918 <__gethex+0x66>
 800a924:	f7ff ffb0 	bl	800a888 <__hexdig_fun>
 800a928:	fab0 f580 	clz	r5, r0
 800a92c:	096d      	lsrs	r5, r5, #5
 800a92e:	4634      	mov	r4, r6
 800a930:	f04f 0b01 	mov.w	fp, #1
 800a934:	463a      	mov	r2, r7
 800a936:	4616      	mov	r6, r2
 800a938:	3201      	adds	r2, #1
 800a93a:	7830      	ldrb	r0, [r6, #0]
 800a93c:	f7ff ffa4 	bl	800a888 <__hexdig_fun>
 800a940:	2800      	cmp	r0, #0
 800a942:	d1f8      	bne.n	800a936 <__gethex+0x84>
 800a944:	9a01      	ldr	r2, [sp, #4]
 800a946:	9903      	ldr	r1, [sp, #12]
 800a948:	4630      	mov	r0, r6
 800a94a:	f001 fa52 	bl	800bdf2 <strncmp>
 800a94e:	b950      	cbnz	r0, 800a966 <__gethex+0xb4>
 800a950:	b954      	cbnz	r4, 800a968 <__gethex+0xb6>
 800a952:	9b01      	ldr	r3, [sp, #4]
 800a954:	18f4      	adds	r4, r6, r3
 800a956:	4622      	mov	r2, r4
 800a958:	4616      	mov	r6, r2
 800a95a:	3201      	adds	r2, #1
 800a95c:	7830      	ldrb	r0, [r6, #0]
 800a95e:	f7ff ff93 	bl	800a888 <__hexdig_fun>
 800a962:	2800      	cmp	r0, #0
 800a964:	d1f8      	bne.n	800a958 <__gethex+0xa6>
 800a966:	b10c      	cbz	r4, 800a96c <__gethex+0xba>
 800a968:	1ba4      	subs	r4, r4, r6
 800a96a:	00a4      	lsls	r4, r4, #2
 800a96c:	7833      	ldrb	r3, [r6, #0]
 800a96e:	2b50      	cmp	r3, #80	; 0x50
 800a970:	d001      	beq.n	800a976 <__gethex+0xc4>
 800a972:	2b70      	cmp	r3, #112	; 0x70
 800a974:	d140      	bne.n	800a9f8 <__gethex+0x146>
 800a976:	7873      	ldrb	r3, [r6, #1]
 800a978:	2b2b      	cmp	r3, #43	; 0x2b
 800a97a:	d031      	beq.n	800a9e0 <__gethex+0x12e>
 800a97c:	2b2d      	cmp	r3, #45	; 0x2d
 800a97e:	d033      	beq.n	800a9e8 <__gethex+0x136>
 800a980:	1c71      	adds	r1, r6, #1
 800a982:	f04f 0900 	mov.w	r9, #0
 800a986:	7808      	ldrb	r0, [r1, #0]
 800a988:	f7ff ff7e 	bl	800a888 <__hexdig_fun>
 800a98c:	1e43      	subs	r3, r0, #1
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	2b18      	cmp	r3, #24
 800a992:	d831      	bhi.n	800a9f8 <__gethex+0x146>
 800a994:	f1a0 0210 	sub.w	r2, r0, #16
 800a998:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a99c:	f7ff ff74 	bl	800a888 <__hexdig_fun>
 800a9a0:	1e43      	subs	r3, r0, #1
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	2b18      	cmp	r3, #24
 800a9a6:	d922      	bls.n	800a9ee <__gethex+0x13c>
 800a9a8:	f1b9 0f00 	cmp.w	r9, #0
 800a9ac:	d000      	beq.n	800a9b0 <__gethex+0xfe>
 800a9ae:	4252      	negs	r2, r2
 800a9b0:	4414      	add	r4, r2
 800a9b2:	f8ca 1000 	str.w	r1, [sl]
 800a9b6:	b30d      	cbz	r5, 800a9fc <__gethex+0x14a>
 800a9b8:	f1bb 0f00 	cmp.w	fp, #0
 800a9bc:	bf0c      	ite	eq
 800a9be:	2706      	moveq	r7, #6
 800a9c0:	2700      	movne	r7, #0
 800a9c2:	4638      	mov	r0, r7
 800a9c4:	b00b      	add	sp, #44	; 0x2c
 800a9c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ca:	f10b 0b01 	add.w	fp, fp, #1
 800a9ce:	e78a      	b.n	800a8e6 <__gethex+0x34>
 800a9d0:	2500      	movs	r5, #0
 800a9d2:	462c      	mov	r4, r5
 800a9d4:	e7ae      	b.n	800a934 <__gethex+0x82>
 800a9d6:	463e      	mov	r6, r7
 800a9d8:	2501      	movs	r5, #1
 800a9da:	e7c7      	b.n	800a96c <__gethex+0xba>
 800a9dc:	4604      	mov	r4, r0
 800a9de:	e7fb      	b.n	800a9d8 <__gethex+0x126>
 800a9e0:	f04f 0900 	mov.w	r9, #0
 800a9e4:	1cb1      	adds	r1, r6, #2
 800a9e6:	e7ce      	b.n	800a986 <__gethex+0xd4>
 800a9e8:	f04f 0901 	mov.w	r9, #1
 800a9ec:	e7fa      	b.n	800a9e4 <__gethex+0x132>
 800a9ee:	230a      	movs	r3, #10
 800a9f0:	fb03 0202 	mla	r2, r3, r2, r0
 800a9f4:	3a10      	subs	r2, #16
 800a9f6:	e7cf      	b.n	800a998 <__gethex+0xe6>
 800a9f8:	4631      	mov	r1, r6
 800a9fa:	e7da      	b.n	800a9b2 <__gethex+0x100>
 800a9fc:	1bf3      	subs	r3, r6, r7
 800a9fe:	3b01      	subs	r3, #1
 800aa00:	4629      	mov	r1, r5
 800aa02:	2b07      	cmp	r3, #7
 800aa04:	dc49      	bgt.n	800aa9a <__gethex+0x1e8>
 800aa06:	9802      	ldr	r0, [sp, #8]
 800aa08:	f000 fa58 	bl	800aebc <_Balloc>
 800aa0c:	9b01      	ldr	r3, [sp, #4]
 800aa0e:	f100 0914 	add.w	r9, r0, #20
 800aa12:	f04f 0b00 	mov.w	fp, #0
 800aa16:	f1c3 0301 	rsb	r3, r3, #1
 800aa1a:	4605      	mov	r5, r0
 800aa1c:	f8cd 9010 	str.w	r9, [sp, #16]
 800aa20:	46da      	mov	sl, fp
 800aa22:	9308      	str	r3, [sp, #32]
 800aa24:	42b7      	cmp	r7, r6
 800aa26:	d33b      	bcc.n	800aaa0 <__gethex+0x1ee>
 800aa28:	9804      	ldr	r0, [sp, #16]
 800aa2a:	f840 ab04 	str.w	sl, [r0], #4
 800aa2e:	eba0 0009 	sub.w	r0, r0, r9
 800aa32:	1080      	asrs	r0, r0, #2
 800aa34:	6128      	str	r0, [r5, #16]
 800aa36:	0147      	lsls	r7, r0, #5
 800aa38:	4650      	mov	r0, sl
 800aa3a:	f000 fb03 	bl	800b044 <__hi0bits>
 800aa3e:	f8d8 6000 	ldr.w	r6, [r8]
 800aa42:	1a3f      	subs	r7, r7, r0
 800aa44:	42b7      	cmp	r7, r6
 800aa46:	dd64      	ble.n	800ab12 <__gethex+0x260>
 800aa48:	1bbf      	subs	r7, r7, r6
 800aa4a:	4639      	mov	r1, r7
 800aa4c:	4628      	mov	r0, r5
 800aa4e:	f000 fe13 	bl	800b678 <__any_on>
 800aa52:	4682      	mov	sl, r0
 800aa54:	b178      	cbz	r0, 800aa76 <__gethex+0x1c4>
 800aa56:	1e7b      	subs	r3, r7, #1
 800aa58:	1159      	asrs	r1, r3, #5
 800aa5a:	f003 021f 	and.w	r2, r3, #31
 800aa5e:	f04f 0a01 	mov.w	sl, #1
 800aa62:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800aa66:	fa0a f202 	lsl.w	r2, sl, r2
 800aa6a:	420a      	tst	r2, r1
 800aa6c:	d003      	beq.n	800aa76 <__gethex+0x1c4>
 800aa6e:	4553      	cmp	r3, sl
 800aa70:	dc46      	bgt.n	800ab00 <__gethex+0x24e>
 800aa72:	f04f 0a02 	mov.w	sl, #2
 800aa76:	4639      	mov	r1, r7
 800aa78:	4628      	mov	r0, r5
 800aa7a:	f7ff fecb 	bl	800a814 <rshift>
 800aa7e:	443c      	add	r4, r7
 800aa80:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa84:	42a3      	cmp	r3, r4
 800aa86:	da52      	bge.n	800ab2e <__gethex+0x27c>
 800aa88:	4629      	mov	r1, r5
 800aa8a:	9802      	ldr	r0, [sp, #8]
 800aa8c:	f000 fa4a 	bl	800af24 <_Bfree>
 800aa90:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aa92:	2300      	movs	r3, #0
 800aa94:	6013      	str	r3, [r2, #0]
 800aa96:	27a3      	movs	r7, #163	; 0xa3
 800aa98:	e793      	b.n	800a9c2 <__gethex+0x110>
 800aa9a:	3101      	adds	r1, #1
 800aa9c:	105b      	asrs	r3, r3, #1
 800aa9e:	e7b0      	b.n	800aa02 <__gethex+0x150>
 800aaa0:	1e73      	subs	r3, r6, #1
 800aaa2:	9305      	str	r3, [sp, #20]
 800aaa4:	9a07      	ldr	r2, [sp, #28]
 800aaa6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d018      	beq.n	800aae0 <__gethex+0x22e>
 800aaae:	f1bb 0f20 	cmp.w	fp, #32
 800aab2:	d107      	bne.n	800aac4 <__gethex+0x212>
 800aab4:	9b04      	ldr	r3, [sp, #16]
 800aab6:	f8c3 a000 	str.w	sl, [r3]
 800aaba:	3304      	adds	r3, #4
 800aabc:	f04f 0a00 	mov.w	sl, #0
 800aac0:	9304      	str	r3, [sp, #16]
 800aac2:	46d3      	mov	fp, sl
 800aac4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800aac8:	f7ff fede 	bl	800a888 <__hexdig_fun>
 800aacc:	f000 000f 	and.w	r0, r0, #15
 800aad0:	fa00 f00b 	lsl.w	r0, r0, fp
 800aad4:	ea4a 0a00 	orr.w	sl, sl, r0
 800aad8:	f10b 0b04 	add.w	fp, fp, #4
 800aadc:	9b05      	ldr	r3, [sp, #20]
 800aade:	e00d      	b.n	800aafc <__gethex+0x24a>
 800aae0:	9b05      	ldr	r3, [sp, #20]
 800aae2:	9a08      	ldr	r2, [sp, #32]
 800aae4:	4413      	add	r3, r2
 800aae6:	42bb      	cmp	r3, r7
 800aae8:	d3e1      	bcc.n	800aaae <__gethex+0x1fc>
 800aaea:	4618      	mov	r0, r3
 800aaec:	9a01      	ldr	r2, [sp, #4]
 800aaee:	9903      	ldr	r1, [sp, #12]
 800aaf0:	9309      	str	r3, [sp, #36]	; 0x24
 800aaf2:	f001 f97e 	bl	800bdf2 <strncmp>
 800aaf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaf8:	2800      	cmp	r0, #0
 800aafa:	d1d8      	bne.n	800aaae <__gethex+0x1fc>
 800aafc:	461e      	mov	r6, r3
 800aafe:	e791      	b.n	800aa24 <__gethex+0x172>
 800ab00:	1eb9      	subs	r1, r7, #2
 800ab02:	4628      	mov	r0, r5
 800ab04:	f000 fdb8 	bl	800b678 <__any_on>
 800ab08:	2800      	cmp	r0, #0
 800ab0a:	d0b2      	beq.n	800aa72 <__gethex+0x1c0>
 800ab0c:	f04f 0a03 	mov.w	sl, #3
 800ab10:	e7b1      	b.n	800aa76 <__gethex+0x1c4>
 800ab12:	da09      	bge.n	800ab28 <__gethex+0x276>
 800ab14:	1bf7      	subs	r7, r6, r7
 800ab16:	4629      	mov	r1, r5
 800ab18:	463a      	mov	r2, r7
 800ab1a:	9802      	ldr	r0, [sp, #8]
 800ab1c:	f000 fbce 	bl	800b2bc <__lshift>
 800ab20:	1be4      	subs	r4, r4, r7
 800ab22:	4605      	mov	r5, r0
 800ab24:	f100 0914 	add.w	r9, r0, #20
 800ab28:	f04f 0a00 	mov.w	sl, #0
 800ab2c:	e7a8      	b.n	800aa80 <__gethex+0x1ce>
 800ab2e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ab32:	42a0      	cmp	r0, r4
 800ab34:	dd6a      	ble.n	800ac0c <__gethex+0x35a>
 800ab36:	1b04      	subs	r4, r0, r4
 800ab38:	42a6      	cmp	r6, r4
 800ab3a:	dc2e      	bgt.n	800ab9a <__gethex+0x2e8>
 800ab3c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ab40:	2b02      	cmp	r3, #2
 800ab42:	d022      	beq.n	800ab8a <__gethex+0x2d8>
 800ab44:	2b03      	cmp	r3, #3
 800ab46:	d024      	beq.n	800ab92 <__gethex+0x2e0>
 800ab48:	2b01      	cmp	r3, #1
 800ab4a:	d115      	bne.n	800ab78 <__gethex+0x2c6>
 800ab4c:	42a6      	cmp	r6, r4
 800ab4e:	d113      	bne.n	800ab78 <__gethex+0x2c6>
 800ab50:	2e01      	cmp	r6, #1
 800ab52:	dc0b      	bgt.n	800ab6c <__gethex+0x2ba>
 800ab54:	9a06      	ldr	r2, [sp, #24]
 800ab56:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ab5a:	6013      	str	r3, [r2, #0]
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	612b      	str	r3, [r5, #16]
 800ab60:	f8c9 3000 	str.w	r3, [r9]
 800ab64:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab66:	2762      	movs	r7, #98	; 0x62
 800ab68:	601d      	str	r5, [r3, #0]
 800ab6a:	e72a      	b.n	800a9c2 <__gethex+0x110>
 800ab6c:	1e71      	subs	r1, r6, #1
 800ab6e:	4628      	mov	r0, r5
 800ab70:	f000 fd82 	bl	800b678 <__any_on>
 800ab74:	2800      	cmp	r0, #0
 800ab76:	d1ed      	bne.n	800ab54 <__gethex+0x2a2>
 800ab78:	4629      	mov	r1, r5
 800ab7a:	9802      	ldr	r0, [sp, #8]
 800ab7c:	f000 f9d2 	bl	800af24 <_Bfree>
 800ab80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ab82:	2300      	movs	r3, #0
 800ab84:	6013      	str	r3, [r2, #0]
 800ab86:	2750      	movs	r7, #80	; 0x50
 800ab88:	e71b      	b.n	800a9c2 <__gethex+0x110>
 800ab8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d0e1      	beq.n	800ab54 <__gethex+0x2a2>
 800ab90:	e7f2      	b.n	800ab78 <__gethex+0x2c6>
 800ab92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d1dd      	bne.n	800ab54 <__gethex+0x2a2>
 800ab98:	e7ee      	b.n	800ab78 <__gethex+0x2c6>
 800ab9a:	1e67      	subs	r7, r4, #1
 800ab9c:	f1ba 0f00 	cmp.w	sl, #0
 800aba0:	d131      	bne.n	800ac06 <__gethex+0x354>
 800aba2:	b127      	cbz	r7, 800abae <__gethex+0x2fc>
 800aba4:	4639      	mov	r1, r7
 800aba6:	4628      	mov	r0, r5
 800aba8:	f000 fd66 	bl	800b678 <__any_on>
 800abac:	4682      	mov	sl, r0
 800abae:	117a      	asrs	r2, r7, #5
 800abb0:	2301      	movs	r3, #1
 800abb2:	f007 071f 	and.w	r7, r7, #31
 800abb6:	fa03 f707 	lsl.w	r7, r3, r7
 800abba:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800abbe:	4621      	mov	r1, r4
 800abc0:	421f      	tst	r7, r3
 800abc2:	4628      	mov	r0, r5
 800abc4:	bf18      	it	ne
 800abc6:	f04a 0a02 	orrne.w	sl, sl, #2
 800abca:	1b36      	subs	r6, r6, r4
 800abcc:	f7ff fe22 	bl	800a814 <rshift>
 800abd0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800abd4:	2702      	movs	r7, #2
 800abd6:	f1ba 0f00 	cmp.w	sl, #0
 800abda:	d048      	beq.n	800ac6e <__gethex+0x3bc>
 800abdc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800abe0:	2b02      	cmp	r3, #2
 800abe2:	d015      	beq.n	800ac10 <__gethex+0x35e>
 800abe4:	2b03      	cmp	r3, #3
 800abe6:	d017      	beq.n	800ac18 <__gethex+0x366>
 800abe8:	2b01      	cmp	r3, #1
 800abea:	d109      	bne.n	800ac00 <__gethex+0x34e>
 800abec:	f01a 0f02 	tst.w	sl, #2
 800abf0:	d006      	beq.n	800ac00 <__gethex+0x34e>
 800abf2:	f8d9 3000 	ldr.w	r3, [r9]
 800abf6:	ea4a 0a03 	orr.w	sl, sl, r3
 800abfa:	f01a 0f01 	tst.w	sl, #1
 800abfe:	d10e      	bne.n	800ac1e <__gethex+0x36c>
 800ac00:	f047 0710 	orr.w	r7, r7, #16
 800ac04:	e033      	b.n	800ac6e <__gethex+0x3bc>
 800ac06:	f04f 0a01 	mov.w	sl, #1
 800ac0a:	e7d0      	b.n	800abae <__gethex+0x2fc>
 800ac0c:	2701      	movs	r7, #1
 800ac0e:	e7e2      	b.n	800abd6 <__gethex+0x324>
 800ac10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac12:	f1c3 0301 	rsb	r3, r3, #1
 800ac16:	9315      	str	r3, [sp, #84]	; 0x54
 800ac18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d0f0      	beq.n	800ac00 <__gethex+0x34e>
 800ac1e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800ac22:	f105 0314 	add.w	r3, r5, #20
 800ac26:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800ac2a:	eb03 010a 	add.w	r1, r3, sl
 800ac2e:	f04f 0c00 	mov.w	ip, #0
 800ac32:	4618      	mov	r0, r3
 800ac34:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac38:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ac3c:	d01c      	beq.n	800ac78 <__gethex+0x3c6>
 800ac3e:	3201      	adds	r2, #1
 800ac40:	6002      	str	r2, [r0, #0]
 800ac42:	2f02      	cmp	r7, #2
 800ac44:	f105 0314 	add.w	r3, r5, #20
 800ac48:	d138      	bne.n	800acbc <__gethex+0x40a>
 800ac4a:	f8d8 2000 	ldr.w	r2, [r8]
 800ac4e:	3a01      	subs	r2, #1
 800ac50:	42b2      	cmp	r2, r6
 800ac52:	d10a      	bne.n	800ac6a <__gethex+0x3b8>
 800ac54:	1171      	asrs	r1, r6, #5
 800ac56:	2201      	movs	r2, #1
 800ac58:	f006 061f 	and.w	r6, r6, #31
 800ac5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ac60:	fa02 f606 	lsl.w	r6, r2, r6
 800ac64:	421e      	tst	r6, r3
 800ac66:	bf18      	it	ne
 800ac68:	4617      	movne	r7, r2
 800ac6a:	f047 0720 	orr.w	r7, r7, #32
 800ac6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac70:	601d      	str	r5, [r3, #0]
 800ac72:	9b06      	ldr	r3, [sp, #24]
 800ac74:	601c      	str	r4, [r3, #0]
 800ac76:	e6a4      	b.n	800a9c2 <__gethex+0x110>
 800ac78:	4299      	cmp	r1, r3
 800ac7a:	f843 cc04 	str.w	ip, [r3, #-4]
 800ac7e:	d8d8      	bhi.n	800ac32 <__gethex+0x380>
 800ac80:	68ab      	ldr	r3, [r5, #8]
 800ac82:	4599      	cmp	r9, r3
 800ac84:	db12      	blt.n	800acac <__gethex+0x3fa>
 800ac86:	6869      	ldr	r1, [r5, #4]
 800ac88:	9802      	ldr	r0, [sp, #8]
 800ac8a:	3101      	adds	r1, #1
 800ac8c:	f000 f916 	bl	800aebc <_Balloc>
 800ac90:	692a      	ldr	r2, [r5, #16]
 800ac92:	3202      	adds	r2, #2
 800ac94:	f105 010c 	add.w	r1, r5, #12
 800ac98:	4683      	mov	fp, r0
 800ac9a:	0092      	lsls	r2, r2, #2
 800ac9c:	300c      	adds	r0, #12
 800ac9e:	f7fd f969 	bl	8007f74 <memcpy>
 800aca2:	4629      	mov	r1, r5
 800aca4:	9802      	ldr	r0, [sp, #8]
 800aca6:	f000 f93d 	bl	800af24 <_Bfree>
 800acaa:	465d      	mov	r5, fp
 800acac:	692b      	ldr	r3, [r5, #16]
 800acae:	1c5a      	adds	r2, r3, #1
 800acb0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800acb4:	612a      	str	r2, [r5, #16]
 800acb6:	2201      	movs	r2, #1
 800acb8:	615a      	str	r2, [r3, #20]
 800acba:	e7c2      	b.n	800ac42 <__gethex+0x390>
 800acbc:	692a      	ldr	r2, [r5, #16]
 800acbe:	454a      	cmp	r2, r9
 800acc0:	dd0b      	ble.n	800acda <__gethex+0x428>
 800acc2:	2101      	movs	r1, #1
 800acc4:	4628      	mov	r0, r5
 800acc6:	f7ff fda5 	bl	800a814 <rshift>
 800acca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800acce:	3401      	adds	r4, #1
 800acd0:	42a3      	cmp	r3, r4
 800acd2:	f6ff aed9 	blt.w	800aa88 <__gethex+0x1d6>
 800acd6:	2701      	movs	r7, #1
 800acd8:	e7c7      	b.n	800ac6a <__gethex+0x3b8>
 800acda:	f016 061f 	ands.w	r6, r6, #31
 800acde:	d0fa      	beq.n	800acd6 <__gethex+0x424>
 800ace0:	449a      	add	sl, r3
 800ace2:	f1c6 0620 	rsb	r6, r6, #32
 800ace6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800acea:	f000 f9ab 	bl	800b044 <__hi0bits>
 800acee:	42b0      	cmp	r0, r6
 800acf0:	dbe7      	blt.n	800acc2 <__gethex+0x410>
 800acf2:	e7f0      	b.n	800acd6 <__gethex+0x424>

0800acf4 <L_shift>:
 800acf4:	f1c2 0208 	rsb	r2, r2, #8
 800acf8:	0092      	lsls	r2, r2, #2
 800acfa:	b570      	push	{r4, r5, r6, lr}
 800acfc:	f1c2 0620 	rsb	r6, r2, #32
 800ad00:	6843      	ldr	r3, [r0, #4]
 800ad02:	6804      	ldr	r4, [r0, #0]
 800ad04:	fa03 f506 	lsl.w	r5, r3, r6
 800ad08:	432c      	orrs	r4, r5
 800ad0a:	40d3      	lsrs	r3, r2
 800ad0c:	6004      	str	r4, [r0, #0]
 800ad0e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ad12:	4288      	cmp	r0, r1
 800ad14:	d3f4      	bcc.n	800ad00 <L_shift+0xc>
 800ad16:	bd70      	pop	{r4, r5, r6, pc}

0800ad18 <__match>:
 800ad18:	b530      	push	{r4, r5, lr}
 800ad1a:	6803      	ldr	r3, [r0, #0]
 800ad1c:	3301      	adds	r3, #1
 800ad1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad22:	b914      	cbnz	r4, 800ad2a <__match+0x12>
 800ad24:	6003      	str	r3, [r0, #0]
 800ad26:	2001      	movs	r0, #1
 800ad28:	bd30      	pop	{r4, r5, pc}
 800ad2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad2e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ad32:	2d19      	cmp	r5, #25
 800ad34:	bf98      	it	ls
 800ad36:	3220      	addls	r2, #32
 800ad38:	42a2      	cmp	r2, r4
 800ad3a:	d0f0      	beq.n	800ad1e <__match+0x6>
 800ad3c:	2000      	movs	r0, #0
 800ad3e:	e7f3      	b.n	800ad28 <__match+0x10>

0800ad40 <__hexnan>:
 800ad40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad44:	680b      	ldr	r3, [r1, #0]
 800ad46:	6801      	ldr	r1, [r0, #0]
 800ad48:	115f      	asrs	r7, r3, #5
 800ad4a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800ad4e:	f013 031f 	ands.w	r3, r3, #31
 800ad52:	b087      	sub	sp, #28
 800ad54:	bf18      	it	ne
 800ad56:	3704      	addne	r7, #4
 800ad58:	2500      	movs	r5, #0
 800ad5a:	1f3e      	subs	r6, r7, #4
 800ad5c:	4682      	mov	sl, r0
 800ad5e:	4690      	mov	r8, r2
 800ad60:	9301      	str	r3, [sp, #4]
 800ad62:	f847 5c04 	str.w	r5, [r7, #-4]
 800ad66:	46b1      	mov	r9, r6
 800ad68:	4634      	mov	r4, r6
 800ad6a:	9502      	str	r5, [sp, #8]
 800ad6c:	46ab      	mov	fp, r5
 800ad6e:	784a      	ldrb	r2, [r1, #1]
 800ad70:	1c4b      	adds	r3, r1, #1
 800ad72:	9303      	str	r3, [sp, #12]
 800ad74:	b342      	cbz	r2, 800adc8 <__hexnan+0x88>
 800ad76:	4610      	mov	r0, r2
 800ad78:	9105      	str	r1, [sp, #20]
 800ad7a:	9204      	str	r2, [sp, #16]
 800ad7c:	f7ff fd84 	bl	800a888 <__hexdig_fun>
 800ad80:	2800      	cmp	r0, #0
 800ad82:	d143      	bne.n	800ae0c <__hexnan+0xcc>
 800ad84:	9a04      	ldr	r2, [sp, #16]
 800ad86:	9905      	ldr	r1, [sp, #20]
 800ad88:	2a20      	cmp	r2, #32
 800ad8a:	d818      	bhi.n	800adbe <__hexnan+0x7e>
 800ad8c:	9b02      	ldr	r3, [sp, #8]
 800ad8e:	459b      	cmp	fp, r3
 800ad90:	dd13      	ble.n	800adba <__hexnan+0x7a>
 800ad92:	454c      	cmp	r4, r9
 800ad94:	d206      	bcs.n	800ada4 <__hexnan+0x64>
 800ad96:	2d07      	cmp	r5, #7
 800ad98:	dc04      	bgt.n	800ada4 <__hexnan+0x64>
 800ad9a:	462a      	mov	r2, r5
 800ad9c:	4649      	mov	r1, r9
 800ad9e:	4620      	mov	r0, r4
 800ada0:	f7ff ffa8 	bl	800acf4 <L_shift>
 800ada4:	4544      	cmp	r4, r8
 800ada6:	d944      	bls.n	800ae32 <__hexnan+0xf2>
 800ada8:	2300      	movs	r3, #0
 800adaa:	f1a4 0904 	sub.w	r9, r4, #4
 800adae:	f844 3c04 	str.w	r3, [r4, #-4]
 800adb2:	f8cd b008 	str.w	fp, [sp, #8]
 800adb6:	464c      	mov	r4, r9
 800adb8:	461d      	mov	r5, r3
 800adba:	9903      	ldr	r1, [sp, #12]
 800adbc:	e7d7      	b.n	800ad6e <__hexnan+0x2e>
 800adbe:	2a29      	cmp	r2, #41	; 0x29
 800adc0:	d14a      	bne.n	800ae58 <__hexnan+0x118>
 800adc2:	3102      	adds	r1, #2
 800adc4:	f8ca 1000 	str.w	r1, [sl]
 800adc8:	f1bb 0f00 	cmp.w	fp, #0
 800adcc:	d044      	beq.n	800ae58 <__hexnan+0x118>
 800adce:	454c      	cmp	r4, r9
 800add0:	d206      	bcs.n	800ade0 <__hexnan+0xa0>
 800add2:	2d07      	cmp	r5, #7
 800add4:	dc04      	bgt.n	800ade0 <__hexnan+0xa0>
 800add6:	462a      	mov	r2, r5
 800add8:	4649      	mov	r1, r9
 800adda:	4620      	mov	r0, r4
 800addc:	f7ff ff8a 	bl	800acf4 <L_shift>
 800ade0:	4544      	cmp	r4, r8
 800ade2:	d928      	bls.n	800ae36 <__hexnan+0xf6>
 800ade4:	4643      	mov	r3, r8
 800ade6:	f854 2b04 	ldr.w	r2, [r4], #4
 800adea:	f843 2b04 	str.w	r2, [r3], #4
 800adee:	42a6      	cmp	r6, r4
 800adf0:	d2f9      	bcs.n	800ade6 <__hexnan+0xa6>
 800adf2:	2200      	movs	r2, #0
 800adf4:	f843 2b04 	str.w	r2, [r3], #4
 800adf8:	429e      	cmp	r6, r3
 800adfa:	d2fb      	bcs.n	800adf4 <__hexnan+0xb4>
 800adfc:	6833      	ldr	r3, [r6, #0]
 800adfe:	b91b      	cbnz	r3, 800ae08 <__hexnan+0xc8>
 800ae00:	4546      	cmp	r6, r8
 800ae02:	d127      	bne.n	800ae54 <__hexnan+0x114>
 800ae04:	2301      	movs	r3, #1
 800ae06:	6033      	str	r3, [r6, #0]
 800ae08:	2005      	movs	r0, #5
 800ae0a:	e026      	b.n	800ae5a <__hexnan+0x11a>
 800ae0c:	3501      	adds	r5, #1
 800ae0e:	2d08      	cmp	r5, #8
 800ae10:	f10b 0b01 	add.w	fp, fp, #1
 800ae14:	dd06      	ble.n	800ae24 <__hexnan+0xe4>
 800ae16:	4544      	cmp	r4, r8
 800ae18:	d9cf      	bls.n	800adba <__hexnan+0x7a>
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae20:	2501      	movs	r5, #1
 800ae22:	3c04      	subs	r4, #4
 800ae24:	6822      	ldr	r2, [r4, #0]
 800ae26:	f000 000f 	and.w	r0, r0, #15
 800ae2a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ae2e:	6020      	str	r0, [r4, #0]
 800ae30:	e7c3      	b.n	800adba <__hexnan+0x7a>
 800ae32:	2508      	movs	r5, #8
 800ae34:	e7c1      	b.n	800adba <__hexnan+0x7a>
 800ae36:	9b01      	ldr	r3, [sp, #4]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d0df      	beq.n	800adfc <__hexnan+0xbc>
 800ae3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ae40:	f1c3 0320 	rsb	r3, r3, #32
 800ae44:	fa22 f303 	lsr.w	r3, r2, r3
 800ae48:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800ae4c:	401a      	ands	r2, r3
 800ae4e:	f847 2c04 	str.w	r2, [r7, #-4]
 800ae52:	e7d3      	b.n	800adfc <__hexnan+0xbc>
 800ae54:	3e04      	subs	r6, #4
 800ae56:	e7d1      	b.n	800adfc <__hexnan+0xbc>
 800ae58:	2004      	movs	r0, #4
 800ae5a:	b007      	add	sp, #28
 800ae5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ae60 <__locale_ctype_ptr_l>:
 800ae60:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800ae64:	4770      	bx	lr

0800ae66 <__localeconv_l>:
 800ae66:	30f0      	adds	r0, #240	; 0xf0
 800ae68:	4770      	bx	lr
	...

0800ae6c <_localeconv_r>:
 800ae6c:	4b04      	ldr	r3, [pc, #16]	; (800ae80 <_localeconv_r+0x14>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	6a18      	ldr	r0, [r3, #32]
 800ae72:	4b04      	ldr	r3, [pc, #16]	; (800ae84 <_localeconv_r+0x18>)
 800ae74:	2800      	cmp	r0, #0
 800ae76:	bf08      	it	eq
 800ae78:	4618      	moveq	r0, r3
 800ae7a:	30f0      	adds	r0, #240	; 0xf0
 800ae7c:	4770      	bx	lr
 800ae7e:	bf00      	nop
 800ae80:	20000024 	.word	0x20000024
 800ae84:	20000088 	.word	0x20000088

0800ae88 <malloc>:
 800ae88:	4b02      	ldr	r3, [pc, #8]	; (800ae94 <malloc+0xc>)
 800ae8a:	4601      	mov	r1, r0
 800ae8c:	6818      	ldr	r0, [r3, #0]
 800ae8e:	f000 bc71 	b.w	800b774 <_malloc_r>
 800ae92:	bf00      	nop
 800ae94:	20000024 	.word	0x20000024

0800ae98 <__ascii_mbtowc>:
 800ae98:	b082      	sub	sp, #8
 800ae9a:	b901      	cbnz	r1, 800ae9e <__ascii_mbtowc+0x6>
 800ae9c:	a901      	add	r1, sp, #4
 800ae9e:	b142      	cbz	r2, 800aeb2 <__ascii_mbtowc+0x1a>
 800aea0:	b14b      	cbz	r3, 800aeb6 <__ascii_mbtowc+0x1e>
 800aea2:	7813      	ldrb	r3, [r2, #0]
 800aea4:	600b      	str	r3, [r1, #0]
 800aea6:	7812      	ldrb	r2, [r2, #0]
 800aea8:	1c10      	adds	r0, r2, #0
 800aeaa:	bf18      	it	ne
 800aeac:	2001      	movne	r0, #1
 800aeae:	b002      	add	sp, #8
 800aeb0:	4770      	bx	lr
 800aeb2:	4610      	mov	r0, r2
 800aeb4:	e7fb      	b.n	800aeae <__ascii_mbtowc+0x16>
 800aeb6:	f06f 0001 	mvn.w	r0, #1
 800aeba:	e7f8      	b.n	800aeae <__ascii_mbtowc+0x16>

0800aebc <_Balloc>:
 800aebc:	b570      	push	{r4, r5, r6, lr}
 800aebe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aec0:	4604      	mov	r4, r0
 800aec2:	460e      	mov	r6, r1
 800aec4:	b93d      	cbnz	r5, 800aed6 <_Balloc+0x1a>
 800aec6:	2010      	movs	r0, #16
 800aec8:	f7ff ffde 	bl	800ae88 <malloc>
 800aecc:	6260      	str	r0, [r4, #36]	; 0x24
 800aece:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aed2:	6005      	str	r5, [r0, #0]
 800aed4:	60c5      	str	r5, [r0, #12]
 800aed6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800aed8:	68eb      	ldr	r3, [r5, #12]
 800aeda:	b183      	cbz	r3, 800aefe <_Balloc+0x42>
 800aedc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aede:	68db      	ldr	r3, [r3, #12]
 800aee0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800aee4:	b9b8      	cbnz	r0, 800af16 <_Balloc+0x5a>
 800aee6:	2101      	movs	r1, #1
 800aee8:	fa01 f506 	lsl.w	r5, r1, r6
 800aeec:	1d6a      	adds	r2, r5, #5
 800aeee:	0092      	lsls	r2, r2, #2
 800aef0:	4620      	mov	r0, r4
 800aef2:	f000 fbe2 	bl	800b6ba <_calloc_r>
 800aef6:	b160      	cbz	r0, 800af12 <_Balloc+0x56>
 800aef8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800aefc:	e00e      	b.n	800af1c <_Balloc+0x60>
 800aefe:	2221      	movs	r2, #33	; 0x21
 800af00:	2104      	movs	r1, #4
 800af02:	4620      	mov	r0, r4
 800af04:	f000 fbd9 	bl	800b6ba <_calloc_r>
 800af08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af0a:	60e8      	str	r0, [r5, #12]
 800af0c:	68db      	ldr	r3, [r3, #12]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d1e4      	bne.n	800aedc <_Balloc+0x20>
 800af12:	2000      	movs	r0, #0
 800af14:	bd70      	pop	{r4, r5, r6, pc}
 800af16:	6802      	ldr	r2, [r0, #0]
 800af18:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800af1c:	2300      	movs	r3, #0
 800af1e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af22:	e7f7      	b.n	800af14 <_Balloc+0x58>

0800af24 <_Bfree>:
 800af24:	b570      	push	{r4, r5, r6, lr}
 800af26:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800af28:	4606      	mov	r6, r0
 800af2a:	460d      	mov	r5, r1
 800af2c:	b93c      	cbnz	r4, 800af3e <_Bfree+0x1a>
 800af2e:	2010      	movs	r0, #16
 800af30:	f7ff ffaa 	bl	800ae88 <malloc>
 800af34:	6270      	str	r0, [r6, #36]	; 0x24
 800af36:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af3a:	6004      	str	r4, [r0, #0]
 800af3c:	60c4      	str	r4, [r0, #12]
 800af3e:	b13d      	cbz	r5, 800af50 <_Bfree+0x2c>
 800af40:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800af42:	686a      	ldr	r2, [r5, #4]
 800af44:	68db      	ldr	r3, [r3, #12]
 800af46:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af4a:	6029      	str	r1, [r5, #0]
 800af4c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800af50:	bd70      	pop	{r4, r5, r6, pc}

0800af52 <__multadd>:
 800af52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af56:	690d      	ldr	r5, [r1, #16]
 800af58:	461f      	mov	r7, r3
 800af5a:	4606      	mov	r6, r0
 800af5c:	460c      	mov	r4, r1
 800af5e:	f101 0c14 	add.w	ip, r1, #20
 800af62:	2300      	movs	r3, #0
 800af64:	f8dc 0000 	ldr.w	r0, [ip]
 800af68:	b281      	uxth	r1, r0
 800af6a:	fb02 7101 	mla	r1, r2, r1, r7
 800af6e:	0c0f      	lsrs	r7, r1, #16
 800af70:	0c00      	lsrs	r0, r0, #16
 800af72:	fb02 7000 	mla	r0, r2, r0, r7
 800af76:	b289      	uxth	r1, r1
 800af78:	3301      	adds	r3, #1
 800af7a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800af7e:	429d      	cmp	r5, r3
 800af80:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800af84:	f84c 1b04 	str.w	r1, [ip], #4
 800af88:	dcec      	bgt.n	800af64 <__multadd+0x12>
 800af8a:	b1d7      	cbz	r7, 800afc2 <__multadd+0x70>
 800af8c:	68a3      	ldr	r3, [r4, #8]
 800af8e:	42ab      	cmp	r3, r5
 800af90:	dc12      	bgt.n	800afb8 <__multadd+0x66>
 800af92:	6861      	ldr	r1, [r4, #4]
 800af94:	4630      	mov	r0, r6
 800af96:	3101      	adds	r1, #1
 800af98:	f7ff ff90 	bl	800aebc <_Balloc>
 800af9c:	6922      	ldr	r2, [r4, #16]
 800af9e:	3202      	adds	r2, #2
 800afa0:	f104 010c 	add.w	r1, r4, #12
 800afa4:	4680      	mov	r8, r0
 800afa6:	0092      	lsls	r2, r2, #2
 800afa8:	300c      	adds	r0, #12
 800afaa:	f7fc ffe3 	bl	8007f74 <memcpy>
 800afae:	4621      	mov	r1, r4
 800afb0:	4630      	mov	r0, r6
 800afb2:	f7ff ffb7 	bl	800af24 <_Bfree>
 800afb6:	4644      	mov	r4, r8
 800afb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800afbc:	3501      	adds	r5, #1
 800afbe:	615f      	str	r7, [r3, #20]
 800afc0:	6125      	str	r5, [r4, #16]
 800afc2:	4620      	mov	r0, r4
 800afc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800afc8 <__s2b>:
 800afc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afcc:	460c      	mov	r4, r1
 800afce:	4615      	mov	r5, r2
 800afd0:	461f      	mov	r7, r3
 800afd2:	2209      	movs	r2, #9
 800afd4:	3308      	adds	r3, #8
 800afd6:	4606      	mov	r6, r0
 800afd8:	fb93 f3f2 	sdiv	r3, r3, r2
 800afdc:	2100      	movs	r1, #0
 800afde:	2201      	movs	r2, #1
 800afe0:	429a      	cmp	r2, r3
 800afe2:	db20      	blt.n	800b026 <__s2b+0x5e>
 800afe4:	4630      	mov	r0, r6
 800afe6:	f7ff ff69 	bl	800aebc <_Balloc>
 800afea:	9b08      	ldr	r3, [sp, #32]
 800afec:	6143      	str	r3, [r0, #20]
 800afee:	2d09      	cmp	r5, #9
 800aff0:	f04f 0301 	mov.w	r3, #1
 800aff4:	6103      	str	r3, [r0, #16]
 800aff6:	dd19      	ble.n	800b02c <__s2b+0x64>
 800aff8:	f104 0809 	add.w	r8, r4, #9
 800affc:	46c1      	mov	r9, r8
 800affe:	442c      	add	r4, r5
 800b000:	f819 3b01 	ldrb.w	r3, [r9], #1
 800b004:	4601      	mov	r1, r0
 800b006:	3b30      	subs	r3, #48	; 0x30
 800b008:	220a      	movs	r2, #10
 800b00a:	4630      	mov	r0, r6
 800b00c:	f7ff ffa1 	bl	800af52 <__multadd>
 800b010:	45a1      	cmp	r9, r4
 800b012:	d1f5      	bne.n	800b000 <__s2b+0x38>
 800b014:	eb08 0405 	add.w	r4, r8, r5
 800b018:	3c08      	subs	r4, #8
 800b01a:	1b2d      	subs	r5, r5, r4
 800b01c:	1963      	adds	r3, r4, r5
 800b01e:	42bb      	cmp	r3, r7
 800b020:	db07      	blt.n	800b032 <__s2b+0x6a>
 800b022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b026:	0052      	lsls	r2, r2, #1
 800b028:	3101      	adds	r1, #1
 800b02a:	e7d9      	b.n	800afe0 <__s2b+0x18>
 800b02c:	340a      	adds	r4, #10
 800b02e:	2509      	movs	r5, #9
 800b030:	e7f3      	b.n	800b01a <__s2b+0x52>
 800b032:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b036:	4601      	mov	r1, r0
 800b038:	3b30      	subs	r3, #48	; 0x30
 800b03a:	220a      	movs	r2, #10
 800b03c:	4630      	mov	r0, r6
 800b03e:	f7ff ff88 	bl	800af52 <__multadd>
 800b042:	e7eb      	b.n	800b01c <__s2b+0x54>

0800b044 <__hi0bits>:
 800b044:	0c02      	lsrs	r2, r0, #16
 800b046:	0412      	lsls	r2, r2, #16
 800b048:	4603      	mov	r3, r0
 800b04a:	b9b2      	cbnz	r2, 800b07a <__hi0bits+0x36>
 800b04c:	0403      	lsls	r3, r0, #16
 800b04e:	2010      	movs	r0, #16
 800b050:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b054:	bf04      	itt	eq
 800b056:	021b      	lsleq	r3, r3, #8
 800b058:	3008      	addeq	r0, #8
 800b05a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b05e:	bf04      	itt	eq
 800b060:	011b      	lsleq	r3, r3, #4
 800b062:	3004      	addeq	r0, #4
 800b064:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b068:	bf04      	itt	eq
 800b06a:	009b      	lsleq	r3, r3, #2
 800b06c:	3002      	addeq	r0, #2
 800b06e:	2b00      	cmp	r3, #0
 800b070:	db06      	blt.n	800b080 <__hi0bits+0x3c>
 800b072:	005b      	lsls	r3, r3, #1
 800b074:	d503      	bpl.n	800b07e <__hi0bits+0x3a>
 800b076:	3001      	adds	r0, #1
 800b078:	4770      	bx	lr
 800b07a:	2000      	movs	r0, #0
 800b07c:	e7e8      	b.n	800b050 <__hi0bits+0xc>
 800b07e:	2020      	movs	r0, #32
 800b080:	4770      	bx	lr

0800b082 <__lo0bits>:
 800b082:	6803      	ldr	r3, [r0, #0]
 800b084:	f013 0207 	ands.w	r2, r3, #7
 800b088:	4601      	mov	r1, r0
 800b08a:	d00b      	beq.n	800b0a4 <__lo0bits+0x22>
 800b08c:	07da      	lsls	r2, r3, #31
 800b08e:	d423      	bmi.n	800b0d8 <__lo0bits+0x56>
 800b090:	0798      	lsls	r0, r3, #30
 800b092:	bf49      	itett	mi
 800b094:	085b      	lsrmi	r3, r3, #1
 800b096:	089b      	lsrpl	r3, r3, #2
 800b098:	2001      	movmi	r0, #1
 800b09a:	600b      	strmi	r3, [r1, #0]
 800b09c:	bf5c      	itt	pl
 800b09e:	600b      	strpl	r3, [r1, #0]
 800b0a0:	2002      	movpl	r0, #2
 800b0a2:	4770      	bx	lr
 800b0a4:	b298      	uxth	r0, r3
 800b0a6:	b9a8      	cbnz	r0, 800b0d4 <__lo0bits+0x52>
 800b0a8:	0c1b      	lsrs	r3, r3, #16
 800b0aa:	2010      	movs	r0, #16
 800b0ac:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b0b0:	bf04      	itt	eq
 800b0b2:	0a1b      	lsreq	r3, r3, #8
 800b0b4:	3008      	addeq	r0, #8
 800b0b6:	071a      	lsls	r2, r3, #28
 800b0b8:	bf04      	itt	eq
 800b0ba:	091b      	lsreq	r3, r3, #4
 800b0bc:	3004      	addeq	r0, #4
 800b0be:	079a      	lsls	r2, r3, #30
 800b0c0:	bf04      	itt	eq
 800b0c2:	089b      	lsreq	r3, r3, #2
 800b0c4:	3002      	addeq	r0, #2
 800b0c6:	07da      	lsls	r2, r3, #31
 800b0c8:	d402      	bmi.n	800b0d0 <__lo0bits+0x4e>
 800b0ca:	085b      	lsrs	r3, r3, #1
 800b0cc:	d006      	beq.n	800b0dc <__lo0bits+0x5a>
 800b0ce:	3001      	adds	r0, #1
 800b0d0:	600b      	str	r3, [r1, #0]
 800b0d2:	4770      	bx	lr
 800b0d4:	4610      	mov	r0, r2
 800b0d6:	e7e9      	b.n	800b0ac <__lo0bits+0x2a>
 800b0d8:	2000      	movs	r0, #0
 800b0da:	4770      	bx	lr
 800b0dc:	2020      	movs	r0, #32
 800b0de:	4770      	bx	lr

0800b0e0 <__i2b>:
 800b0e0:	b510      	push	{r4, lr}
 800b0e2:	460c      	mov	r4, r1
 800b0e4:	2101      	movs	r1, #1
 800b0e6:	f7ff fee9 	bl	800aebc <_Balloc>
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	6144      	str	r4, [r0, #20]
 800b0ee:	6102      	str	r2, [r0, #16]
 800b0f0:	bd10      	pop	{r4, pc}

0800b0f2 <__multiply>:
 800b0f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f6:	4614      	mov	r4, r2
 800b0f8:	690a      	ldr	r2, [r1, #16]
 800b0fa:	6923      	ldr	r3, [r4, #16]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	bfb8      	it	lt
 800b100:	460b      	movlt	r3, r1
 800b102:	4688      	mov	r8, r1
 800b104:	bfbc      	itt	lt
 800b106:	46a0      	movlt	r8, r4
 800b108:	461c      	movlt	r4, r3
 800b10a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b10e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b112:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b116:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b11a:	eb07 0609 	add.w	r6, r7, r9
 800b11e:	42b3      	cmp	r3, r6
 800b120:	bfb8      	it	lt
 800b122:	3101      	addlt	r1, #1
 800b124:	f7ff feca 	bl	800aebc <_Balloc>
 800b128:	f100 0514 	add.w	r5, r0, #20
 800b12c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b130:	462b      	mov	r3, r5
 800b132:	2200      	movs	r2, #0
 800b134:	4573      	cmp	r3, lr
 800b136:	d316      	bcc.n	800b166 <__multiply+0x74>
 800b138:	f104 0214 	add.w	r2, r4, #20
 800b13c:	f108 0114 	add.w	r1, r8, #20
 800b140:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b144:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b148:	9300      	str	r3, [sp, #0]
 800b14a:	9b00      	ldr	r3, [sp, #0]
 800b14c:	9201      	str	r2, [sp, #4]
 800b14e:	4293      	cmp	r3, r2
 800b150:	d80c      	bhi.n	800b16c <__multiply+0x7a>
 800b152:	2e00      	cmp	r6, #0
 800b154:	dd03      	ble.n	800b15e <__multiply+0x6c>
 800b156:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d05d      	beq.n	800b21a <__multiply+0x128>
 800b15e:	6106      	str	r6, [r0, #16]
 800b160:	b003      	add	sp, #12
 800b162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b166:	f843 2b04 	str.w	r2, [r3], #4
 800b16a:	e7e3      	b.n	800b134 <__multiply+0x42>
 800b16c:	f8b2 b000 	ldrh.w	fp, [r2]
 800b170:	f1bb 0f00 	cmp.w	fp, #0
 800b174:	d023      	beq.n	800b1be <__multiply+0xcc>
 800b176:	4689      	mov	r9, r1
 800b178:	46ac      	mov	ip, r5
 800b17a:	f04f 0800 	mov.w	r8, #0
 800b17e:	f859 4b04 	ldr.w	r4, [r9], #4
 800b182:	f8dc a000 	ldr.w	sl, [ip]
 800b186:	b2a3      	uxth	r3, r4
 800b188:	fa1f fa8a 	uxth.w	sl, sl
 800b18c:	fb0b a303 	mla	r3, fp, r3, sl
 800b190:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b194:	f8dc 4000 	ldr.w	r4, [ip]
 800b198:	4443      	add	r3, r8
 800b19a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b19e:	fb0b 840a 	mla	r4, fp, sl, r8
 800b1a2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b1a6:	46e2      	mov	sl, ip
 800b1a8:	b29b      	uxth	r3, r3
 800b1aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b1ae:	454f      	cmp	r7, r9
 800b1b0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b1b4:	f84a 3b04 	str.w	r3, [sl], #4
 800b1b8:	d82b      	bhi.n	800b212 <__multiply+0x120>
 800b1ba:	f8cc 8004 	str.w	r8, [ip, #4]
 800b1be:	9b01      	ldr	r3, [sp, #4]
 800b1c0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b1c4:	3204      	adds	r2, #4
 800b1c6:	f1ba 0f00 	cmp.w	sl, #0
 800b1ca:	d020      	beq.n	800b20e <__multiply+0x11c>
 800b1cc:	682b      	ldr	r3, [r5, #0]
 800b1ce:	4689      	mov	r9, r1
 800b1d0:	46a8      	mov	r8, r5
 800b1d2:	f04f 0b00 	mov.w	fp, #0
 800b1d6:	f8b9 c000 	ldrh.w	ip, [r9]
 800b1da:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b1de:	fb0a 440c 	mla	r4, sl, ip, r4
 800b1e2:	445c      	add	r4, fp
 800b1e4:	46c4      	mov	ip, r8
 800b1e6:	b29b      	uxth	r3, r3
 800b1e8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b1ec:	f84c 3b04 	str.w	r3, [ip], #4
 800b1f0:	f859 3b04 	ldr.w	r3, [r9], #4
 800b1f4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b1f8:	0c1b      	lsrs	r3, r3, #16
 800b1fa:	fb0a b303 	mla	r3, sl, r3, fp
 800b1fe:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b202:	454f      	cmp	r7, r9
 800b204:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b208:	d805      	bhi.n	800b216 <__multiply+0x124>
 800b20a:	f8c8 3004 	str.w	r3, [r8, #4]
 800b20e:	3504      	adds	r5, #4
 800b210:	e79b      	b.n	800b14a <__multiply+0x58>
 800b212:	46d4      	mov	ip, sl
 800b214:	e7b3      	b.n	800b17e <__multiply+0x8c>
 800b216:	46e0      	mov	r8, ip
 800b218:	e7dd      	b.n	800b1d6 <__multiply+0xe4>
 800b21a:	3e01      	subs	r6, #1
 800b21c:	e799      	b.n	800b152 <__multiply+0x60>
	...

0800b220 <__pow5mult>:
 800b220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b224:	4615      	mov	r5, r2
 800b226:	f012 0203 	ands.w	r2, r2, #3
 800b22a:	4606      	mov	r6, r0
 800b22c:	460f      	mov	r7, r1
 800b22e:	d007      	beq.n	800b240 <__pow5mult+0x20>
 800b230:	3a01      	subs	r2, #1
 800b232:	4c21      	ldr	r4, [pc, #132]	; (800b2b8 <__pow5mult+0x98>)
 800b234:	2300      	movs	r3, #0
 800b236:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b23a:	f7ff fe8a 	bl	800af52 <__multadd>
 800b23e:	4607      	mov	r7, r0
 800b240:	10ad      	asrs	r5, r5, #2
 800b242:	d035      	beq.n	800b2b0 <__pow5mult+0x90>
 800b244:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b246:	b93c      	cbnz	r4, 800b258 <__pow5mult+0x38>
 800b248:	2010      	movs	r0, #16
 800b24a:	f7ff fe1d 	bl	800ae88 <malloc>
 800b24e:	6270      	str	r0, [r6, #36]	; 0x24
 800b250:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b254:	6004      	str	r4, [r0, #0]
 800b256:	60c4      	str	r4, [r0, #12]
 800b258:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b25c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b260:	b94c      	cbnz	r4, 800b276 <__pow5mult+0x56>
 800b262:	f240 2171 	movw	r1, #625	; 0x271
 800b266:	4630      	mov	r0, r6
 800b268:	f7ff ff3a 	bl	800b0e0 <__i2b>
 800b26c:	2300      	movs	r3, #0
 800b26e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b272:	4604      	mov	r4, r0
 800b274:	6003      	str	r3, [r0, #0]
 800b276:	f04f 0800 	mov.w	r8, #0
 800b27a:	07eb      	lsls	r3, r5, #31
 800b27c:	d50a      	bpl.n	800b294 <__pow5mult+0x74>
 800b27e:	4639      	mov	r1, r7
 800b280:	4622      	mov	r2, r4
 800b282:	4630      	mov	r0, r6
 800b284:	f7ff ff35 	bl	800b0f2 <__multiply>
 800b288:	4639      	mov	r1, r7
 800b28a:	4681      	mov	r9, r0
 800b28c:	4630      	mov	r0, r6
 800b28e:	f7ff fe49 	bl	800af24 <_Bfree>
 800b292:	464f      	mov	r7, r9
 800b294:	106d      	asrs	r5, r5, #1
 800b296:	d00b      	beq.n	800b2b0 <__pow5mult+0x90>
 800b298:	6820      	ldr	r0, [r4, #0]
 800b29a:	b938      	cbnz	r0, 800b2ac <__pow5mult+0x8c>
 800b29c:	4622      	mov	r2, r4
 800b29e:	4621      	mov	r1, r4
 800b2a0:	4630      	mov	r0, r6
 800b2a2:	f7ff ff26 	bl	800b0f2 <__multiply>
 800b2a6:	6020      	str	r0, [r4, #0]
 800b2a8:	f8c0 8000 	str.w	r8, [r0]
 800b2ac:	4604      	mov	r4, r0
 800b2ae:	e7e4      	b.n	800b27a <__pow5mult+0x5a>
 800b2b0:	4638      	mov	r0, r7
 800b2b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2b6:	bf00      	nop
 800b2b8:	0800c610 	.word	0x0800c610

0800b2bc <__lshift>:
 800b2bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2c0:	460c      	mov	r4, r1
 800b2c2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b2c6:	6923      	ldr	r3, [r4, #16]
 800b2c8:	6849      	ldr	r1, [r1, #4]
 800b2ca:	eb0a 0903 	add.w	r9, sl, r3
 800b2ce:	68a3      	ldr	r3, [r4, #8]
 800b2d0:	4607      	mov	r7, r0
 800b2d2:	4616      	mov	r6, r2
 800b2d4:	f109 0501 	add.w	r5, r9, #1
 800b2d8:	42ab      	cmp	r3, r5
 800b2da:	db32      	blt.n	800b342 <__lshift+0x86>
 800b2dc:	4638      	mov	r0, r7
 800b2de:	f7ff fded 	bl	800aebc <_Balloc>
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	4680      	mov	r8, r0
 800b2e6:	f100 0114 	add.w	r1, r0, #20
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	4553      	cmp	r3, sl
 800b2ee:	db2b      	blt.n	800b348 <__lshift+0x8c>
 800b2f0:	6920      	ldr	r0, [r4, #16]
 800b2f2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b2f6:	f104 0314 	add.w	r3, r4, #20
 800b2fa:	f016 021f 	ands.w	r2, r6, #31
 800b2fe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b302:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b306:	d025      	beq.n	800b354 <__lshift+0x98>
 800b308:	f1c2 0e20 	rsb	lr, r2, #32
 800b30c:	2000      	movs	r0, #0
 800b30e:	681e      	ldr	r6, [r3, #0]
 800b310:	468a      	mov	sl, r1
 800b312:	4096      	lsls	r6, r2
 800b314:	4330      	orrs	r0, r6
 800b316:	f84a 0b04 	str.w	r0, [sl], #4
 800b31a:	f853 0b04 	ldr.w	r0, [r3], #4
 800b31e:	459c      	cmp	ip, r3
 800b320:	fa20 f00e 	lsr.w	r0, r0, lr
 800b324:	d814      	bhi.n	800b350 <__lshift+0x94>
 800b326:	6048      	str	r0, [r1, #4]
 800b328:	b108      	cbz	r0, 800b32e <__lshift+0x72>
 800b32a:	f109 0502 	add.w	r5, r9, #2
 800b32e:	3d01      	subs	r5, #1
 800b330:	4638      	mov	r0, r7
 800b332:	f8c8 5010 	str.w	r5, [r8, #16]
 800b336:	4621      	mov	r1, r4
 800b338:	f7ff fdf4 	bl	800af24 <_Bfree>
 800b33c:	4640      	mov	r0, r8
 800b33e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b342:	3101      	adds	r1, #1
 800b344:	005b      	lsls	r3, r3, #1
 800b346:	e7c7      	b.n	800b2d8 <__lshift+0x1c>
 800b348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b34c:	3301      	adds	r3, #1
 800b34e:	e7cd      	b.n	800b2ec <__lshift+0x30>
 800b350:	4651      	mov	r1, sl
 800b352:	e7dc      	b.n	800b30e <__lshift+0x52>
 800b354:	3904      	subs	r1, #4
 800b356:	f853 2b04 	ldr.w	r2, [r3], #4
 800b35a:	f841 2f04 	str.w	r2, [r1, #4]!
 800b35e:	459c      	cmp	ip, r3
 800b360:	d8f9      	bhi.n	800b356 <__lshift+0x9a>
 800b362:	e7e4      	b.n	800b32e <__lshift+0x72>

0800b364 <__mcmp>:
 800b364:	6903      	ldr	r3, [r0, #16]
 800b366:	690a      	ldr	r2, [r1, #16]
 800b368:	1a9b      	subs	r3, r3, r2
 800b36a:	b530      	push	{r4, r5, lr}
 800b36c:	d10c      	bne.n	800b388 <__mcmp+0x24>
 800b36e:	0092      	lsls	r2, r2, #2
 800b370:	3014      	adds	r0, #20
 800b372:	3114      	adds	r1, #20
 800b374:	1884      	adds	r4, r0, r2
 800b376:	4411      	add	r1, r2
 800b378:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b37c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b380:	4295      	cmp	r5, r2
 800b382:	d003      	beq.n	800b38c <__mcmp+0x28>
 800b384:	d305      	bcc.n	800b392 <__mcmp+0x2e>
 800b386:	2301      	movs	r3, #1
 800b388:	4618      	mov	r0, r3
 800b38a:	bd30      	pop	{r4, r5, pc}
 800b38c:	42a0      	cmp	r0, r4
 800b38e:	d3f3      	bcc.n	800b378 <__mcmp+0x14>
 800b390:	e7fa      	b.n	800b388 <__mcmp+0x24>
 800b392:	f04f 33ff 	mov.w	r3, #4294967295
 800b396:	e7f7      	b.n	800b388 <__mcmp+0x24>

0800b398 <__mdiff>:
 800b398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b39c:	460d      	mov	r5, r1
 800b39e:	4607      	mov	r7, r0
 800b3a0:	4611      	mov	r1, r2
 800b3a2:	4628      	mov	r0, r5
 800b3a4:	4614      	mov	r4, r2
 800b3a6:	f7ff ffdd 	bl	800b364 <__mcmp>
 800b3aa:	1e06      	subs	r6, r0, #0
 800b3ac:	d108      	bne.n	800b3c0 <__mdiff+0x28>
 800b3ae:	4631      	mov	r1, r6
 800b3b0:	4638      	mov	r0, r7
 800b3b2:	f7ff fd83 	bl	800aebc <_Balloc>
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b3bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3c0:	bfa4      	itt	ge
 800b3c2:	4623      	movge	r3, r4
 800b3c4:	462c      	movge	r4, r5
 800b3c6:	4638      	mov	r0, r7
 800b3c8:	6861      	ldr	r1, [r4, #4]
 800b3ca:	bfa6      	itte	ge
 800b3cc:	461d      	movge	r5, r3
 800b3ce:	2600      	movge	r6, #0
 800b3d0:	2601      	movlt	r6, #1
 800b3d2:	f7ff fd73 	bl	800aebc <_Balloc>
 800b3d6:	692b      	ldr	r3, [r5, #16]
 800b3d8:	60c6      	str	r6, [r0, #12]
 800b3da:	6926      	ldr	r6, [r4, #16]
 800b3dc:	f105 0914 	add.w	r9, r5, #20
 800b3e0:	f104 0214 	add.w	r2, r4, #20
 800b3e4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b3e8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b3ec:	f100 0514 	add.w	r5, r0, #20
 800b3f0:	f04f 0e00 	mov.w	lr, #0
 800b3f4:	f852 ab04 	ldr.w	sl, [r2], #4
 800b3f8:	f859 4b04 	ldr.w	r4, [r9], #4
 800b3fc:	fa1e f18a 	uxtah	r1, lr, sl
 800b400:	b2a3      	uxth	r3, r4
 800b402:	1ac9      	subs	r1, r1, r3
 800b404:	0c23      	lsrs	r3, r4, #16
 800b406:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b40a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b40e:	b289      	uxth	r1, r1
 800b410:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b414:	45c8      	cmp	r8, r9
 800b416:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b41a:	4694      	mov	ip, r2
 800b41c:	f845 3b04 	str.w	r3, [r5], #4
 800b420:	d8e8      	bhi.n	800b3f4 <__mdiff+0x5c>
 800b422:	45bc      	cmp	ip, r7
 800b424:	d304      	bcc.n	800b430 <__mdiff+0x98>
 800b426:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b42a:	b183      	cbz	r3, 800b44e <__mdiff+0xb6>
 800b42c:	6106      	str	r6, [r0, #16]
 800b42e:	e7c5      	b.n	800b3bc <__mdiff+0x24>
 800b430:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b434:	fa1e f381 	uxtah	r3, lr, r1
 800b438:	141a      	asrs	r2, r3, #16
 800b43a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b43e:	b29b      	uxth	r3, r3
 800b440:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b444:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b448:	f845 3b04 	str.w	r3, [r5], #4
 800b44c:	e7e9      	b.n	800b422 <__mdiff+0x8a>
 800b44e:	3e01      	subs	r6, #1
 800b450:	e7e9      	b.n	800b426 <__mdiff+0x8e>
	...

0800b454 <__ulp>:
 800b454:	4b12      	ldr	r3, [pc, #72]	; (800b4a0 <__ulp+0x4c>)
 800b456:	ee10 2a90 	vmov	r2, s1
 800b45a:	401a      	ands	r2, r3
 800b45c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800b460:	2b00      	cmp	r3, #0
 800b462:	dd04      	ble.n	800b46e <__ulp+0x1a>
 800b464:	2000      	movs	r0, #0
 800b466:	4619      	mov	r1, r3
 800b468:	ec41 0b10 	vmov	d0, r0, r1
 800b46c:	4770      	bx	lr
 800b46e:	425b      	negs	r3, r3
 800b470:	151b      	asrs	r3, r3, #20
 800b472:	2b13      	cmp	r3, #19
 800b474:	f04f 0000 	mov.w	r0, #0
 800b478:	f04f 0100 	mov.w	r1, #0
 800b47c:	dc04      	bgt.n	800b488 <__ulp+0x34>
 800b47e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b482:	fa42 f103 	asr.w	r1, r2, r3
 800b486:	e7ef      	b.n	800b468 <__ulp+0x14>
 800b488:	3b14      	subs	r3, #20
 800b48a:	2b1e      	cmp	r3, #30
 800b48c:	f04f 0201 	mov.w	r2, #1
 800b490:	bfda      	itte	le
 800b492:	f1c3 031f 	rsble	r3, r3, #31
 800b496:	fa02 f303 	lslle.w	r3, r2, r3
 800b49a:	4613      	movgt	r3, r2
 800b49c:	4618      	mov	r0, r3
 800b49e:	e7e3      	b.n	800b468 <__ulp+0x14>
 800b4a0:	7ff00000 	.word	0x7ff00000

0800b4a4 <__b2d>:
 800b4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4a6:	6905      	ldr	r5, [r0, #16]
 800b4a8:	f100 0714 	add.w	r7, r0, #20
 800b4ac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b4b0:	1f2e      	subs	r6, r5, #4
 800b4b2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b4b6:	4620      	mov	r0, r4
 800b4b8:	f7ff fdc4 	bl	800b044 <__hi0bits>
 800b4bc:	f1c0 0320 	rsb	r3, r0, #32
 800b4c0:	280a      	cmp	r0, #10
 800b4c2:	600b      	str	r3, [r1, #0]
 800b4c4:	f8df c074 	ldr.w	ip, [pc, #116]	; 800b53c <__b2d+0x98>
 800b4c8:	dc14      	bgt.n	800b4f4 <__b2d+0x50>
 800b4ca:	f1c0 0e0b 	rsb	lr, r0, #11
 800b4ce:	fa24 f10e 	lsr.w	r1, r4, lr
 800b4d2:	42b7      	cmp	r7, r6
 800b4d4:	ea41 030c 	orr.w	r3, r1, ip
 800b4d8:	bf34      	ite	cc
 800b4da:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b4de:	2100      	movcs	r1, #0
 800b4e0:	3015      	adds	r0, #21
 800b4e2:	fa04 f000 	lsl.w	r0, r4, r0
 800b4e6:	fa21 f10e 	lsr.w	r1, r1, lr
 800b4ea:	ea40 0201 	orr.w	r2, r0, r1
 800b4ee:	ec43 2b10 	vmov	d0, r2, r3
 800b4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4f4:	42b7      	cmp	r7, r6
 800b4f6:	bf3a      	itte	cc
 800b4f8:	f1a5 0608 	subcc.w	r6, r5, #8
 800b4fc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b500:	2100      	movcs	r1, #0
 800b502:	380b      	subs	r0, #11
 800b504:	d015      	beq.n	800b532 <__b2d+0x8e>
 800b506:	4084      	lsls	r4, r0
 800b508:	f1c0 0520 	rsb	r5, r0, #32
 800b50c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800b510:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800b514:	42be      	cmp	r6, r7
 800b516:	fa21 fc05 	lsr.w	ip, r1, r5
 800b51a:	ea44 030c 	orr.w	r3, r4, ip
 800b51e:	bf8c      	ite	hi
 800b520:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b524:	2400      	movls	r4, #0
 800b526:	fa01 f000 	lsl.w	r0, r1, r0
 800b52a:	40ec      	lsrs	r4, r5
 800b52c:	ea40 0204 	orr.w	r2, r0, r4
 800b530:	e7dd      	b.n	800b4ee <__b2d+0x4a>
 800b532:	ea44 030c 	orr.w	r3, r4, ip
 800b536:	460a      	mov	r2, r1
 800b538:	e7d9      	b.n	800b4ee <__b2d+0x4a>
 800b53a:	bf00      	nop
 800b53c:	3ff00000 	.word	0x3ff00000

0800b540 <__d2b>:
 800b540:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b544:	460e      	mov	r6, r1
 800b546:	2101      	movs	r1, #1
 800b548:	ec59 8b10 	vmov	r8, r9, d0
 800b54c:	4615      	mov	r5, r2
 800b54e:	f7ff fcb5 	bl	800aebc <_Balloc>
 800b552:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b556:	4607      	mov	r7, r0
 800b558:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b55c:	bb34      	cbnz	r4, 800b5ac <__d2b+0x6c>
 800b55e:	9301      	str	r3, [sp, #4]
 800b560:	f1b8 0300 	subs.w	r3, r8, #0
 800b564:	d027      	beq.n	800b5b6 <__d2b+0x76>
 800b566:	a802      	add	r0, sp, #8
 800b568:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b56c:	f7ff fd89 	bl	800b082 <__lo0bits>
 800b570:	9900      	ldr	r1, [sp, #0]
 800b572:	b1f0      	cbz	r0, 800b5b2 <__d2b+0x72>
 800b574:	9a01      	ldr	r2, [sp, #4]
 800b576:	f1c0 0320 	rsb	r3, r0, #32
 800b57a:	fa02 f303 	lsl.w	r3, r2, r3
 800b57e:	430b      	orrs	r3, r1
 800b580:	40c2      	lsrs	r2, r0
 800b582:	617b      	str	r3, [r7, #20]
 800b584:	9201      	str	r2, [sp, #4]
 800b586:	9b01      	ldr	r3, [sp, #4]
 800b588:	61bb      	str	r3, [r7, #24]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	bf14      	ite	ne
 800b58e:	2102      	movne	r1, #2
 800b590:	2101      	moveq	r1, #1
 800b592:	6139      	str	r1, [r7, #16]
 800b594:	b1c4      	cbz	r4, 800b5c8 <__d2b+0x88>
 800b596:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b59a:	4404      	add	r4, r0
 800b59c:	6034      	str	r4, [r6, #0]
 800b59e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b5a2:	6028      	str	r0, [r5, #0]
 800b5a4:	4638      	mov	r0, r7
 800b5a6:	b003      	add	sp, #12
 800b5a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5b0:	e7d5      	b.n	800b55e <__d2b+0x1e>
 800b5b2:	6179      	str	r1, [r7, #20]
 800b5b4:	e7e7      	b.n	800b586 <__d2b+0x46>
 800b5b6:	a801      	add	r0, sp, #4
 800b5b8:	f7ff fd63 	bl	800b082 <__lo0bits>
 800b5bc:	9b01      	ldr	r3, [sp, #4]
 800b5be:	617b      	str	r3, [r7, #20]
 800b5c0:	2101      	movs	r1, #1
 800b5c2:	6139      	str	r1, [r7, #16]
 800b5c4:	3020      	adds	r0, #32
 800b5c6:	e7e5      	b.n	800b594 <__d2b+0x54>
 800b5c8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b5cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b5d0:	6030      	str	r0, [r6, #0]
 800b5d2:	6918      	ldr	r0, [r3, #16]
 800b5d4:	f7ff fd36 	bl	800b044 <__hi0bits>
 800b5d8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b5dc:	e7e1      	b.n	800b5a2 <__d2b+0x62>

0800b5de <__ratio>:
 800b5de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5e2:	4688      	mov	r8, r1
 800b5e4:	4669      	mov	r1, sp
 800b5e6:	4681      	mov	r9, r0
 800b5e8:	f7ff ff5c 	bl	800b4a4 <__b2d>
 800b5ec:	a901      	add	r1, sp, #4
 800b5ee:	4640      	mov	r0, r8
 800b5f0:	ec57 6b10 	vmov	r6, r7, d0
 800b5f4:	f7ff ff56 	bl	800b4a4 <__b2d>
 800b5f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b5fc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b600:	eba3 0c02 	sub.w	ip, r3, r2
 800b604:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b608:	1a9b      	subs	r3, r3, r2
 800b60a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b60e:	ec5b ab10 	vmov	sl, fp, d0
 800b612:	2b00      	cmp	r3, #0
 800b614:	bfce      	itee	gt
 800b616:	463a      	movgt	r2, r7
 800b618:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b61c:	465a      	movle	r2, fp
 800b61e:	4659      	mov	r1, fp
 800b620:	463d      	mov	r5, r7
 800b622:	bfd4      	ite	le
 800b624:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800b628:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800b62c:	4630      	mov	r0, r6
 800b62e:	ee10 2a10 	vmov	r2, s0
 800b632:	460b      	mov	r3, r1
 800b634:	4629      	mov	r1, r5
 800b636:	f7f5 f909 	bl	800084c <__aeabi_ddiv>
 800b63a:	ec41 0b10 	vmov	d0, r0, r1
 800b63e:	b003      	add	sp, #12
 800b640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b644 <__copybits>:
 800b644:	3901      	subs	r1, #1
 800b646:	b510      	push	{r4, lr}
 800b648:	1149      	asrs	r1, r1, #5
 800b64a:	6914      	ldr	r4, [r2, #16]
 800b64c:	3101      	adds	r1, #1
 800b64e:	f102 0314 	add.w	r3, r2, #20
 800b652:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b656:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b65a:	42a3      	cmp	r3, r4
 800b65c:	4602      	mov	r2, r0
 800b65e:	d303      	bcc.n	800b668 <__copybits+0x24>
 800b660:	2300      	movs	r3, #0
 800b662:	428a      	cmp	r2, r1
 800b664:	d305      	bcc.n	800b672 <__copybits+0x2e>
 800b666:	bd10      	pop	{r4, pc}
 800b668:	f853 2b04 	ldr.w	r2, [r3], #4
 800b66c:	f840 2b04 	str.w	r2, [r0], #4
 800b670:	e7f3      	b.n	800b65a <__copybits+0x16>
 800b672:	f842 3b04 	str.w	r3, [r2], #4
 800b676:	e7f4      	b.n	800b662 <__copybits+0x1e>

0800b678 <__any_on>:
 800b678:	f100 0214 	add.w	r2, r0, #20
 800b67c:	6900      	ldr	r0, [r0, #16]
 800b67e:	114b      	asrs	r3, r1, #5
 800b680:	4298      	cmp	r0, r3
 800b682:	b510      	push	{r4, lr}
 800b684:	db11      	blt.n	800b6aa <__any_on+0x32>
 800b686:	dd0a      	ble.n	800b69e <__any_on+0x26>
 800b688:	f011 011f 	ands.w	r1, r1, #31
 800b68c:	d007      	beq.n	800b69e <__any_on+0x26>
 800b68e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b692:	fa24 f001 	lsr.w	r0, r4, r1
 800b696:	fa00 f101 	lsl.w	r1, r0, r1
 800b69a:	428c      	cmp	r4, r1
 800b69c:	d10b      	bne.n	800b6b6 <__any_on+0x3e>
 800b69e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d803      	bhi.n	800b6ae <__any_on+0x36>
 800b6a6:	2000      	movs	r0, #0
 800b6a8:	bd10      	pop	{r4, pc}
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	e7f7      	b.n	800b69e <__any_on+0x26>
 800b6ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b6b2:	2900      	cmp	r1, #0
 800b6b4:	d0f5      	beq.n	800b6a2 <__any_on+0x2a>
 800b6b6:	2001      	movs	r0, #1
 800b6b8:	e7f6      	b.n	800b6a8 <__any_on+0x30>

0800b6ba <_calloc_r>:
 800b6ba:	b538      	push	{r3, r4, r5, lr}
 800b6bc:	fb02 f401 	mul.w	r4, r2, r1
 800b6c0:	4621      	mov	r1, r4
 800b6c2:	f000 f857 	bl	800b774 <_malloc_r>
 800b6c6:	4605      	mov	r5, r0
 800b6c8:	b118      	cbz	r0, 800b6d2 <_calloc_r+0x18>
 800b6ca:	4622      	mov	r2, r4
 800b6cc:	2100      	movs	r1, #0
 800b6ce:	f7fc fc5c 	bl	8007f8a <memset>
 800b6d2:	4628      	mov	r0, r5
 800b6d4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b6d8 <_free_r>:
 800b6d8:	b538      	push	{r3, r4, r5, lr}
 800b6da:	4605      	mov	r5, r0
 800b6dc:	2900      	cmp	r1, #0
 800b6de:	d045      	beq.n	800b76c <_free_r+0x94>
 800b6e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6e4:	1f0c      	subs	r4, r1, #4
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	bfb8      	it	lt
 800b6ea:	18e4      	addlt	r4, r4, r3
 800b6ec:	f000 fdc3 	bl	800c276 <__malloc_lock>
 800b6f0:	4a1f      	ldr	r2, [pc, #124]	; (800b770 <_free_r+0x98>)
 800b6f2:	6813      	ldr	r3, [r2, #0]
 800b6f4:	4610      	mov	r0, r2
 800b6f6:	b933      	cbnz	r3, 800b706 <_free_r+0x2e>
 800b6f8:	6063      	str	r3, [r4, #4]
 800b6fa:	6014      	str	r4, [r2, #0]
 800b6fc:	4628      	mov	r0, r5
 800b6fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b702:	f000 bdb9 	b.w	800c278 <__malloc_unlock>
 800b706:	42a3      	cmp	r3, r4
 800b708:	d90c      	bls.n	800b724 <_free_r+0x4c>
 800b70a:	6821      	ldr	r1, [r4, #0]
 800b70c:	1862      	adds	r2, r4, r1
 800b70e:	4293      	cmp	r3, r2
 800b710:	bf04      	itt	eq
 800b712:	681a      	ldreq	r2, [r3, #0]
 800b714:	685b      	ldreq	r3, [r3, #4]
 800b716:	6063      	str	r3, [r4, #4]
 800b718:	bf04      	itt	eq
 800b71a:	1852      	addeq	r2, r2, r1
 800b71c:	6022      	streq	r2, [r4, #0]
 800b71e:	6004      	str	r4, [r0, #0]
 800b720:	e7ec      	b.n	800b6fc <_free_r+0x24>
 800b722:	4613      	mov	r3, r2
 800b724:	685a      	ldr	r2, [r3, #4]
 800b726:	b10a      	cbz	r2, 800b72c <_free_r+0x54>
 800b728:	42a2      	cmp	r2, r4
 800b72a:	d9fa      	bls.n	800b722 <_free_r+0x4a>
 800b72c:	6819      	ldr	r1, [r3, #0]
 800b72e:	1858      	adds	r0, r3, r1
 800b730:	42a0      	cmp	r0, r4
 800b732:	d10b      	bne.n	800b74c <_free_r+0x74>
 800b734:	6820      	ldr	r0, [r4, #0]
 800b736:	4401      	add	r1, r0
 800b738:	1858      	adds	r0, r3, r1
 800b73a:	4282      	cmp	r2, r0
 800b73c:	6019      	str	r1, [r3, #0]
 800b73e:	d1dd      	bne.n	800b6fc <_free_r+0x24>
 800b740:	6810      	ldr	r0, [r2, #0]
 800b742:	6852      	ldr	r2, [r2, #4]
 800b744:	605a      	str	r2, [r3, #4]
 800b746:	4401      	add	r1, r0
 800b748:	6019      	str	r1, [r3, #0]
 800b74a:	e7d7      	b.n	800b6fc <_free_r+0x24>
 800b74c:	d902      	bls.n	800b754 <_free_r+0x7c>
 800b74e:	230c      	movs	r3, #12
 800b750:	602b      	str	r3, [r5, #0]
 800b752:	e7d3      	b.n	800b6fc <_free_r+0x24>
 800b754:	6820      	ldr	r0, [r4, #0]
 800b756:	1821      	adds	r1, r4, r0
 800b758:	428a      	cmp	r2, r1
 800b75a:	bf04      	itt	eq
 800b75c:	6811      	ldreq	r1, [r2, #0]
 800b75e:	6852      	ldreq	r2, [r2, #4]
 800b760:	6062      	str	r2, [r4, #4]
 800b762:	bf04      	itt	eq
 800b764:	1809      	addeq	r1, r1, r0
 800b766:	6021      	streq	r1, [r4, #0]
 800b768:	605c      	str	r4, [r3, #4]
 800b76a:	e7c7      	b.n	800b6fc <_free_r+0x24>
 800b76c:	bd38      	pop	{r3, r4, r5, pc}
 800b76e:	bf00      	nop
 800b770:	20000240 	.word	0x20000240

0800b774 <_malloc_r>:
 800b774:	b570      	push	{r4, r5, r6, lr}
 800b776:	1ccd      	adds	r5, r1, #3
 800b778:	f025 0503 	bic.w	r5, r5, #3
 800b77c:	3508      	adds	r5, #8
 800b77e:	2d0c      	cmp	r5, #12
 800b780:	bf38      	it	cc
 800b782:	250c      	movcc	r5, #12
 800b784:	2d00      	cmp	r5, #0
 800b786:	4606      	mov	r6, r0
 800b788:	db01      	blt.n	800b78e <_malloc_r+0x1a>
 800b78a:	42a9      	cmp	r1, r5
 800b78c:	d903      	bls.n	800b796 <_malloc_r+0x22>
 800b78e:	230c      	movs	r3, #12
 800b790:	6033      	str	r3, [r6, #0]
 800b792:	2000      	movs	r0, #0
 800b794:	bd70      	pop	{r4, r5, r6, pc}
 800b796:	f000 fd6e 	bl	800c276 <__malloc_lock>
 800b79a:	4a21      	ldr	r2, [pc, #132]	; (800b820 <_malloc_r+0xac>)
 800b79c:	6814      	ldr	r4, [r2, #0]
 800b79e:	4621      	mov	r1, r4
 800b7a0:	b991      	cbnz	r1, 800b7c8 <_malloc_r+0x54>
 800b7a2:	4c20      	ldr	r4, [pc, #128]	; (800b824 <_malloc_r+0xb0>)
 800b7a4:	6823      	ldr	r3, [r4, #0]
 800b7a6:	b91b      	cbnz	r3, 800b7b0 <_malloc_r+0x3c>
 800b7a8:	4630      	mov	r0, r6
 800b7aa:	f000 facf 	bl	800bd4c <_sbrk_r>
 800b7ae:	6020      	str	r0, [r4, #0]
 800b7b0:	4629      	mov	r1, r5
 800b7b2:	4630      	mov	r0, r6
 800b7b4:	f000 faca 	bl	800bd4c <_sbrk_r>
 800b7b8:	1c43      	adds	r3, r0, #1
 800b7ba:	d124      	bne.n	800b806 <_malloc_r+0x92>
 800b7bc:	230c      	movs	r3, #12
 800b7be:	6033      	str	r3, [r6, #0]
 800b7c0:	4630      	mov	r0, r6
 800b7c2:	f000 fd59 	bl	800c278 <__malloc_unlock>
 800b7c6:	e7e4      	b.n	800b792 <_malloc_r+0x1e>
 800b7c8:	680b      	ldr	r3, [r1, #0]
 800b7ca:	1b5b      	subs	r3, r3, r5
 800b7cc:	d418      	bmi.n	800b800 <_malloc_r+0x8c>
 800b7ce:	2b0b      	cmp	r3, #11
 800b7d0:	d90f      	bls.n	800b7f2 <_malloc_r+0x7e>
 800b7d2:	600b      	str	r3, [r1, #0]
 800b7d4:	50cd      	str	r5, [r1, r3]
 800b7d6:	18cc      	adds	r4, r1, r3
 800b7d8:	4630      	mov	r0, r6
 800b7da:	f000 fd4d 	bl	800c278 <__malloc_unlock>
 800b7de:	f104 000b 	add.w	r0, r4, #11
 800b7e2:	1d23      	adds	r3, r4, #4
 800b7e4:	f020 0007 	bic.w	r0, r0, #7
 800b7e8:	1ac3      	subs	r3, r0, r3
 800b7ea:	d0d3      	beq.n	800b794 <_malloc_r+0x20>
 800b7ec:	425a      	negs	r2, r3
 800b7ee:	50e2      	str	r2, [r4, r3]
 800b7f0:	e7d0      	b.n	800b794 <_malloc_r+0x20>
 800b7f2:	428c      	cmp	r4, r1
 800b7f4:	684b      	ldr	r3, [r1, #4]
 800b7f6:	bf16      	itet	ne
 800b7f8:	6063      	strne	r3, [r4, #4]
 800b7fa:	6013      	streq	r3, [r2, #0]
 800b7fc:	460c      	movne	r4, r1
 800b7fe:	e7eb      	b.n	800b7d8 <_malloc_r+0x64>
 800b800:	460c      	mov	r4, r1
 800b802:	6849      	ldr	r1, [r1, #4]
 800b804:	e7cc      	b.n	800b7a0 <_malloc_r+0x2c>
 800b806:	1cc4      	adds	r4, r0, #3
 800b808:	f024 0403 	bic.w	r4, r4, #3
 800b80c:	42a0      	cmp	r0, r4
 800b80e:	d005      	beq.n	800b81c <_malloc_r+0xa8>
 800b810:	1a21      	subs	r1, r4, r0
 800b812:	4630      	mov	r0, r6
 800b814:	f000 fa9a 	bl	800bd4c <_sbrk_r>
 800b818:	3001      	adds	r0, #1
 800b81a:	d0cf      	beq.n	800b7bc <_malloc_r+0x48>
 800b81c:	6025      	str	r5, [r4, #0]
 800b81e:	e7db      	b.n	800b7d8 <_malloc_r+0x64>
 800b820:	20000240 	.word	0x20000240
 800b824:	20000244 	.word	0x20000244

0800b828 <__ssputs_r>:
 800b828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b82c:	688e      	ldr	r6, [r1, #8]
 800b82e:	429e      	cmp	r6, r3
 800b830:	4682      	mov	sl, r0
 800b832:	460c      	mov	r4, r1
 800b834:	4690      	mov	r8, r2
 800b836:	4699      	mov	r9, r3
 800b838:	d837      	bhi.n	800b8aa <__ssputs_r+0x82>
 800b83a:	898a      	ldrh	r2, [r1, #12]
 800b83c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b840:	d031      	beq.n	800b8a6 <__ssputs_r+0x7e>
 800b842:	6825      	ldr	r5, [r4, #0]
 800b844:	6909      	ldr	r1, [r1, #16]
 800b846:	1a6f      	subs	r7, r5, r1
 800b848:	6965      	ldr	r5, [r4, #20]
 800b84a:	2302      	movs	r3, #2
 800b84c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b850:	fb95 f5f3 	sdiv	r5, r5, r3
 800b854:	f109 0301 	add.w	r3, r9, #1
 800b858:	443b      	add	r3, r7
 800b85a:	429d      	cmp	r5, r3
 800b85c:	bf38      	it	cc
 800b85e:	461d      	movcc	r5, r3
 800b860:	0553      	lsls	r3, r2, #21
 800b862:	d530      	bpl.n	800b8c6 <__ssputs_r+0x9e>
 800b864:	4629      	mov	r1, r5
 800b866:	f7ff ff85 	bl	800b774 <_malloc_r>
 800b86a:	4606      	mov	r6, r0
 800b86c:	b950      	cbnz	r0, 800b884 <__ssputs_r+0x5c>
 800b86e:	230c      	movs	r3, #12
 800b870:	f8ca 3000 	str.w	r3, [sl]
 800b874:	89a3      	ldrh	r3, [r4, #12]
 800b876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b87a:	81a3      	strh	r3, [r4, #12]
 800b87c:	f04f 30ff 	mov.w	r0, #4294967295
 800b880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b884:	463a      	mov	r2, r7
 800b886:	6921      	ldr	r1, [r4, #16]
 800b888:	f7fc fb74 	bl	8007f74 <memcpy>
 800b88c:	89a3      	ldrh	r3, [r4, #12]
 800b88e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b896:	81a3      	strh	r3, [r4, #12]
 800b898:	6126      	str	r6, [r4, #16]
 800b89a:	6165      	str	r5, [r4, #20]
 800b89c:	443e      	add	r6, r7
 800b89e:	1bed      	subs	r5, r5, r7
 800b8a0:	6026      	str	r6, [r4, #0]
 800b8a2:	60a5      	str	r5, [r4, #8]
 800b8a4:	464e      	mov	r6, r9
 800b8a6:	454e      	cmp	r6, r9
 800b8a8:	d900      	bls.n	800b8ac <__ssputs_r+0x84>
 800b8aa:	464e      	mov	r6, r9
 800b8ac:	4632      	mov	r2, r6
 800b8ae:	4641      	mov	r1, r8
 800b8b0:	6820      	ldr	r0, [r4, #0]
 800b8b2:	f000 fcc7 	bl	800c244 <memmove>
 800b8b6:	68a3      	ldr	r3, [r4, #8]
 800b8b8:	1b9b      	subs	r3, r3, r6
 800b8ba:	60a3      	str	r3, [r4, #8]
 800b8bc:	6823      	ldr	r3, [r4, #0]
 800b8be:	441e      	add	r6, r3
 800b8c0:	6026      	str	r6, [r4, #0]
 800b8c2:	2000      	movs	r0, #0
 800b8c4:	e7dc      	b.n	800b880 <__ssputs_r+0x58>
 800b8c6:	462a      	mov	r2, r5
 800b8c8:	f000 fcd7 	bl	800c27a <_realloc_r>
 800b8cc:	4606      	mov	r6, r0
 800b8ce:	2800      	cmp	r0, #0
 800b8d0:	d1e2      	bne.n	800b898 <__ssputs_r+0x70>
 800b8d2:	6921      	ldr	r1, [r4, #16]
 800b8d4:	4650      	mov	r0, sl
 800b8d6:	f7ff feff 	bl	800b6d8 <_free_r>
 800b8da:	e7c8      	b.n	800b86e <__ssputs_r+0x46>

0800b8dc <_svfiprintf_r>:
 800b8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8e0:	461d      	mov	r5, r3
 800b8e2:	898b      	ldrh	r3, [r1, #12]
 800b8e4:	061f      	lsls	r7, r3, #24
 800b8e6:	b09d      	sub	sp, #116	; 0x74
 800b8e8:	4680      	mov	r8, r0
 800b8ea:	460c      	mov	r4, r1
 800b8ec:	4616      	mov	r6, r2
 800b8ee:	d50f      	bpl.n	800b910 <_svfiprintf_r+0x34>
 800b8f0:	690b      	ldr	r3, [r1, #16]
 800b8f2:	b96b      	cbnz	r3, 800b910 <_svfiprintf_r+0x34>
 800b8f4:	2140      	movs	r1, #64	; 0x40
 800b8f6:	f7ff ff3d 	bl	800b774 <_malloc_r>
 800b8fa:	6020      	str	r0, [r4, #0]
 800b8fc:	6120      	str	r0, [r4, #16]
 800b8fe:	b928      	cbnz	r0, 800b90c <_svfiprintf_r+0x30>
 800b900:	230c      	movs	r3, #12
 800b902:	f8c8 3000 	str.w	r3, [r8]
 800b906:	f04f 30ff 	mov.w	r0, #4294967295
 800b90a:	e0c8      	b.n	800ba9e <_svfiprintf_r+0x1c2>
 800b90c:	2340      	movs	r3, #64	; 0x40
 800b90e:	6163      	str	r3, [r4, #20]
 800b910:	2300      	movs	r3, #0
 800b912:	9309      	str	r3, [sp, #36]	; 0x24
 800b914:	2320      	movs	r3, #32
 800b916:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b91a:	2330      	movs	r3, #48	; 0x30
 800b91c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b920:	9503      	str	r5, [sp, #12]
 800b922:	f04f 0b01 	mov.w	fp, #1
 800b926:	4637      	mov	r7, r6
 800b928:	463d      	mov	r5, r7
 800b92a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b92e:	b10b      	cbz	r3, 800b934 <_svfiprintf_r+0x58>
 800b930:	2b25      	cmp	r3, #37	; 0x25
 800b932:	d13e      	bne.n	800b9b2 <_svfiprintf_r+0xd6>
 800b934:	ebb7 0a06 	subs.w	sl, r7, r6
 800b938:	d00b      	beq.n	800b952 <_svfiprintf_r+0x76>
 800b93a:	4653      	mov	r3, sl
 800b93c:	4632      	mov	r2, r6
 800b93e:	4621      	mov	r1, r4
 800b940:	4640      	mov	r0, r8
 800b942:	f7ff ff71 	bl	800b828 <__ssputs_r>
 800b946:	3001      	adds	r0, #1
 800b948:	f000 80a4 	beq.w	800ba94 <_svfiprintf_r+0x1b8>
 800b94c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b94e:	4453      	add	r3, sl
 800b950:	9309      	str	r3, [sp, #36]	; 0x24
 800b952:	783b      	ldrb	r3, [r7, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	f000 809d 	beq.w	800ba94 <_svfiprintf_r+0x1b8>
 800b95a:	2300      	movs	r3, #0
 800b95c:	f04f 32ff 	mov.w	r2, #4294967295
 800b960:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b964:	9304      	str	r3, [sp, #16]
 800b966:	9307      	str	r3, [sp, #28]
 800b968:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b96c:	931a      	str	r3, [sp, #104]	; 0x68
 800b96e:	462f      	mov	r7, r5
 800b970:	2205      	movs	r2, #5
 800b972:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b976:	4850      	ldr	r0, [pc, #320]	; (800bab8 <_svfiprintf_r+0x1dc>)
 800b978:	f7f4 fc32 	bl	80001e0 <memchr>
 800b97c:	9b04      	ldr	r3, [sp, #16]
 800b97e:	b9d0      	cbnz	r0, 800b9b6 <_svfiprintf_r+0xda>
 800b980:	06d9      	lsls	r1, r3, #27
 800b982:	bf44      	itt	mi
 800b984:	2220      	movmi	r2, #32
 800b986:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b98a:	071a      	lsls	r2, r3, #28
 800b98c:	bf44      	itt	mi
 800b98e:	222b      	movmi	r2, #43	; 0x2b
 800b990:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b994:	782a      	ldrb	r2, [r5, #0]
 800b996:	2a2a      	cmp	r2, #42	; 0x2a
 800b998:	d015      	beq.n	800b9c6 <_svfiprintf_r+0xea>
 800b99a:	9a07      	ldr	r2, [sp, #28]
 800b99c:	462f      	mov	r7, r5
 800b99e:	2000      	movs	r0, #0
 800b9a0:	250a      	movs	r5, #10
 800b9a2:	4639      	mov	r1, r7
 800b9a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9a8:	3b30      	subs	r3, #48	; 0x30
 800b9aa:	2b09      	cmp	r3, #9
 800b9ac:	d94d      	bls.n	800ba4a <_svfiprintf_r+0x16e>
 800b9ae:	b1b8      	cbz	r0, 800b9e0 <_svfiprintf_r+0x104>
 800b9b0:	e00f      	b.n	800b9d2 <_svfiprintf_r+0xf6>
 800b9b2:	462f      	mov	r7, r5
 800b9b4:	e7b8      	b.n	800b928 <_svfiprintf_r+0x4c>
 800b9b6:	4a40      	ldr	r2, [pc, #256]	; (800bab8 <_svfiprintf_r+0x1dc>)
 800b9b8:	1a80      	subs	r0, r0, r2
 800b9ba:	fa0b f000 	lsl.w	r0, fp, r0
 800b9be:	4318      	orrs	r0, r3
 800b9c0:	9004      	str	r0, [sp, #16]
 800b9c2:	463d      	mov	r5, r7
 800b9c4:	e7d3      	b.n	800b96e <_svfiprintf_r+0x92>
 800b9c6:	9a03      	ldr	r2, [sp, #12]
 800b9c8:	1d11      	adds	r1, r2, #4
 800b9ca:	6812      	ldr	r2, [r2, #0]
 800b9cc:	9103      	str	r1, [sp, #12]
 800b9ce:	2a00      	cmp	r2, #0
 800b9d0:	db01      	blt.n	800b9d6 <_svfiprintf_r+0xfa>
 800b9d2:	9207      	str	r2, [sp, #28]
 800b9d4:	e004      	b.n	800b9e0 <_svfiprintf_r+0x104>
 800b9d6:	4252      	negs	r2, r2
 800b9d8:	f043 0302 	orr.w	r3, r3, #2
 800b9dc:	9207      	str	r2, [sp, #28]
 800b9de:	9304      	str	r3, [sp, #16]
 800b9e0:	783b      	ldrb	r3, [r7, #0]
 800b9e2:	2b2e      	cmp	r3, #46	; 0x2e
 800b9e4:	d10c      	bne.n	800ba00 <_svfiprintf_r+0x124>
 800b9e6:	787b      	ldrb	r3, [r7, #1]
 800b9e8:	2b2a      	cmp	r3, #42	; 0x2a
 800b9ea:	d133      	bne.n	800ba54 <_svfiprintf_r+0x178>
 800b9ec:	9b03      	ldr	r3, [sp, #12]
 800b9ee:	1d1a      	adds	r2, r3, #4
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	9203      	str	r2, [sp, #12]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	bfb8      	it	lt
 800b9f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b9fc:	3702      	adds	r7, #2
 800b9fe:	9305      	str	r3, [sp, #20]
 800ba00:	4d2e      	ldr	r5, [pc, #184]	; (800babc <_svfiprintf_r+0x1e0>)
 800ba02:	7839      	ldrb	r1, [r7, #0]
 800ba04:	2203      	movs	r2, #3
 800ba06:	4628      	mov	r0, r5
 800ba08:	f7f4 fbea 	bl	80001e0 <memchr>
 800ba0c:	b138      	cbz	r0, 800ba1e <_svfiprintf_r+0x142>
 800ba0e:	2340      	movs	r3, #64	; 0x40
 800ba10:	1b40      	subs	r0, r0, r5
 800ba12:	fa03 f000 	lsl.w	r0, r3, r0
 800ba16:	9b04      	ldr	r3, [sp, #16]
 800ba18:	4303      	orrs	r3, r0
 800ba1a:	3701      	adds	r7, #1
 800ba1c:	9304      	str	r3, [sp, #16]
 800ba1e:	7839      	ldrb	r1, [r7, #0]
 800ba20:	4827      	ldr	r0, [pc, #156]	; (800bac0 <_svfiprintf_r+0x1e4>)
 800ba22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba26:	2206      	movs	r2, #6
 800ba28:	1c7e      	adds	r6, r7, #1
 800ba2a:	f7f4 fbd9 	bl	80001e0 <memchr>
 800ba2e:	2800      	cmp	r0, #0
 800ba30:	d038      	beq.n	800baa4 <_svfiprintf_r+0x1c8>
 800ba32:	4b24      	ldr	r3, [pc, #144]	; (800bac4 <_svfiprintf_r+0x1e8>)
 800ba34:	bb13      	cbnz	r3, 800ba7c <_svfiprintf_r+0x1a0>
 800ba36:	9b03      	ldr	r3, [sp, #12]
 800ba38:	3307      	adds	r3, #7
 800ba3a:	f023 0307 	bic.w	r3, r3, #7
 800ba3e:	3308      	adds	r3, #8
 800ba40:	9303      	str	r3, [sp, #12]
 800ba42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba44:	444b      	add	r3, r9
 800ba46:	9309      	str	r3, [sp, #36]	; 0x24
 800ba48:	e76d      	b.n	800b926 <_svfiprintf_r+0x4a>
 800ba4a:	fb05 3202 	mla	r2, r5, r2, r3
 800ba4e:	2001      	movs	r0, #1
 800ba50:	460f      	mov	r7, r1
 800ba52:	e7a6      	b.n	800b9a2 <_svfiprintf_r+0xc6>
 800ba54:	2300      	movs	r3, #0
 800ba56:	3701      	adds	r7, #1
 800ba58:	9305      	str	r3, [sp, #20]
 800ba5a:	4619      	mov	r1, r3
 800ba5c:	250a      	movs	r5, #10
 800ba5e:	4638      	mov	r0, r7
 800ba60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba64:	3a30      	subs	r2, #48	; 0x30
 800ba66:	2a09      	cmp	r2, #9
 800ba68:	d903      	bls.n	800ba72 <_svfiprintf_r+0x196>
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d0c8      	beq.n	800ba00 <_svfiprintf_r+0x124>
 800ba6e:	9105      	str	r1, [sp, #20]
 800ba70:	e7c6      	b.n	800ba00 <_svfiprintf_r+0x124>
 800ba72:	fb05 2101 	mla	r1, r5, r1, r2
 800ba76:	2301      	movs	r3, #1
 800ba78:	4607      	mov	r7, r0
 800ba7a:	e7f0      	b.n	800ba5e <_svfiprintf_r+0x182>
 800ba7c:	ab03      	add	r3, sp, #12
 800ba7e:	9300      	str	r3, [sp, #0]
 800ba80:	4622      	mov	r2, r4
 800ba82:	4b11      	ldr	r3, [pc, #68]	; (800bac8 <_svfiprintf_r+0x1ec>)
 800ba84:	a904      	add	r1, sp, #16
 800ba86:	4640      	mov	r0, r8
 800ba88:	f7fc fb1c 	bl	80080c4 <_printf_float>
 800ba8c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ba90:	4681      	mov	r9, r0
 800ba92:	d1d6      	bne.n	800ba42 <_svfiprintf_r+0x166>
 800ba94:	89a3      	ldrh	r3, [r4, #12]
 800ba96:	065b      	lsls	r3, r3, #25
 800ba98:	f53f af35 	bmi.w	800b906 <_svfiprintf_r+0x2a>
 800ba9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba9e:	b01d      	add	sp, #116	; 0x74
 800baa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baa4:	ab03      	add	r3, sp, #12
 800baa6:	9300      	str	r3, [sp, #0]
 800baa8:	4622      	mov	r2, r4
 800baaa:	4b07      	ldr	r3, [pc, #28]	; (800bac8 <_svfiprintf_r+0x1ec>)
 800baac:	a904      	add	r1, sp, #16
 800baae:	4640      	mov	r0, r8
 800bab0:	f7fc fdbe 	bl	8008630 <_printf_i>
 800bab4:	e7ea      	b.n	800ba8c <_svfiprintf_r+0x1b0>
 800bab6:	bf00      	nop
 800bab8:	0800c61c 	.word	0x0800c61c
 800babc:	0800c622 	.word	0x0800c622
 800bac0:	0800c626 	.word	0x0800c626
 800bac4:	080080c5 	.word	0x080080c5
 800bac8:	0800b829 	.word	0x0800b829

0800bacc <__sfputc_r>:
 800bacc:	6893      	ldr	r3, [r2, #8]
 800bace:	3b01      	subs	r3, #1
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	b410      	push	{r4}
 800bad4:	6093      	str	r3, [r2, #8]
 800bad6:	da08      	bge.n	800baea <__sfputc_r+0x1e>
 800bad8:	6994      	ldr	r4, [r2, #24]
 800bada:	42a3      	cmp	r3, r4
 800badc:	db01      	blt.n	800bae2 <__sfputc_r+0x16>
 800bade:	290a      	cmp	r1, #10
 800bae0:	d103      	bne.n	800baea <__sfputc_r+0x1e>
 800bae2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bae6:	f000 b997 	b.w	800be18 <__swbuf_r>
 800baea:	6813      	ldr	r3, [r2, #0]
 800baec:	1c58      	adds	r0, r3, #1
 800baee:	6010      	str	r0, [r2, #0]
 800baf0:	7019      	strb	r1, [r3, #0]
 800baf2:	4608      	mov	r0, r1
 800baf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800baf8:	4770      	bx	lr

0800bafa <__sfputs_r>:
 800bafa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bafc:	4606      	mov	r6, r0
 800bafe:	460f      	mov	r7, r1
 800bb00:	4614      	mov	r4, r2
 800bb02:	18d5      	adds	r5, r2, r3
 800bb04:	42ac      	cmp	r4, r5
 800bb06:	d101      	bne.n	800bb0c <__sfputs_r+0x12>
 800bb08:	2000      	movs	r0, #0
 800bb0a:	e007      	b.n	800bb1c <__sfputs_r+0x22>
 800bb0c:	463a      	mov	r2, r7
 800bb0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb12:	4630      	mov	r0, r6
 800bb14:	f7ff ffda 	bl	800bacc <__sfputc_r>
 800bb18:	1c43      	adds	r3, r0, #1
 800bb1a:	d1f3      	bne.n	800bb04 <__sfputs_r+0xa>
 800bb1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb20 <_vfiprintf_r>:
 800bb20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb24:	460c      	mov	r4, r1
 800bb26:	b09d      	sub	sp, #116	; 0x74
 800bb28:	4617      	mov	r7, r2
 800bb2a:	461d      	mov	r5, r3
 800bb2c:	4606      	mov	r6, r0
 800bb2e:	b118      	cbz	r0, 800bb38 <_vfiprintf_r+0x18>
 800bb30:	6983      	ldr	r3, [r0, #24]
 800bb32:	b90b      	cbnz	r3, 800bb38 <_vfiprintf_r+0x18>
 800bb34:	f7fe fde4 	bl	800a700 <__sinit>
 800bb38:	4b7c      	ldr	r3, [pc, #496]	; (800bd2c <_vfiprintf_r+0x20c>)
 800bb3a:	429c      	cmp	r4, r3
 800bb3c:	d158      	bne.n	800bbf0 <_vfiprintf_r+0xd0>
 800bb3e:	6874      	ldr	r4, [r6, #4]
 800bb40:	89a3      	ldrh	r3, [r4, #12]
 800bb42:	0718      	lsls	r0, r3, #28
 800bb44:	d55e      	bpl.n	800bc04 <_vfiprintf_r+0xe4>
 800bb46:	6923      	ldr	r3, [r4, #16]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d05b      	beq.n	800bc04 <_vfiprintf_r+0xe4>
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	9309      	str	r3, [sp, #36]	; 0x24
 800bb50:	2320      	movs	r3, #32
 800bb52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb56:	2330      	movs	r3, #48	; 0x30
 800bb58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb5c:	9503      	str	r5, [sp, #12]
 800bb5e:	f04f 0b01 	mov.w	fp, #1
 800bb62:	46b8      	mov	r8, r7
 800bb64:	4645      	mov	r5, r8
 800bb66:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bb6a:	b10b      	cbz	r3, 800bb70 <_vfiprintf_r+0x50>
 800bb6c:	2b25      	cmp	r3, #37	; 0x25
 800bb6e:	d154      	bne.n	800bc1a <_vfiprintf_r+0xfa>
 800bb70:	ebb8 0a07 	subs.w	sl, r8, r7
 800bb74:	d00b      	beq.n	800bb8e <_vfiprintf_r+0x6e>
 800bb76:	4653      	mov	r3, sl
 800bb78:	463a      	mov	r2, r7
 800bb7a:	4621      	mov	r1, r4
 800bb7c:	4630      	mov	r0, r6
 800bb7e:	f7ff ffbc 	bl	800bafa <__sfputs_r>
 800bb82:	3001      	adds	r0, #1
 800bb84:	f000 80c2 	beq.w	800bd0c <_vfiprintf_r+0x1ec>
 800bb88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb8a:	4453      	add	r3, sl
 800bb8c:	9309      	str	r3, [sp, #36]	; 0x24
 800bb8e:	f898 3000 	ldrb.w	r3, [r8]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	f000 80ba 	beq.w	800bd0c <_vfiprintf_r+0x1ec>
 800bb98:	2300      	movs	r3, #0
 800bb9a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bba2:	9304      	str	r3, [sp, #16]
 800bba4:	9307      	str	r3, [sp, #28]
 800bba6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bbaa:	931a      	str	r3, [sp, #104]	; 0x68
 800bbac:	46a8      	mov	r8, r5
 800bbae:	2205      	movs	r2, #5
 800bbb0:	f818 1b01 	ldrb.w	r1, [r8], #1
 800bbb4:	485e      	ldr	r0, [pc, #376]	; (800bd30 <_vfiprintf_r+0x210>)
 800bbb6:	f7f4 fb13 	bl	80001e0 <memchr>
 800bbba:	9b04      	ldr	r3, [sp, #16]
 800bbbc:	bb78      	cbnz	r0, 800bc1e <_vfiprintf_r+0xfe>
 800bbbe:	06d9      	lsls	r1, r3, #27
 800bbc0:	bf44      	itt	mi
 800bbc2:	2220      	movmi	r2, #32
 800bbc4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bbc8:	071a      	lsls	r2, r3, #28
 800bbca:	bf44      	itt	mi
 800bbcc:	222b      	movmi	r2, #43	; 0x2b
 800bbce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bbd2:	782a      	ldrb	r2, [r5, #0]
 800bbd4:	2a2a      	cmp	r2, #42	; 0x2a
 800bbd6:	d02a      	beq.n	800bc2e <_vfiprintf_r+0x10e>
 800bbd8:	9a07      	ldr	r2, [sp, #28]
 800bbda:	46a8      	mov	r8, r5
 800bbdc:	2000      	movs	r0, #0
 800bbde:	250a      	movs	r5, #10
 800bbe0:	4641      	mov	r1, r8
 800bbe2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbe6:	3b30      	subs	r3, #48	; 0x30
 800bbe8:	2b09      	cmp	r3, #9
 800bbea:	d969      	bls.n	800bcc0 <_vfiprintf_r+0x1a0>
 800bbec:	b360      	cbz	r0, 800bc48 <_vfiprintf_r+0x128>
 800bbee:	e024      	b.n	800bc3a <_vfiprintf_r+0x11a>
 800bbf0:	4b50      	ldr	r3, [pc, #320]	; (800bd34 <_vfiprintf_r+0x214>)
 800bbf2:	429c      	cmp	r4, r3
 800bbf4:	d101      	bne.n	800bbfa <_vfiprintf_r+0xda>
 800bbf6:	68b4      	ldr	r4, [r6, #8]
 800bbf8:	e7a2      	b.n	800bb40 <_vfiprintf_r+0x20>
 800bbfa:	4b4f      	ldr	r3, [pc, #316]	; (800bd38 <_vfiprintf_r+0x218>)
 800bbfc:	429c      	cmp	r4, r3
 800bbfe:	bf08      	it	eq
 800bc00:	68f4      	ldreq	r4, [r6, #12]
 800bc02:	e79d      	b.n	800bb40 <_vfiprintf_r+0x20>
 800bc04:	4621      	mov	r1, r4
 800bc06:	4630      	mov	r0, r6
 800bc08:	f000 f978 	bl	800befc <__swsetup_r>
 800bc0c:	2800      	cmp	r0, #0
 800bc0e:	d09d      	beq.n	800bb4c <_vfiprintf_r+0x2c>
 800bc10:	f04f 30ff 	mov.w	r0, #4294967295
 800bc14:	b01d      	add	sp, #116	; 0x74
 800bc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc1a:	46a8      	mov	r8, r5
 800bc1c:	e7a2      	b.n	800bb64 <_vfiprintf_r+0x44>
 800bc1e:	4a44      	ldr	r2, [pc, #272]	; (800bd30 <_vfiprintf_r+0x210>)
 800bc20:	1a80      	subs	r0, r0, r2
 800bc22:	fa0b f000 	lsl.w	r0, fp, r0
 800bc26:	4318      	orrs	r0, r3
 800bc28:	9004      	str	r0, [sp, #16]
 800bc2a:	4645      	mov	r5, r8
 800bc2c:	e7be      	b.n	800bbac <_vfiprintf_r+0x8c>
 800bc2e:	9a03      	ldr	r2, [sp, #12]
 800bc30:	1d11      	adds	r1, r2, #4
 800bc32:	6812      	ldr	r2, [r2, #0]
 800bc34:	9103      	str	r1, [sp, #12]
 800bc36:	2a00      	cmp	r2, #0
 800bc38:	db01      	blt.n	800bc3e <_vfiprintf_r+0x11e>
 800bc3a:	9207      	str	r2, [sp, #28]
 800bc3c:	e004      	b.n	800bc48 <_vfiprintf_r+0x128>
 800bc3e:	4252      	negs	r2, r2
 800bc40:	f043 0302 	orr.w	r3, r3, #2
 800bc44:	9207      	str	r2, [sp, #28]
 800bc46:	9304      	str	r3, [sp, #16]
 800bc48:	f898 3000 	ldrb.w	r3, [r8]
 800bc4c:	2b2e      	cmp	r3, #46	; 0x2e
 800bc4e:	d10e      	bne.n	800bc6e <_vfiprintf_r+0x14e>
 800bc50:	f898 3001 	ldrb.w	r3, [r8, #1]
 800bc54:	2b2a      	cmp	r3, #42	; 0x2a
 800bc56:	d138      	bne.n	800bcca <_vfiprintf_r+0x1aa>
 800bc58:	9b03      	ldr	r3, [sp, #12]
 800bc5a:	1d1a      	adds	r2, r3, #4
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	9203      	str	r2, [sp, #12]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	bfb8      	it	lt
 800bc64:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc68:	f108 0802 	add.w	r8, r8, #2
 800bc6c:	9305      	str	r3, [sp, #20]
 800bc6e:	4d33      	ldr	r5, [pc, #204]	; (800bd3c <_vfiprintf_r+0x21c>)
 800bc70:	f898 1000 	ldrb.w	r1, [r8]
 800bc74:	2203      	movs	r2, #3
 800bc76:	4628      	mov	r0, r5
 800bc78:	f7f4 fab2 	bl	80001e0 <memchr>
 800bc7c:	b140      	cbz	r0, 800bc90 <_vfiprintf_r+0x170>
 800bc7e:	2340      	movs	r3, #64	; 0x40
 800bc80:	1b40      	subs	r0, r0, r5
 800bc82:	fa03 f000 	lsl.w	r0, r3, r0
 800bc86:	9b04      	ldr	r3, [sp, #16]
 800bc88:	4303      	orrs	r3, r0
 800bc8a:	f108 0801 	add.w	r8, r8, #1
 800bc8e:	9304      	str	r3, [sp, #16]
 800bc90:	f898 1000 	ldrb.w	r1, [r8]
 800bc94:	482a      	ldr	r0, [pc, #168]	; (800bd40 <_vfiprintf_r+0x220>)
 800bc96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc9a:	2206      	movs	r2, #6
 800bc9c:	f108 0701 	add.w	r7, r8, #1
 800bca0:	f7f4 fa9e 	bl	80001e0 <memchr>
 800bca4:	2800      	cmp	r0, #0
 800bca6:	d037      	beq.n	800bd18 <_vfiprintf_r+0x1f8>
 800bca8:	4b26      	ldr	r3, [pc, #152]	; (800bd44 <_vfiprintf_r+0x224>)
 800bcaa:	bb1b      	cbnz	r3, 800bcf4 <_vfiprintf_r+0x1d4>
 800bcac:	9b03      	ldr	r3, [sp, #12]
 800bcae:	3307      	adds	r3, #7
 800bcb0:	f023 0307 	bic.w	r3, r3, #7
 800bcb4:	3308      	adds	r3, #8
 800bcb6:	9303      	str	r3, [sp, #12]
 800bcb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcba:	444b      	add	r3, r9
 800bcbc:	9309      	str	r3, [sp, #36]	; 0x24
 800bcbe:	e750      	b.n	800bb62 <_vfiprintf_r+0x42>
 800bcc0:	fb05 3202 	mla	r2, r5, r2, r3
 800bcc4:	2001      	movs	r0, #1
 800bcc6:	4688      	mov	r8, r1
 800bcc8:	e78a      	b.n	800bbe0 <_vfiprintf_r+0xc0>
 800bcca:	2300      	movs	r3, #0
 800bccc:	f108 0801 	add.w	r8, r8, #1
 800bcd0:	9305      	str	r3, [sp, #20]
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	250a      	movs	r5, #10
 800bcd6:	4640      	mov	r0, r8
 800bcd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcdc:	3a30      	subs	r2, #48	; 0x30
 800bcde:	2a09      	cmp	r2, #9
 800bce0:	d903      	bls.n	800bcea <_vfiprintf_r+0x1ca>
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d0c3      	beq.n	800bc6e <_vfiprintf_r+0x14e>
 800bce6:	9105      	str	r1, [sp, #20]
 800bce8:	e7c1      	b.n	800bc6e <_vfiprintf_r+0x14e>
 800bcea:	fb05 2101 	mla	r1, r5, r1, r2
 800bcee:	2301      	movs	r3, #1
 800bcf0:	4680      	mov	r8, r0
 800bcf2:	e7f0      	b.n	800bcd6 <_vfiprintf_r+0x1b6>
 800bcf4:	ab03      	add	r3, sp, #12
 800bcf6:	9300      	str	r3, [sp, #0]
 800bcf8:	4622      	mov	r2, r4
 800bcfa:	4b13      	ldr	r3, [pc, #76]	; (800bd48 <_vfiprintf_r+0x228>)
 800bcfc:	a904      	add	r1, sp, #16
 800bcfe:	4630      	mov	r0, r6
 800bd00:	f7fc f9e0 	bl	80080c4 <_printf_float>
 800bd04:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bd08:	4681      	mov	r9, r0
 800bd0a:	d1d5      	bne.n	800bcb8 <_vfiprintf_r+0x198>
 800bd0c:	89a3      	ldrh	r3, [r4, #12]
 800bd0e:	065b      	lsls	r3, r3, #25
 800bd10:	f53f af7e 	bmi.w	800bc10 <_vfiprintf_r+0xf0>
 800bd14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd16:	e77d      	b.n	800bc14 <_vfiprintf_r+0xf4>
 800bd18:	ab03      	add	r3, sp, #12
 800bd1a:	9300      	str	r3, [sp, #0]
 800bd1c:	4622      	mov	r2, r4
 800bd1e:	4b0a      	ldr	r3, [pc, #40]	; (800bd48 <_vfiprintf_r+0x228>)
 800bd20:	a904      	add	r1, sp, #16
 800bd22:	4630      	mov	r0, r6
 800bd24:	f7fc fc84 	bl	8008630 <_printf_i>
 800bd28:	e7ec      	b.n	800bd04 <_vfiprintf_r+0x1e4>
 800bd2a:	bf00      	nop
 800bd2c:	0800c4d0 	.word	0x0800c4d0
 800bd30:	0800c61c 	.word	0x0800c61c
 800bd34:	0800c4f0 	.word	0x0800c4f0
 800bd38:	0800c4b0 	.word	0x0800c4b0
 800bd3c:	0800c622 	.word	0x0800c622
 800bd40:	0800c626 	.word	0x0800c626
 800bd44:	080080c5 	.word	0x080080c5
 800bd48:	0800bafb 	.word	0x0800bafb

0800bd4c <_sbrk_r>:
 800bd4c:	b538      	push	{r3, r4, r5, lr}
 800bd4e:	4c06      	ldr	r4, [pc, #24]	; (800bd68 <_sbrk_r+0x1c>)
 800bd50:	2300      	movs	r3, #0
 800bd52:	4605      	mov	r5, r0
 800bd54:	4608      	mov	r0, r1
 800bd56:	6023      	str	r3, [r4, #0]
 800bd58:	f7f6 fb04 	bl	8002364 <_sbrk>
 800bd5c:	1c43      	adds	r3, r0, #1
 800bd5e:	d102      	bne.n	800bd66 <_sbrk_r+0x1a>
 800bd60:	6823      	ldr	r3, [r4, #0]
 800bd62:	b103      	cbz	r3, 800bd66 <_sbrk_r+0x1a>
 800bd64:	602b      	str	r3, [r5, #0]
 800bd66:	bd38      	pop	{r3, r4, r5, pc}
 800bd68:	200009b4 	.word	0x200009b4

0800bd6c <__sread>:
 800bd6c:	b510      	push	{r4, lr}
 800bd6e:	460c      	mov	r4, r1
 800bd70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd74:	f000 faa8 	bl	800c2c8 <_read_r>
 800bd78:	2800      	cmp	r0, #0
 800bd7a:	bfab      	itete	ge
 800bd7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bd7e:	89a3      	ldrhlt	r3, [r4, #12]
 800bd80:	181b      	addge	r3, r3, r0
 800bd82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bd86:	bfac      	ite	ge
 800bd88:	6563      	strge	r3, [r4, #84]	; 0x54
 800bd8a:	81a3      	strhlt	r3, [r4, #12]
 800bd8c:	bd10      	pop	{r4, pc}

0800bd8e <__swrite>:
 800bd8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd92:	461f      	mov	r7, r3
 800bd94:	898b      	ldrh	r3, [r1, #12]
 800bd96:	05db      	lsls	r3, r3, #23
 800bd98:	4605      	mov	r5, r0
 800bd9a:	460c      	mov	r4, r1
 800bd9c:	4616      	mov	r6, r2
 800bd9e:	d505      	bpl.n	800bdac <__swrite+0x1e>
 800bda0:	2302      	movs	r3, #2
 800bda2:	2200      	movs	r2, #0
 800bda4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bda8:	f000 f9d6 	bl	800c158 <_lseek_r>
 800bdac:	89a3      	ldrh	r3, [r4, #12]
 800bdae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bdb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bdb6:	81a3      	strh	r3, [r4, #12]
 800bdb8:	4632      	mov	r2, r6
 800bdba:	463b      	mov	r3, r7
 800bdbc:	4628      	mov	r0, r5
 800bdbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bdc2:	f000 b889 	b.w	800bed8 <_write_r>

0800bdc6 <__sseek>:
 800bdc6:	b510      	push	{r4, lr}
 800bdc8:	460c      	mov	r4, r1
 800bdca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdce:	f000 f9c3 	bl	800c158 <_lseek_r>
 800bdd2:	1c43      	adds	r3, r0, #1
 800bdd4:	89a3      	ldrh	r3, [r4, #12]
 800bdd6:	bf15      	itete	ne
 800bdd8:	6560      	strne	r0, [r4, #84]	; 0x54
 800bdda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bdde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bde2:	81a3      	strheq	r3, [r4, #12]
 800bde4:	bf18      	it	ne
 800bde6:	81a3      	strhne	r3, [r4, #12]
 800bde8:	bd10      	pop	{r4, pc}

0800bdea <__sclose>:
 800bdea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdee:	f000 b8f3 	b.w	800bfd8 <_close_r>

0800bdf2 <strncmp>:
 800bdf2:	b510      	push	{r4, lr}
 800bdf4:	b16a      	cbz	r2, 800be12 <strncmp+0x20>
 800bdf6:	3901      	subs	r1, #1
 800bdf8:	1884      	adds	r4, r0, r2
 800bdfa:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bdfe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800be02:	4293      	cmp	r3, r2
 800be04:	d103      	bne.n	800be0e <strncmp+0x1c>
 800be06:	42a0      	cmp	r0, r4
 800be08:	d001      	beq.n	800be0e <strncmp+0x1c>
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d1f5      	bne.n	800bdfa <strncmp+0x8>
 800be0e:	1a98      	subs	r0, r3, r2
 800be10:	bd10      	pop	{r4, pc}
 800be12:	4610      	mov	r0, r2
 800be14:	e7fc      	b.n	800be10 <strncmp+0x1e>
	...

0800be18 <__swbuf_r>:
 800be18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be1a:	460e      	mov	r6, r1
 800be1c:	4614      	mov	r4, r2
 800be1e:	4605      	mov	r5, r0
 800be20:	b118      	cbz	r0, 800be2a <__swbuf_r+0x12>
 800be22:	6983      	ldr	r3, [r0, #24]
 800be24:	b90b      	cbnz	r3, 800be2a <__swbuf_r+0x12>
 800be26:	f7fe fc6b 	bl	800a700 <__sinit>
 800be2a:	4b21      	ldr	r3, [pc, #132]	; (800beb0 <__swbuf_r+0x98>)
 800be2c:	429c      	cmp	r4, r3
 800be2e:	d12a      	bne.n	800be86 <__swbuf_r+0x6e>
 800be30:	686c      	ldr	r4, [r5, #4]
 800be32:	69a3      	ldr	r3, [r4, #24]
 800be34:	60a3      	str	r3, [r4, #8]
 800be36:	89a3      	ldrh	r3, [r4, #12]
 800be38:	071a      	lsls	r2, r3, #28
 800be3a:	d52e      	bpl.n	800be9a <__swbuf_r+0x82>
 800be3c:	6923      	ldr	r3, [r4, #16]
 800be3e:	b363      	cbz	r3, 800be9a <__swbuf_r+0x82>
 800be40:	6923      	ldr	r3, [r4, #16]
 800be42:	6820      	ldr	r0, [r4, #0]
 800be44:	1ac0      	subs	r0, r0, r3
 800be46:	6963      	ldr	r3, [r4, #20]
 800be48:	b2f6      	uxtb	r6, r6
 800be4a:	4283      	cmp	r3, r0
 800be4c:	4637      	mov	r7, r6
 800be4e:	dc04      	bgt.n	800be5a <__swbuf_r+0x42>
 800be50:	4621      	mov	r1, r4
 800be52:	4628      	mov	r0, r5
 800be54:	f000 f956 	bl	800c104 <_fflush_r>
 800be58:	bb28      	cbnz	r0, 800bea6 <__swbuf_r+0x8e>
 800be5a:	68a3      	ldr	r3, [r4, #8]
 800be5c:	3b01      	subs	r3, #1
 800be5e:	60a3      	str	r3, [r4, #8]
 800be60:	6823      	ldr	r3, [r4, #0]
 800be62:	1c5a      	adds	r2, r3, #1
 800be64:	6022      	str	r2, [r4, #0]
 800be66:	701e      	strb	r6, [r3, #0]
 800be68:	6963      	ldr	r3, [r4, #20]
 800be6a:	3001      	adds	r0, #1
 800be6c:	4283      	cmp	r3, r0
 800be6e:	d004      	beq.n	800be7a <__swbuf_r+0x62>
 800be70:	89a3      	ldrh	r3, [r4, #12]
 800be72:	07db      	lsls	r3, r3, #31
 800be74:	d519      	bpl.n	800beaa <__swbuf_r+0x92>
 800be76:	2e0a      	cmp	r6, #10
 800be78:	d117      	bne.n	800beaa <__swbuf_r+0x92>
 800be7a:	4621      	mov	r1, r4
 800be7c:	4628      	mov	r0, r5
 800be7e:	f000 f941 	bl	800c104 <_fflush_r>
 800be82:	b190      	cbz	r0, 800beaa <__swbuf_r+0x92>
 800be84:	e00f      	b.n	800bea6 <__swbuf_r+0x8e>
 800be86:	4b0b      	ldr	r3, [pc, #44]	; (800beb4 <__swbuf_r+0x9c>)
 800be88:	429c      	cmp	r4, r3
 800be8a:	d101      	bne.n	800be90 <__swbuf_r+0x78>
 800be8c:	68ac      	ldr	r4, [r5, #8]
 800be8e:	e7d0      	b.n	800be32 <__swbuf_r+0x1a>
 800be90:	4b09      	ldr	r3, [pc, #36]	; (800beb8 <__swbuf_r+0xa0>)
 800be92:	429c      	cmp	r4, r3
 800be94:	bf08      	it	eq
 800be96:	68ec      	ldreq	r4, [r5, #12]
 800be98:	e7cb      	b.n	800be32 <__swbuf_r+0x1a>
 800be9a:	4621      	mov	r1, r4
 800be9c:	4628      	mov	r0, r5
 800be9e:	f000 f82d 	bl	800befc <__swsetup_r>
 800bea2:	2800      	cmp	r0, #0
 800bea4:	d0cc      	beq.n	800be40 <__swbuf_r+0x28>
 800bea6:	f04f 37ff 	mov.w	r7, #4294967295
 800beaa:	4638      	mov	r0, r7
 800beac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800beae:	bf00      	nop
 800beb0:	0800c4d0 	.word	0x0800c4d0
 800beb4:	0800c4f0 	.word	0x0800c4f0
 800beb8:	0800c4b0 	.word	0x0800c4b0

0800bebc <__ascii_wctomb>:
 800bebc:	b149      	cbz	r1, 800bed2 <__ascii_wctomb+0x16>
 800bebe:	2aff      	cmp	r2, #255	; 0xff
 800bec0:	bf85      	ittet	hi
 800bec2:	238a      	movhi	r3, #138	; 0x8a
 800bec4:	6003      	strhi	r3, [r0, #0]
 800bec6:	700a      	strbls	r2, [r1, #0]
 800bec8:	f04f 30ff 	movhi.w	r0, #4294967295
 800becc:	bf98      	it	ls
 800bece:	2001      	movls	r0, #1
 800bed0:	4770      	bx	lr
 800bed2:	4608      	mov	r0, r1
 800bed4:	4770      	bx	lr
	...

0800bed8 <_write_r>:
 800bed8:	b538      	push	{r3, r4, r5, lr}
 800beda:	4c07      	ldr	r4, [pc, #28]	; (800bef8 <_write_r+0x20>)
 800bedc:	4605      	mov	r5, r0
 800bede:	4608      	mov	r0, r1
 800bee0:	4611      	mov	r1, r2
 800bee2:	2200      	movs	r2, #0
 800bee4:	6022      	str	r2, [r4, #0]
 800bee6:	461a      	mov	r2, r3
 800bee8:	f7f6 f9ec 	bl	80022c4 <_write>
 800beec:	1c43      	adds	r3, r0, #1
 800beee:	d102      	bne.n	800bef6 <_write_r+0x1e>
 800bef0:	6823      	ldr	r3, [r4, #0]
 800bef2:	b103      	cbz	r3, 800bef6 <_write_r+0x1e>
 800bef4:	602b      	str	r3, [r5, #0]
 800bef6:	bd38      	pop	{r3, r4, r5, pc}
 800bef8:	200009b4 	.word	0x200009b4

0800befc <__swsetup_r>:
 800befc:	4b32      	ldr	r3, [pc, #200]	; (800bfc8 <__swsetup_r+0xcc>)
 800befe:	b570      	push	{r4, r5, r6, lr}
 800bf00:	681d      	ldr	r5, [r3, #0]
 800bf02:	4606      	mov	r6, r0
 800bf04:	460c      	mov	r4, r1
 800bf06:	b125      	cbz	r5, 800bf12 <__swsetup_r+0x16>
 800bf08:	69ab      	ldr	r3, [r5, #24]
 800bf0a:	b913      	cbnz	r3, 800bf12 <__swsetup_r+0x16>
 800bf0c:	4628      	mov	r0, r5
 800bf0e:	f7fe fbf7 	bl	800a700 <__sinit>
 800bf12:	4b2e      	ldr	r3, [pc, #184]	; (800bfcc <__swsetup_r+0xd0>)
 800bf14:	429c      	cmp	r4, r3
 800bf16:	d10f      	bne.n	800bf38 <__swsetup_r+0x3c>
 800bf18:	686c      	ldr	r4, [r5, #4]
 800bf1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf1e:	b29a      	uxth	r2, r3
 800bf20:	0715      	lsls	r5, r2, #28
 800bf22:	d42c      	bmi.n	800bf7e <__swsetup_r+0x82>
 800bf24:	06d0      	lsls	r0, r2, #27
 800bf26:	d411      	bmi.n	800bf4c <__swsetup_r+0x50>
 800bf28:	2209      	movs	r2, #9
 800bf2a:	6032      	str	r2, [r6, #0]
 800bf2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf30:	81a3      	strh	r3, [r4, #12]
 800bf32:	f04f 30ff 	mov.w	r0, #4294967295
 800bf36:	e03e      	b.n	800bfb6 <__swsetup_r+0xba>
 800bf38:	4b25      	ldr	r3, [pc, #148]	; (800bfd0 <__swsetup_r+0xd4>)
 800bf3a:	429c      	cmp	r4, r3
 800bf3c:	d101      	bne.n	800bf42 <__swsetup_r+0x46>
 800bf3e:	68ac      	ldr	r4, [r5, #8]
 800bf40:	e7eb      	b.n	800bf1a <__swsetup_r+0x1e>
 800bf42:	4b24      	ldr	r3, [pc, #144]	; (800bfd4 <__swsetup_r+0xd8>)
 800bf44:	429c      	cmp	r4, r3
 800bf46:	bf08      	it	eq
 800bf48:	68ec      	ldreq	r4, [r5, #12]
 800bf4a:	e7e6      	b.n	800bf1a <__swsetup_r+0x1e>
 800bf4c:	0751      	lsls	r1, r2, #29
 800bf4e:	d512      	bpl.n	800bf76 <__swsetup_r+0x7a>
 800bf50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf52:	b141      	cbz	r1, 800bf66 <__swsetup_r+0x6a>
 800bf54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf58:	4299      	cmp	r1, r3
 800bf5a:	d002      	beq.n	800bf62 <__swsetup_r+0x66>
 800bf5c:	4630      	mov	r0, r6
 800bf5e:	f7ff fbbb 	bl	800b6d8 <_free_r>
 800bf62:	2300      	movs	r3, #0
 800bf64:	6363      	str	r3, [r4, #52]	; 0x34
 800bf66:	89a3      	ldrh	r3, [r4, #12]
 800bf68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf6c:	81a3      	strh	r3, [r4, #12]
 800bf6e:	2300      	movs	r3, #0
 800bf70:	6063      	str	r3, [r4, #4]
 800bf72:	6923      	ldr	r3, [r4, #16]
 800bf74:	6023      	str	r3, [r4, #0]
 800bf76:	89a3      	ldrh	r3, [r4, #12]
 800bf78:	f043 0308 	orr.w	r3, r3, #8
 800bf7c:	81a3      	strh	r3, [r4, #12]
 800bf7e:	6923      	ldr	r3, [r4, #16]
 800bf80:	b94b      	cbnz	r3, 800bf96 <__swsetup_r+0x9a>
 800bf82:	89a3      	ldrh	r3, [r4, #12]
 800bf84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf8c:	d003      	beq.n	800bf96 <__swsetup_r+0x9a>
 800bf8e:	4621      	mov	r1, r4
 800bf90:	4630      	mov	r0, r6
 800bf92:	f000 f917 	bl	800c1c4 <__smakebuf_r>
 800bf96:	89a2      	ldrh	r2, [r4, #12]
 800bf98:	f012 0301 	ands.w	r3, r2, #1
 800bf9c:	d00c      	beq.n	800bfb8 <__swsetup_r+0xbc>
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	60a3      	str	r3, [r4, #8]
 800bfa2:	6963      	ldr	r3, [r4, #20]
 800bfa4:	425b      	negs	r3, r3
 800bfa6:	61a3      	str	r3, [r4, #24]
 800bfa8:	6923      	ldr	r3, [r4, #16]
 800bfaa:	b953      	cbnz	r3, 800bfc2 <__swsetup_r+0xc6>
 800bfac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfb0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800bfb4:	d1ba      	bne.n	800bf2c <__swsetup_r+0x30>
 800bfb6:	bd70      	pop	{r4, r5, r6, pc}
 800bfb8:	0792      	lsls	r2, r2, #30
 800bfba:	bf58      	it	pl
 800bfbc:	6963      	ldrpl	r3, [r4, #20]
 800bfbe:	60a3      	str	r3, [r4, #8]
 800bfc0:	e7f2      	b.n	800bfa8 <__swsetup_r+0xac>
 800bfc2:	2000      	movs	r0, #0
 800bfc4:	e7f7      	b.n	800bfb6 <__swsetup_r+0xba>
 800bfc6:	bf00      	nop
 800bfc8:	20000024 	.word	0x20000024
 800bfcc:	0800c4d0 	.word	0x0800c4d0
 800bfd0:	0800c4f0 	.word	0x0800c4f0
 800bfd4:	0800c4b0 	.word	0x0800c4b0

0800bfd8 <_close_r>:
 800bfd8:	b538      	push	{r3, r4, r5, lr}
 800bfda:	4c06      	ldr	r4, [pc, #24]	; (800bff4 <_close_r+0x1c>)
 800bfdc:	2300      	movs	r3, #0
 800bfde:	4605      	mov	r5, r0
 800bfe0:	4608      	mov	r0, r1
 800bfe2:	6023      	str	r3, [r4, #0]
 800bfe4:	f7f6 f98a 	bl	80022fc <_close>
 800bfe8:	1c43      	adds	r3, r0, #1
 800bfea:	d102      	bne.n	800bff2 <_close_r+0x1a>
 800bfec:	6823      	ldr	r3, [r4, #0]
 800bfee:	b103      	cbz	r3, 800bff2 <_close_r+0x1a>
 800bff0:	602b      	str	r3, [r5, #0]
 800bff2:	bd38      	pop	{r3, r4, r5, pc}
 800bff4:	200009b4 	.word	0x200009b4

0800bff8 <__sflush_r>:
 800bff8:	898a      	ldrh	r2, [r1, #12]
 800bffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bffe:	4605      	mov	r5, r0
 800c000:	0710      	lsls	r0, r2, #28
 800c002:	460c      	mov	r4, r1
 800c004:	d458      	bmi.n	800c0b8 <__sflush_r+0xc0>
 800c006:	684b      	ldr	r3, [r1, #4]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	dc05      	bgt.n	800c018 <__sflush_r+0x20>
 800c00c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c00e:	2b00      	cmp	r3, #0
 800c010:	dc02      	bgt.n	800c018 <__sflush_r+0x20>
 800c012:	2000      	movs	r0, #0
 800c014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c018:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c01a:	2e00      	cmp	r6, #0
 800c01c:	d0f9      	beq.n	800c012 <__sflush_r+0x1a>
 800c01e:	2300      	movs	r3, #0
 800c020:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c024:	682f      	ldr	r7, [r5, #0]
 800c026:	6a21      	ldr	r1, [r4, #32]
 800c028:	602b      	str	r3, [r5, #0]
 800c02a:	d032      	beq.n	800c092 <__sflush_r+0x9a>
 800c02c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c02e:	89a3      	ldrh	r3, [r4, #12]
 800c030:	075a      	lsls	r2, r3, #29
 800c032:	d505      	bpl.n	800c040 <__sflush_r+0x48>
 800c034:	6863      	ldr	r3, [r4, #4]
 800c036:	1ac0      	subs	r0, r0, r3
 800c038:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c03a:	b10b      	cbz	r3, 800c040 <__sflush_r+0x48>
 800c03c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c03e:	1ac0      	subs	r0, r0, r3
 800c040:	2300      	movs	r3, #0
 800c042:	4602      	mov	r2, r0
 800c044:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c046:	6a21      	ldr	r1, [r4, #32]
 800c048:	4628      	mov	r0, r5
 800c04a:	47b0      	blx	r6
 800c04c:	1c43      	adds	r3, r0, #1
 800c04e:	89a3      	ldrh	r3, [r4, #12]
 800c050:	d106      	bne.n	800c060 <__sflush_r+0x68>
 800c052:	6829      	ldr	r1, [r5, #0]
 800c054:	291d      	cmp	r1, #29
 800c056:	d848      	bhi.n	800c0ea <__sflush_r+0xf2>
 800c058:	4a29      	ldr	r2, [pc, #164]	; (800c100 <__sflush_r+0x108>)
 800c05a:	40ca      	lsrs	r2, r1
 800c05c:	07d6      	lsls	r6, r2, #31
 800c05e:	d544      	bpl.n	800c0ea <__sflush_r+0xf2>
 800c060:	2200      	movs	r2, #0
 800c062:	6062      	str	r2, [r4, #4]
 800c064:	04d9      	lsls	r1, r3, #19
 800c066:	6922      	ldr	r2, [r4, #16]
 800c068:	6022      	str	r2, [r4, #0]
 800c06a:	d504      	bpl.n	800c076 <__sflush_r+0x7e>
 800c06c:	1c42      	adds	r2, r0, #1
 800c06e:	d101      	bne.n	800c074 <__sflush_r+0x7c>
 800c070:	682b      	ldr	r3, [r5, #0]
 800c072:	b903      	cbnz	r3, 800c076 <__sflush_r+0x7e>
 800c074:	6560      	str	r0, [r4, #84]	; 0x54
 800c076:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c078:	602f      	str	r7, [r5, #0]
 800c07a:	2900      	cmp	r1, #0
 800c07c:	d0c9      	beq.n	800c012 <__sflush_r+0x1a>
 800c07e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c082:	4299      	cmp	r1, r3
 800c084:	d002      	beq.n	800c08c <__sflush_r+0x94>
 800c086:	4628      	mov	r0, r5
 800c088:	f7ff fb26 	bl	800b6d8 <_free_r>
 800c08c:	2000      	movs	r0, #0
 800c08e:	6360      	str	r0, [r4, #52]	; 0x34
 800c090:	e7c0      	b.n	800c014 <__sflush_r+0x1c>
 800c092:	2301      	movs	r3, #1
 800c094:	4628      	mov	r0, r5
 800c096:	47b0      	blx	r6
 800c098:	1c41      	adds	r1, r0, #1
 800c09a:	d1c8      	bne.n	800c02e <__sflush_r+0x36>
 800c09c:	682b      	ldr	r3, [r5, #0]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d0c5      	beq.n	800c02e <__sflush_r+0x36>
 800c0a2:	2b1d      	cmp	r3, #29
 800c0a4:	d001      	beq.n	800c0aa <__sflush_r+0xb2>
 800c0a6:	2b16      	cmp	r3, #22
 800c0a8:	d101      	bne.n	800c0ae <__sflush_r+0xb6>
 800c0aa:	602f      	str	r7, [r5, #0]
 800c0ac:	e7b1      	b.n	800c012 <__sflush_r+0x1a>
 800c0ae:	89a3      	ldrh	r3, [r4, #12]
 800c0b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0b4:	81a3      	strh	r3, [r4, #12]
 800c0b6:	e7ad      	b.n	800c014 <__sflush_r+0x1c>
 800c0b8:	690f      	ldr	r7, [r1, #16]
 800c0ba:	2f00      	cmp	r7, #0
 800c0bc:	d0a9      	beq.n	800c012 <__sflush_r+0x1a>
 800c0be:	0793      	lsls	r3, r2, #30
 800c0c0:	680e      	ldr	r6, [r1, #0]
 800c0c2:	bf08      	it	eq
 800c0c4:	694b      	ldreq	r3, [r1, #20]
 800c0c6:	600f      	str	r7, [r1, #0]
 800c0c8:	bf18      	it	ne
 800c0ca:	2300      	movne	r3, #0
 800c0cc:	eba6 0807 	sub.w	r8, r6, r7
 800c0d0:	608b      	str	r3, [r1, #8]
 800c0d2:	f1b8 0f00 	cmp.w	r8, #0
 800c0d6:	dd9c      	ble.n	800c012 <__sflush_r+0x1a>
 800c0d8:	4643      	mov	r3, r8
 800c0da:	463a      	mov	r2, r7
 800c0dc:	6a21      	ldr	r1, [r4, #32]
 800c0de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c0e0:	4628      	mov	r0, r5
 800c0e2:	47b0      	blx	r6
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	dc06      	bgt.n	800c0f6 <__sflush_r+0xfe>
 800c0e8:	89a3      	ldrh	r3, [r4, #12]
 800c0ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0ee:	81a3      	strh	r3, [r4, #12]
 800c0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0f4:	e78e      	b.n	800c014 <__sflush_r+0x1c>
 800c0f6:	4407      	add	r7, r0
 800c0f8:	eba8 0800 	sub.w	r8, r8, r0
 800c0fc:	e7e9      	b.n	800c0d2 <__sflush_r+0xda>
 800c0fe:	bf00      	nop
 800c100:	20400001 	.word	0x20400001

0800c104 <_fflush_r>:
 800c104:	b538      	push	{r3, r4, r5, lr}
 800c106:	690b      	ldr	r3, [r1, #16]
 800c108:	4605      	mov	r5, r0
 800c10a:	460c      	mov	r4, r1
 800c10c:	b1db      	cbz	r3, 800c146 <_fflush_r+0x42>
 800c10e:	b118      	cbz	r0, 800c118 <_fflush_r+0x14>
 800c110:	6983      	ldr	r3, [r0, #24]
 800c112:	b90b      	cbnz	r3, 800c118 <_fflush_r+0x14>
 800c114:	f7fe faf4 	bl	800a700 <__sinit>
 800c118:	4b0c      	ldr	r3, [pc, #48]	; (800c14c <_fflush_r+0x48>)
 800c11a:	429c      	cmp	r4, r3
 800c11c:	d109      	bne.n	800c132 <_fflush_r+0x2e>
 800c11e:	686c      	ldr	r4, [r5, #4]
 800c120:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c124:	b17b      	cbz	r3, 800c146 <_fflush_r+0x42>
 800c126:	4621      	mov	r1, r4
 800c128:	4628      	mov	r0, r5
 800c12a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c12e:	f7ff bf63 	b.w	800bff8 <__sflush_r>
 800c132:	4b07      	ldr	r3, [pc, #28]	; (800c150 <_fflush_r+0x4c>)
 800c134:	429c      	cmp	r4, r3
 800c136:	d101      	bne.n	800c13c <_fflush_r+0x38>
 800c138:	68ac      	ldr	r4, [r5, #8]
 800c13a:	e7f1      	b.n	800c120 <_fflush_r+0x1c>
 800c13c:	4b05      	ldr	r3, [pc, #20]	; (800c154 <_fflush_r+0x50>)
 800c13e:	429c      	cmp	r4, r3
 800c140:	bf08      	it	eq
 800c142:	68ec      	ldreq	r4, [r5, #12]
 800c144:	e7ec      	b.n	800c120 <_fflush_r+0x1c>
 800c146:	2000      	movs	r0, #0
 800c148:	bd38      	pop	{r3, r4, r5, pc}
 800c14a:	bf00      	nop
 800c14c:	0800c4d0 	.word	0x0800c4d0
 800c150:	0800c4f0 	.word	0x0800c4f0
 800c154:	0800c4b0 	.word	0x0800c4b0

0800c158 <_lseek_r>:
 800c158:	b538      	push	{r3, r4, r5, lr}
 800c15a:	4c07      	ldr	r4, [pc, #28]	; (800c178 <_lseek_r+0x20>)
 800c15c:	4605      	mov	r5, r0
 800c15e:	4608      	mov	r0, r1
 800c160:	4611      	mov	r1, r2
 800c162:	2200      	movs	r2, #0
 800c164:	6022      	str	r2, [r4, #0]
 800c166:	461a      	mov	r2, r3
 800c168:	f7f6 f8ef 	bl	800234a <_lseek>
 800c16c:	1c43      	adds	r3, r0, #1
 800c16e:	d102      	bne.n	800c176 <_lseek_r+0x1e>
 800c170:	6823      	ldr	r3, [r4, #0]
 800c172:	b103      	cbz	r3, 800c176 <_lseek_r+0x1e>
 800c174:	602b      	str	r3, [r5, #0]
 800c176:	bd38      	pop	{r3, r4, r5, pc}
 800c178:	200009b4 	.word	0x200009b4

0800c17c <__swhatbuf_r>:
 800c17c:	b570      	push	{r4, r5, r6, lr}
 800c17e:	460e      	mov	r6, r1
 800c180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c184:	2900      	cmp	r1, #0
 800c186:	b096      	sub	sp, #88	; 0x58
 800c188:	4614      	mov	r4, r2
 800c18a:	461d      	mov	r5, r3
 800c18c:	da07      	bge.n	800c19e <__swhatbuf_r+0x22>
 800c18e:	2300      	movs	r3, #0
 800c190:	602b      	str	r3, [r5, #0]
 800c192:	89b3      	ldrh	r3, [r6, #12]
 800c194:	061a      	lsls	r2, r3, #24
 800c196:	d410      	bmi.n	800c1ba <__swhatbuf_r+0x3e>
 800c198:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c19c:	e00e      	b.n	800c1bc <__swhatbuf_r+0x40>
 800c19e:	466a      	mov	r2, sp
 800c1a0:	f000 f8a4 	bl	800c2ec <_fstat_r>
 800c1a4:	2800      	cmp	r0, #0
 800c1a6:	dbf2      	blt.n	800c18e <__swhatbuf_r+0x12>
 800c1a8:	9a01      	ldr	r2, [sp, #4]
 800c1aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c1ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c1b2:	425a      	negs	r2, r3
 800c1b4:	415a      	adcs	r2, r3
 800c1b6:	602a      	str	r2, [r5, #0]
 800c1b8:	e7ee      	b.n	800c198 <__swhatbuf_r+0x1c>
 800c1ba:	2340      	movs	r3, #64	; 0x40
 800c1bc:	2000      	movs	r0, #0
 800c1be:	6023      	str	r3, [r4, #0]
 800c1c0:	b016      	add	sp, #88	; 0x58
 800c1c2:	bd70      	pop	{r4, r5, r6, pc}

0800c1c4 <__smakebuf_r>:
 800c1c4:	898b      	ldrh	r3, [r1, #12]
 800c1c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c1c8:	079d      	lsls	r5, r3, #30
 800c1ca:	4606      	mov	r6, r0
 800c1cc:	460c      	mov	r4, r1
 800c1ce:	d507      	bpl.n	800c1e0 <__smakebuf_r+0x1c>
 800c1d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c1d4:	6023      	str	r3, [r4, #0]
 800c1d6:	6123      	str	r3, [r4, #16]
 800c1d8:	2301      	movs	r3, #1
 800c1da:	6163      	str	r3, [r4, #20]
 800c1dc:	b002      	add	sp, #8
 800c1de:	bd70      	pop	{r4, r5, r6, pc}
 800c1e0:	ab01      	add	r3, sp, #4
 800c1e2:	466a      	mov	r2, sp
 800c1e4:	f7ff ffca 	bl	800c17c <__swhatbuf_r>
 800c1e8:	9900      	ldr	r1, [sp, #0]
 800c1ea:	4605      	mov	r5, r0
 800c1ec:	4630      	mov	r0, r6
 800c1ee:	f7ff fac1 	bl	800b774 <_malloc_r>
 800c1f2:	b948      	cbnz	r0, 800c208 <__smakebuf_r+0x44>
 800c1f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1f8:	059a      	lsls	r2, r3, #22
 800c1fa:	d4ef      	bmi.n	800c1dc <__smakebuf_r+0x18>
 800c1fc:	f023 0303 	bic.w	r3, r3, #3
 800c200:	f043 0302 	orr.w	r3, r3, #2
 800c204:	81a3      	strh	r3, [r4, #12]
 800c206:	e7e3      	b.n	800c1d0 <__smakebuf_r+0xc>
 800c208:	4b0d      	ldr	r3, [pc, #52]	; (800c240 <__smakebuf_r+0x7c>)
 800c20a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c20c:	89a3      	ldrh	r3, [r4, #12]
 800c20e:	6020      	str	r0, [r4, #0]
 800c210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c214:	81a3      	strh	r3, [r4, #12]
 800c216:	9b00      	ldr	r3, [sp, #0]
 800c218:	6163      	str	r3, [r4, #20]
 800c21a:	9b01      	ldr	r3, [sp, #4]
 800c21c:	6120      	str	r0, [r4, #16]
 800c21e:	b15b      	cbz	r3, 800c238 <__smakebuf_r+0x74>
 800c220:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c224:	4630      	mov	r0, r6
 800c226:	f000 f873 	bl	800c310 <_isatty_r>
 800c22a:	b128      	cbz	r0, 800c238 <__smakebuf_r+0x74>
 800c22c:	89a3      	ldrh	r3, [r4, #12]
 800c22e:	f023 0303 	bic.w	r3, r3, #3
 800c232:	f043 0301 	orr.w	r3, r3, #1
 800c236:	81a3      	strh	r3, [r4, #12]
 800c238:	89a3      	ldrh	r3, [r4, #12]
 800c23a:	431d      	orrs	r5, r3
 800c23c:	81a5      	strh	r5, [r4, #12]
 800c23e:	e7cd      	b.n	800c1dc <__smakebuf_r+0x18>
 800c240:	0800a6c9 	.word	0x0800a6c9

0800c244 <memmove>:
 800c244:	4288      	cmp	r0, r1
 800c246:	b510      	push	{r4, lr}
 800c248:	eb01 0302 	add.w	r3, r1, r2
 800c24c:	d807      	bhi.n	800c25e <memmove+0x1a>
 800c24e:	1e42      	subs	r2, r0, #1
 800c250:	4299      	cmp	r1, r3
 800c252:	d00a      	beq.n	800c26a <memmove+0x26>
 800c254:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c258:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c25c:	e7f8      	b.n	800c250 <memmove+0xc>
 800c25e:	4283      	cmp	r3, r0
 800c260:	d9f5      	bls.n	800c24e <memmove+0xa>
 800c262:	1881      	adds	r1, r0, r2
 800c264:	1ad2      	subs	r2, r2, r3
 800c266:	42d3      	cmn	r3, r2
 800c268:	d100      	bne.n	800c26c <memmove+0x28>
 800c26a:	bd10      	pop	{r4, pc}
 800c26c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c270:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c274:	e7f7      	b.n	800c266 <memmove+0x22>

0800c276 <__malloc_lock>:
 800c276:	4770      	bx	lr

0800c278 <__malloc_unlock>:
 800c278:	4770      	bx	lr

0800c27a <_realloc_r>:
 800c27a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c27c:	4607      	mov	r7, r0
 800c27e:	4614      	mov	r4, r2
 800c280:	460e      	mov	r6, r1
 800c282:	b921      	cbnz	r1, 800c28e <_realloc_r+0x14>
 800c284:	4611      	mov	r1, r2
 800c286:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c28a:	f7ff ba73 	b.w	800b774 <_malloc_r>
 800c28e:	b922      	cbnz	r2, 800c29a <_realloc_r+0x20>
 800c290:	f7ff fa22 	bl	800b6d8 <_free_r>
 800c294:	4625      	mov	r5, r4
 800c296:	4628      	mov	r0, r5
 800c298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c29a:	f000 f849 	bl	800c330 <_malloc_usable_size_r>
 800c29e:	42a0      	cmp	r0, r4
 800c2a0:	d20f      	bcs.n	800c2c2 <_realloc_r+0x48>
 800c2a2:	4621      	mov	r1, r4
 800c2a4:	4638      	mov	r0, r7
 800c2a6:	f7ff fa65 	bl	800b774 <_malloc_r>
 800c2aa:	4605      	mov	r5, r0
 800c2ac:	2800      	cmp	r0, #0
 800c2ae:	d0f2      	beq.n	800c296 <_realloc_r+0x1c>
 800c2b0:	4631      	mov	r1, r6
 800c2b2:	4622      	mov	r2, r4
 800c2b4:	f7fb fe5e 	bl	8007f74 <memcpy>
 800c2b8:	4631      	mov	r1, r6
 800c2ba:	4638      	mov	r0, r7
 800c2bc:	f7ff fa0c 	bl	800b6d8 <_free_r>
 800c2c0:	e7e9      	b.n	800c296 <_realloc_r+0x1c>
 800c2c2:	4635      	mov	r5, r6
 800c2c4:	e7e7      	b.n	800c296 <_realloc_r+0x1c>
	...

0800c2c8 <_read_r>:
 800c2c8:	b538      	push	{r3, r4, r5, lr}
 800c2ca:	4c07      	ldr	r4, [pc, #28]	; (800c2e8 <_read_r+0x20>)
 800c2cc:	4605      	mov	r5, r0
 800c2ce:	4608      	mov	r0, r1
 800c2d0:	4611      	mov	r1, r2
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	6022      	str	r2, [r4, #0]
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	f7f5 ffd7 	bl	800228a <_read>
 800c2dc:	1c43      	adds	r3, r0, #1
 800c2de:	d102      	bne.n	800c2e6 <_read_r+0x1e>
 800c2e0:	6823      	ldr	r3, [r4, #0]
 800c2e2:	b103      	cbz	r3, 800c2e6 <_read_r+0x1e>
 800c2e4:	602b      	str	r3, [r5, #0]
 800c2e6:	bd38      	pop	{r3, r4, r5, pc}
 800c2e8:	200009b4 	.word	0x200009b4

0800c2ec <_fstat_r>:
 800c2ec:	b538      	push	{r3, r4, r5, lr}
 800c2ee:	4c07      	ldr	r4, [pc, #28]	; (800c30c <_fstat_r+0x20>)
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	4605      	mov	r5, r0
 800c2f4:	4608      	mov	r0, r1
 800c2f6:	4611      	mov	r1, r2
 800c2f8:	6023      	str	r3, [r4, #0]
 800c2fa:	f7f6 f80b 	bl	8002314 <_fstat>
 800c2fe:	1c43      	adds	r3, r0, #1
 800c300:	d102      	bne.n	800c308 <_fstat_r+0x1c>
 800c302:	6823      	ldr	r3, [r4, #0]
 800c304:	b103      	cbz	r3, 800c308 <_fstat_r+0x1c>
 800c306:	602b      	str	r3, [r5, #0]
 800c308:	bd38      	pop	{r3, r4, r5, pc}
 800c30a:	bf00      	nop
 800c30c:	200009b4 	.word	0x200009b4

0800c310 <_isatty_r>:
 800c310:	b538      	push	{r3, r4, r5, lr}
 800c312:	4c06      	ldr	r4, [pc, #24]	; (800c32c <_isatty_r+0x1c>)
 800c314:	2300      	movs	r3, #0
 800c316:	4605      	mov	r5, r0
 800c318:	4608      	mov	r0, r1
 800c31a:	6023      	str	r3, [r4, #0]
 800c31c:	f7f6 f80a 	bl	8002334 <_isatty>
 800c320:	1c43      	adds	r3, r0, #1
 800c322:	d102      	bne.n	800c32a <_isatty_r+0x1a>
 800c324:	6823      	ldr	r3, [r4, #0]
 800c326:	b103      	cbz	r3, 800c32a <_isatty_r+0x1a>
 800c328:	602b      	str	r3, [r5, #0]
 800c32a:	bd38      	pop	{r3, r4, r5, pc}
 800c32c:	200009b4 	.word	0x200009b4

0800c330 <_malloc_usable_size_r>:
 800c330:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c334:	1f18      	subs	r0, r3, #4
 800c336:	2b00      	cmp	r3, #0
 800c338:	bfbc      	itt	lt
 800c33a:	580b      	ldrlt	r3, [r1, r0]
 800c33c:	18c0      	addlt	r0, r0, r3
 800c33e:	4770      	bx	lr

0800c340 <_init>:
 800c340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c342:	bf00      	nop
 800c344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c346:	bc08      	pop	{r3}
 800c348:	469e      	mov	lr, r3
 800c34a:	4770      	bx	lr

0800c34c <_fini>:
 800c34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c34e:	bf00      	nop
 800c350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c352:	bc08      	pop	{r3}
 800c354:	469e      	mov	lr, r3
 800c356:	4770      	bx	lr
